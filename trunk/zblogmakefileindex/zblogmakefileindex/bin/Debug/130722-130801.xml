<files codepage='65001' xmlns:dt='urn:schemas-microsoft-com:datatypes'>
	<file name='zb_system\cmd.asp' crc32='A208C3A4'  dt:dt='bin.base64'></file>
	<file name='zb_system\ADMIN\edit_article.asp' crc32='568B04FB'  dt:dt='bin.base64'></file>
	<file name='zb_system\FUNCTION\c_function.asp' crc32='37DD08D1'  dt:dt='bin.base64'></file>
	<file name='zb_system\FUNCTION\c_system_base.asp' crc32='E1BF2BA2'  dt:dt='bin.base64'>77u/PCUNCicvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vDQonLy8gICAgICAgICAgICAgIFotQmxvZw0KJy8vIOS9nCAgICDogIU6ICAgIOacseeFiih6eC5hc2QpDQonLy8g54mI5p2D5omA5pyJOiAgICBSYWluYm93U29mdCBTdHVkaW8NCicvLyDmioDmnK/mlK/mjIE6ICAgIHJhaW5ib3dzb2Z0QDE2My5jb20NCicvLyDnqIvluo/lkI3np7A6DQonLy8g56iL5bqP54mI5pysOg0KJy8vIOWNleWFg+WQjeensDogICAgY19zeXN0ZW1fYmFzZS5hc3ANCicvLyDlvIDlp4vml7bpl7Q6ICAgIDIwMDUuMDIuMTENCicvLyDmnIDlkI7kv67mlLk6DQonLy8g5aSHICAgIOazqDoNCicvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vDQoNCiflrprkuYnlhajlsYDlj5jph48NCkRpbSBvYmpDb25uDQoNCkRpbSBCbG9nVGl0bGUNCg0KDQpEaW0gQmxvZ0hvc3QNCkJsb2dIb3N0PUdldEN1cnJlbnRIb3N0KCkNClpDX0JMT0dfSE9TVD1CbG9nSG9zdA0KDQpEaW0gQmxvZ1BhdGgNCkJsb2dQYXRoPUdldFJlYWxseURpcmVjdG9yeSgpDQoNCifooaXkuIpjX29wdGlvbi5hc3DmnKrmm7TmlrDnmoTlj4LmlbANCkNhbGwgQ2hlY2tVbmRlZmluZWQoKQ0KDQoNCkRpbSBCbG9nVmVyc2lvbg0KQmxvZ1ZlcnNpb249R2V0QmxvZ1ZlcnNpb24oKQ0KDQpEaW0gWkNfQkxPR19DTFNJRF9PUklHSU5BTA0KWkNfQkxPR19DTFNJRF9PUklHSU5BTD1aQ19CTE9HX0NMU0lEDQpaQ19CTE9HX0NMU0lEPU1ENShCbG9nUGF0aCAmIFpDX0JMT0dfQ0xTSURfT1JJR0lOQUwpDQoNCkRpbSBTdGFyVGltZQ0KRGltIEVuZFRpbWUNClN0YXJUaW1lID0gVGltZXIoKQ0KDQpEaW0gQmxvZ1VzZXINClNldCBCbG9nVXNlciA9TmV3IFRVc2VyDQoNCkRpbSBDYXRlZ29yeXMoKQ0KRGltIFVzZXJzKCkNCkRpbSBUYWdzKCkNCkRpbSBGdW5jdGlvbnMoKQ0KDQpSZURpbSBDYXRlZ29yeXMoMCkNClJlRGltIFVzZXJzKDApDQpSZURpbSBUYWdzKDApDQpSZURpbSBGdW5jdGlvbnMoMCkNCg0KU2V0IENhdGVnb3J5cygwKT1OZXcgVENhdGVnb3J5DQpTZXQgVXNlcnMoMCk9TmV3IFRVc2VyDQpTZXQgVGFncygwKT1OZXcgVFRhZw0KDQpEaW0gRnVuY3Rpb25NZXRhcw0KU2V0IEZ1bmN0aW9uTWV0YXM9TmV3IFRNZXRhDQoNCkRpbSBDb25maWdNZXRhcw0KU2V0IENvbmZpZ01ldGFzPU5ldyBUTWV0YQ0KDQpEaW0gQmxvZ0NvbmZpZw0KU2V0IEJsb2dDb25maWcgPSBOZXcgVENvbmZpZw0KDQpEaW0gUGx1Z2luTmFtZSgpDQpEaW0gUGx1Z2luQWN0aXZlRnVuY3Rpb24oKQ0KUmVEaW0gUGx1Z2luTmFtZSgwKQ0KUmVEaW0gUGx1Z2luQWN0aXZlRnVuY3Rpb24oMCkNCg0KDQpEaW0gVGVtcGxhdGVEaWMNCkRpbSBUZW1wbGF0ZVRhZ3NEaWMNCg0KU2V0IFRlbXBsYXRlRGljPUNyZWF0ZU9iamVjdCgiU2NyaXB0aW5nLkRpY3Rpb25hcnkiKQ0KU2V0IFRlbXBsYXRlVGFnc0RpYz1DcmVhdGVPYmplY3QoIlNjcmlwdGluZy5EaWN0aW9uYXJ5IikNCg0KRGltIFpDX0JMT0dfV0VCRURJVA0KWkNfQkxPR19XRUJFRElUPSJ1ZWRpdG9yIg0KDQpEaW0gWkNfVEJfRVhDRVJQVF9NQVgNClpDX1RCX0VYQ0VSUFRfTUFYPTI1MA0KDQpEaW0gWkNfVFJBQ0tCQUNLX1RVUk5PRkYNClpDX1RSQUNLQkFDS19UVVJOT0ZGPVRydWUNCg0KQ29uc3QgWkNfRElTUExBWV9NT0RFX0FMTD0xDQpDb25zdCBaQ19ESVNQTEFZX01PREVfSU5UUk89Mg0KQ29uc3QgWkNfRElTUExBWV9NT0RFX09OVE9QPTMNCkNvbnN0IFpDX0RJU1BMQVlfTU9ERV9TRUFSQ0g9NA0KQ29uc3QgWkNfRElTUExBWV9NT0RFX1NZU1RFTVBBR0U9NQ0KQ29uc3QgWkNfRElTUExBWV9NT0RFX0NPTU1FTlRTPTYNCg0KDQpDb25zdCBaQ19QT1NUX1RZUEVfQVJUSUNMRT0wDQpDb25zdCBaQ19QT1NUX1RZUEVfUEFHRT0xDQoNCg0KQ29uc3QgWkNfREVGQVVMVF9TSURFQkFSPSJjYWxlbmRhcjpjb250cm9scGFuZWw6Y2F0YWxvZzpzZWFyY2hwYW5lbDpjb21tZW50czphcmNoaXZlczpmYXZvcml0ZTpsaW5rOm1pc2MiDQoNCkRpbSBaQ19OQVZCQVJfTUVOVV9JVEVNDQpaQ19OQVZCQVJfTUVOVV9JVEVNPSI8bGkgaWQ9IiJtZW51LSV0eXBlLSVpZCIiPjxhIGhyZWY9IiIldXJsIiI+JW5hbWU8L2E+PC9saT4iDQoNCg0KRGltIFpDX1BBR0VfQU5EX0FSVElDTEVfUFJJVkFURV9SRUdFWA0KWkNfUEFHRV9BTkRfQVJUSUNMRV9QUklWQVRFX1JFR0VYPSJ7JWhvc3QlfS92aWV3LmFzcD9pZD17JWlkJX0iDQoNCg0KRGltIFpDX1BBR0VfQU5EX0FSVElDTEVfRFJBRlRfUkVHRVgNClpDX1BBR0VfQU5EX0FSVElDTEVfRFJBRlRfUkVHRVg9InslaG9zdCV9L3ZpZXcuYXNwP2lkPXslaWQlfSINCg0KJ+WmguaenOi/nuaOpeaVsOaNruW6k+S4uk1TU1FM77yM5YiZ5bqU5Li6J++8jOm7mOiupOi/nuaOpUFjY2Vzc+aVsOaNruW6k+WImeS4uiMNCkRpbSBaQ19TUUxfUE9VTkRfS0VZDQpaQ19TUUxfUE9VTkRfS0VZPSIjIg0KDQpEaW0gWkNfQ09NTUVOVF9WRVJJRllfRU5BQkxFX0lOVEVSTkFMDQpaQ19DT01NRU5UX1ZFUklGWV9FTkFCTEVfSU5URVJOQUw9VHJ1ZQ0KDQpEaW0gWkNfQkxPR19QUk9EVUNUDQpaQ19CTE9HX1BST0RVQ1Q9IlotQmxvZyINCg0KRGltIFpDX0JMT0dfUFJPRFVDVF9GVUxMDQpaQ19CTE9HX1BST0RVQ1RfRlVMTD0iIg0KDQpEaW0gWkNfQkxPR19QUk9EVUNUX0ZVTExIVE1MDQpaQ19CTE9HX1BST0RVQ1RfRlVMTEhUTUw9IiINCg0KJyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KJyDnm67nmoTvvJogICAgU3lzdGVtIOWIneWni+WMlg0KJyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KU3ViIFN5c3RlbV9Jbml0aWFsaXplKCkNCg0KCSdDYWxsIEFjdGl2ZVBsdWdpbigpDQoNCglJZiBPcGVuQ29ubmVjdCgpPUZhbHNlIFRoZW4NCgkJQ2FsbCBTaG93RXJyb3IoNCkNCglFbmQgSWYNCg0KCUNhbGwgR2V0Q29uZmlncygpDQoJQmxvZ0NvbmZpZy5Mb2FkKCJCbG9nIikNCg0KCUJsb2dVc2VyLlZlcmlmeSgpDQoNCglDYWxsIEdldENhdGVnb3J5KCkNCgknQ2FsbCBHZXRVc2VyKCkNCgknQ2FsbCBHZXRUYWdzKCkNCgknQ2FsbCBHZXRLZXlXb3JkcygpDQoJJ0NhbGwgR2V0RnVuY3Rpb24oKQ0KDQoJWkNfQkxPR19WRVJTSU9OPUJsb2dDb25maWcuUmVhZCgiWkNfQkxPR19WRVJTSU9OIikNCg0KCVpDX0JMT0dfUFJPRFVDVF9GVUxMPVpDX0JMT0dfUFJPRFVDVCAmICIgIiAmIFpDX0JMT0dfVkVSU0lPTg0KCQ0KCVpDX0JMT0dfUFJPRFVDVF9GVUxMSFRNTD0iPGEgaHJlZj0iImh0dHA6Ly93d3cucmFpbmJvd3NvZnQub3JnLyIiIHRpdGxlPSIiUmFpbmJvd1NvZnQgWi1CbG9nIiI+IiAmIFpDX0JMT0dfUFJPRFVDVF9GVUxMICYgIjwvYT4iDQoNCglUZW1wbGF0ZVRhZ3NEaWMuSXRlbSgiWkNfQkxPR19IT1NUIik9QmxvZ0hvc3QNCg0KCUNhbGwgTG9hZEdsb2JlQ2FjaGUoKQ0KCUNhbGwgQ3JlYXRlQWRtaW5MZWZ0TWVudSgpDQoJQ2FsbCBDcmVhdGVBZG1pblRvcE1lbnUoKQ0KCUNhbGwgQWN0aXZlUGx1Z2luKCkNCgkncGx1Z2luIG5vZGUNCgliQWN0aW9uX1BsdWdpbl9TeXN0ZW1fSW5pdGlhbGl6ZT1GYWxzZQ0KCUZvciBFYWNoIHNBY3Rpb25fUGx1Z2luX1N5c3RlbV9Jbml0aWFsaXplIGluIEFjdGlvbl9QbHVnaW5fU3lzdGVtX0luaXRpYWxpemUNCgkJSWYgTm90IElzRW1wdHkoc0FjdGlvbl9QbHVnaW5fU3lzdGVtX0luaXRpYWxpemUpIFRoZW4gQ2FsbCBFeGVjdXRlKHNBY3Rpb25fUGx1Z2luX1N5c3RlbV9Jbml0aWFsaXplKQ0KCQlJZiBiQWN0aW9uX1BsdWdpbl9TeXN0ZW1fSW5pdGlhbGl6ZT1UcnVlIFRoZW4gRXhpdCBTdWINCglOZXh0DQoJDQoJSWYgWkNfUE9TVF9TVEFUSUNfTU9ERTw+IlNUQVRJQyIgVGhlbg0KCQlEaW0gYm9sUmVidWlsZEZpbGVzDQoJCUFwcGxpY2F0aW9uLkxvY2sNCgkJYm9sUmVidWlsZEZpbGVzPUFwcGxpY2F0aW9uKFpDX0JMT0dfQ0xTSUQgJiAiU0lHTkFMX1JFQlVJTERGSUxFUyIpDQoJCUFwcGxpY2F0aW9uLlVuTG9jaw0KCQlJZiBJc0VtcHR5KGJvbFJlYnVpbGRGaWxlcyk9RmFsc2UgVGhlbg0KCQkJSWYgYm9sUmVidWlsZEZpbGVzPVRydWUgVGhlbg0KCQkJCUNhbGwgU2V0QmxvZ0hpbnQoVHJ1ZSxUcnVlLEZhbHNlKQ0KCQkJRW5kIElmDQoJCUVuZCBJZg0KCUVuZCBJZg0KDQoJDQoJDQoJRGltIGJvbFJlYnVpbGRJbmRleA0KCUFwcGxpY2F0aW9uLkxvY2sNCglib2xSZWJ1aWxkSW5kZXg9QXBwbGljYXRpb24oWkNfQkxPR19DTFNJRCAmICJTSUdOQUxfUkVCVUlMRElOREVYIikNCglBcHBsaWNhdGlvbi5VbkxvY2sNCglJZiBJc0VtcHR5KGJvbFJlYnVpbGRJbmRleCk9RmFsc2UgVGhlbg0KCQlJZiBib2xSZWJ1aWxkSW5kZXg9VHJ1ZSBUaGVuDQoJCQlDYWxsIE1ha2VCbG9nUmVCdWlsZF9Db3JlKCkNCgkJRW5kIElmDQoJRW5kIElmDQoNCg0KCSflsIbmv4DmtLvmj5Lku7blkI7np7sNCglJZiBzRmlsdGVyX1BsdWdpbl9WYWxpZENvZGVfQ2hlY2s9IiIgVGhlbiBDYWxsIEFkZF9GaWx0ZXJfUGx1Z2luKCJGaWx0ZXJfUGx1Z2luX1ZhbGlkQ29kZV9DaGVjayIsIkNoZWNrVmVyaWZ5TnVtYmVyIikNCg0KDQoJJ3BsdWdpbiBub2RlDQoJYkFjdGlvbl9QbHVnaW5fU3lzdGVtX0luaXRpYWxpemVfU3VjY2VlZD1GYWxzZQ0KCUZvciBFYWNoIHNBY3Rpb25fUGx1Z2luX1N5c3RlbV9Jbml0aWFsaXplX1N1Y2NlZWQgaW4gQWN0aW9uX1BsdWdpbl9TeXN0ZW1fSW5pdGlhbGl6ZV9TdWNjZWVkDQoJCUlmIE5vdCBJc0VtcHR5KHNBY3Rpb25fUGx1Z2luX1N5c3RlbV9Jbml0aWFsaXplX1N1Y2NlZWQpIFRoZW4gQ2FsbCBFeGVjdXRlKHNBY3Rpb25fUGx1Z2luX1N5c3RlbV9Jbml0aWFsaXplX1N1Y2NlZWQpDQoJCUlmIGJBY3Rpb25fUGx1Z2luX1N5c3RlbV9Jbml0aWFsaXplX1N1Y2NlZWQ9VHJ1ZSBUaGVuIEV4aXQgU3ViDQoJTmV4dA0KDQoJJ0lmIEVyci5OdW1iZXI8PjAgVGhlbiBDYWxsIFNob3dFcnJvcigxMCkNCg0KRW5kIFN1Yg0KJyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KDQoNCg0KDQonKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqDQonIOebrueahO+8miAgICBTeXN0ZW0g6YeK5pS+DQonKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqDQpTdWIgU3lzdGVtX1Rlcm1pbmF0ZSgpDQoNCgkncGx1Z2luIG5vZGUNCgliQWN0aW9uX1BsdWdpbl9TeXN0ZW1fVGVybWluYXRlPUZhbHNlDQoJRm9yIEVhY2ggc0FjdGlvbl9QbHVnaW5fU3lzdGVtX1Rlcm1pbmF0ZSBpbiBBY3Rpb25fUGx1Z2luX1N5c3RlbV9UZXJtaW5hdGUNCgkJSWYgTm90IElzRW1wdHkoc0FjdGlvbl9QbHVnaW5fU3lzdGVtX1Rlcm1pbmF0ZSkgVGhlbiBDYWxsIEV4ZWN1dGUoc0FjdGlvbl9QbHVnaW5fU3lzdGVtX1Rlcm1pbmF0ZSkNCgkJSWYgYkFjdGlvbl9QbHVnaW5fU3lzdGVtX1Rlcm1pbmF0ZT1UcnVlIFRoZW4gRXhpdCBTdWINCglOZXh0DQoNCglTZXQgUHVibGljT2JqQWRvPU5vdGhpbmcNCglTZXQgUHVibGljT2JqRlNPPU5vdGhpbmcNCglDYWxsIENsb3NlQ29ubmVjdCgpDQoNCkVuZCBTdWINCicqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioNCg0KDQoNCg0KJyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KJyDnm67nmoTvvJogICAg5pWw5o2u5bqT6L+e5o6lDQonKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqDQpEaW0gSXNEQkNvbm5lY3QgJ+aVsOaNruW6k+aYr+WQpuW3sui/nuaOpQ0KSXNEQkNvbm5lY3Q9RmFsc2UNCkZ1bmN0aW9uIE9wZW5Db25uZWN0KCkNCg0KCU9uIEVycm9yIFJlc3VtZSBOZXh0DQoNCglJZiBJc0RCQ29ubmVjdD1UcnVlIFRoZW4NCgkJT3BlbkNvbm5lY3Q9VHJ1ZQ0KCQlFeGl0IEZ1bmN0aW9uDQoJRW5kIElmDQoNCgkncGx1Z2luIG5vZGUNCgliQWN0aW9uX1BsdWdpbl9PcGVuQ29ubmVjdD1GYWxzZQ0KCUZvciBFYWNoIHNBY3Rpb25fUGx1Z2luX09wZW5Db25uZWN0IGluIEFjdGlvbl9QbHVnaW5fT3BlbkNvbm5lY3QNCgkJSWYgTm90IElzRW1wdHkoc0FjdGlvbl9QbHVnaW5fT3BlbkNvbm5lY3QpIFRoZW4gQ2FsbCBFeGVjdXRlKHNBY3Rpb25fUGx1Z2luX09wZW5Db25uZWN0KQ0KCQlJZiBiQWN0aW9uX1BsdWdpbl9PcGVuQ29ubmVjdD1UcnVlIFRoZW4gRXhpdCBGdW5jdGlvbg0KCU5leHQNCg0KCSfliKTlrprmmK/lkKbkuLrlrZDnm67lvZXosIPnlKgNCglEaW0gc3RyRGJQYXRoDQoNCglzdHJEYlBhdGg9QmxvZ1BhdGggJiBaQ19EQVRBQkFTRV9QQVRIDQoNCglTZXQgb2JqQ29ubiA9IFNlcnZlci5DcmVhdGVPYmplY3QoIkFET0RCLkNvbm5lY3Rpb24iKQ0KCUlmIFpDX01TU1FMX0VOQUJMRT1UcnVlIFRoZW4NCgkJb2JqQ29ubi5PcGVuICJQcm92aWRlcj1TcWxPTEVEQjtEYXRhIFNvdXJjZT0iJlpDX01TU1FMX1NFUlZFUiYiO0luaXRpYWwgQ2F0YWxvZz0iJlpDX01TU1FMX0RBVEFCQVNFJiI7UGVyc2lzdCBTZWN1cml0eSBJbmZvPVRydWU7VXNlciBJRD0iJlpDX01TU1FMX1VTRVJOQU1FJiI7UGFzc3dvcmQ9IiZaQ19NU1NRTF9QQVNTV09SRCYiOyINCgkJWkNfU1FMX1BPVU5EX0tFWT0iJyINCglFbHNlDQoJCW9iakNvbm4uT3BlbiAiUHJvdmlkZXI9TWljcm9zb2Z0LkpldC5PTEVEQi40LjA7RGF0YSBTb3VyY2U9IiAmIHN0ckRiUGF0aA0KCUVuZCBJZg0KDQoJSWYgRXJyLk51bWJlcj0wIFRoZW4NCg0KCQlJc0RCQ29ubmVjdD1UcnVlDQoJCU9wZW5Db25uZWN0PVRydWUNCg0KCUVsc2UNCg0KCQlFcnIuQ2xlYXINCgkJRXJyLlJhaXNlIDENCg0KCUVuZCBJZg0KDQpFbmQgRnVuY3Rpb24NCicqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioNCg0KDQoNCg0KJyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KJyDnm67nmoTvvJogICAgREIgRGlzYWJsZSBDb25uZWN0DQonKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqDQpGdW5jdGlvbiBDbG9zZUNvbm5lY3QoKQ0KDQoJSWYgSXNEQkNvbm5lY3Q9RmFsc2UgVGhlbg0KCQlFeGl0IEZ1bmN0aW9uDQoJRW5kIElmDQoNCglvYmpDb25uLkNsb3NlDQoJU2V0IG9iakNvbm49Tm90aGluZw0KDQoJSXNEQkNvbm5lY3Q9RmFsc2UNCg0KCUNsb3NlQ29ubmVjdD1UcnVlDQoNCkVuZCBGdW5jdGlvbg0KJyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KDQoNCg0KDQonKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqDQonIOebrueahO+8miAgICDml7bpl7TorqHplb8NCicqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioNCkZ1bmN0aW9uIFJ1blRpbWUoKQ0KDQoJRW5kVGltZT1UaW1lcigpDQoJUnVuVGltZSA9IENMbmcoRm9ybWF0TnVtYmVyKChFbmRUaW1lLVN0YXJUaW1lKSoxMDAwLDMpKQ0KDQpFbmQgRnVuY3Rpb24NCicqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioNCg0KDQoNCg0KJyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KJyDnm67nmoTvvJogICAg5YiG57G76K+75Y+WDQonKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqDQonSXNSdW5HZXRDYXRlZ29yeem7mOiupOS4umZhbHNlLOWmguaenOi/kOihjOi/h+S4gOasoUdldENhdGVnb3J55YiZ5Li6VHJ1ZSzkuYvlkI7lho1HZXRDYXRlZ29yeeWImeS4jeaJp+ihjA0KRGltIElzUnVuR2V0Q2F0ZWdvcnkNCklzUnVuR2V0Q2F0ZWdvcnk9RmFsc2UNCkZ1bmN0aW9uIEdldENhdGVnb3J5KCkNCg0KCUlmIElzUnVuR2V0Q2F0ZWdvcnk9VHJ1ZSBUaGVuIEV4aXQgRnVuY3Rpb24NCg0KCURpbSBpLGosayxsDQoNCglEaW0gYXJ5QWxsRGF0YQ0KCURpbSBhcnlTaW5nbGVEYXRhKCkNCg0KCUVyYXNlIENhdGVnb3J5cw0KCVJlRGltIENhdGVnb3J5cygwKQ0KDQoJRGltIG9ialJTDQoNCglTZXQgb2JqUlM9b2JqQ29ubi5FeGVjdXRlKCJTRUxFQ1QgVE9QIDEgW2NhdGVfSURdIEZST00gW2Jsb2dfQ2F0ZWdvcnldIE9SREVSIEJZIFtjYXRlX0lEXSBERVNDIikNCglJZiAoTm90IG9ialJTLmJvZikgQW5kIChOb3Qgb2JqUlMuZW9mKSBUaGVuDQoJCWk9b2JqUlMoImNhdGVfSUQiKQ0KCQlSZURpbSBDYXRlZ29yeXMoaSkNCglFbmQgSWYNCglvYmpSUy5DbG9zZQ0KCVNldCBvYmpSUz1Ob3RoaW5nDQoNCglTZXQgb2JqUlM9b2JqQ29ubi5FeGVjdXRlKCJTRUxFQ1QgW2NhdGVfSURdLFtjYXRlX05hbWVdLFtjYXRlX0ludHJvXSxbY2F0ZV9PcmRlcl0sW2NhdGVfQ291bnRdLFtjYXRlX1BhcmVudElEXSxbY2F0ZV9VUkxdLFtjYXRlX1RlbXBsYXRlXSxbY2F0ZV9Mb2dUZW1wbGF0ZV0sW2NhdGVfRnVsbFVybF0sW2NhdGVfTWV0YV0gRlJPTSBbYmxvZ19DYXRlZ29yeV0gT1JERVIgQlkgW2NhdGVfSURdIEFTQyIpDQoJSWYgKE5vdCBvYmpSUy5ib2YpIEFuZCAoTm90IG9ialJTLmVvZikgVGhlbg0KDQoJCWFyeUFsbERhdGE9b2JqUlMuR2V0Um93cyhvYmpSUy5SZWNvcmRDb3VudCkNCgkJb2JqUlMuQ2xvc2UNCgkJU2V0IG9ialJTPU5vdGhpbmcNCg0KCQlrPVVCb3VuZChhcnlBbGxEYXRhLDEpDQoJCWw9VUJvdW5kKGFyeUFsbERhdGEsMikNCgkJRm9yIGk9MCBUbyBsDQoJCQlTZXQgQ2F0ZWdvcnlzKGFyeUFsbERhdGEoMCxpKSk9TmV3IFRDYXRlZ29yeQ0KCQkJQ2F0ZWdvcnlzKGFyeUFsbERhdGEoMCxpKSkuTG9hZEluZm9CeUFycmF5KEFycmF5KGFyeUFsbERhdGEoMCxpKSxhcnlBbGxEYXRhKDEsaSksYXJ5QWxsRGF0YSgyLGkpLGFyeUFsbERhdGEoMyxpKSxhcnlBbGxEYXRhKDQsaSksYXJ5QWxsRGF0YSg1LGkpLGFyeUFsbERhdGEoNixpKSxhcnlBbGxEYXRhKDcsaSksYXJ5QWxsRGF0YSg4LGkpLGFyeUFsbERhdGEoOSxpKSxhcnlBbGxEYXRhKDEwLGkpKSkNCgkJTmV4dA0KCUVuZCBJZg0KDQoJU2V0IENhdGVnb3J5cygwKT1OZXcgVENhdGVnb3J5DQoJQ2FsbCBDYXRlZ29yeXMoMCkuTG9hZEluZm9CeUlEKDApDQoNCglJc1J1bkdldENhdGVnb3J5PVRydWUNCg0KCUdldENhdGVnb3J5PVRydWUNCg0KRW5kIEZ1bmN0aW9uDQonKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqDQoNCg0KDQoNCicqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioNCicg55uu55qE77yaICAgIOeUqOaIt+ivu+WPlg0KJyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KRGltIElzUnVuR2V0VXNlcg0KSXNSdW5HZXRVc2VyPUZhbHNlDQpGdW5jdGlvbiBHZXRVc2VyKCkNCg0KCUlmIElzUnVuR2V0VXNlcj1UcnVlIFRoZW4gRXhpdCBGdW5jdGlvbg0KDQoJRGltIGksaixrLGwNCg0KCURpbSBhcnlBbGxEYXRhDQoJRGltIGFyeVNpbmdsZURhdGEoKQ0KDQoJRXJhc2UgVXNlcnMNCglSZURpbSBVc2VycygwKQ0KDQoJRGltIG9ialJTDQoNCglTZXQgb2JqUlM9b2JqQ29ubi5FeGVjdXRlKCJTRUxFQ1QgVE9QIDEgW21lbV9JRF0gRlJPTSBbYmxvZ19NZW1iZXJdIE9SREVSIEJZIFttZW1fSURdIERFU0MiKQ0KCUlmIChOb3Qgb2JqUlMuYm9mKSBBbmQgKE5vdCBvYmpSUy5lb2YpIFRoZW4NCgkJaT1vYmpSUygibWVtX0lEIikNCgkJUmVEaW0gVXNlcnMoaSkNCglFbmQgSWYNCglvYmpSUy5DbG9zZQ0KCVNldCBvYmpSUz1Ob3RoaW5nDQoNCg0KCVNldCBvYmpSUz1vYmpDb25uLkV4ZWN1dGUoIlNFTEVDVCBbbWVtX0lEXSxbbWVtX05hbWVdLFttZW1fTGV2ZWxdLFttZW1fUGFzc3dvcmRdLFttZW1fRW1haWxdLFttZW1fSG9tZVBhZ2VdLFttZW1fUG9zdExvZ3NdLFttZW1fVXJsXSxbbWVtX1RlbXBsYXRlXSxbbWVtX0Z1bGxVcmxdLFttZW1fSW50cm9dLFttZW1fTWV0YV0gRlJPTSBbYmxvZ19NZW1iZXJdIE9SREVSIEJZIFttZW1fSURdIEFTQyIpDQoJSWYgKE5vdCBvYmpSUy5ib2YpIEFuZCAoTm90IG9ialJTLmVvZikgVGhlbg0KDQoJCWFyeUFsbERhdGE9b2JqUlMuR2V0Um93cyhvYmpSUy5SZWNvcmRDb3VudCkNCgkJb2JqUlMuQ2xvc2UNCgkJU2V0IG9ialJTPU5vdGhpbmcNCg0KCQlrPVVCb3VuZChhcnlBbGxEYXRhLDEpDQoJCWw9VUJvdW5kKGFyeUFsbERhdGEsMikNCgkJRm9yIGk9MCBUbyBsDQoJCQlTZXQgVXNlcnMoYXJ5QWxsRGF0YSgwLGkpKT1OZXcgVFVzZXINCgkJCVVzZXJzKGFyeUFsbERhdGEoMCxpKSkuTG9hZEluZm9CeUFycmF5KEFycmF5KGFyeUFsbERhdGEoMCxpKSxhcnlBbGxEYXRhKDEsaSksYXJ5QWxsRGF0YSgyLGkpLGFyeUFsbERhdGEoMyxpKSxhcnlBbGxEYXRhKDQsaSksYXJ5QWxsRGF0YSg1LGkpLGFyeUFsbERhdGEoNixpKSxhcnlBbGxEYXRhKDcsaSksYXJ5QWxsRGF0YSg4LGkpLGFyeUFsbERhdGEoOSxpKSxhcnlBbGxEYXRhKDEwLGkpLGFyeUFsbERhdGEoMTEsaSkpKQ0KCQlOZXh0DQoNCglFbmQgSWYNCg0KCVNldCBVc2VycygwKT1OZXcgVFVzZXINCg0KCUlzUnVuR2V0VXNlcj1UcnVlDQoNCglHZXR1c2VyPVRydWUNCg0KRW5kIEZ1bmN0aW9uDQonKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqDQoNCg0KDQoNCicqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioNCicg55uu55qE77yaICAgIFRhZ3Por7vlj5YNCicqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioNCkRpbSBJc1J1bkdldFRhZ3MNCklzUnVuR2V0VGFncz1GYWxzZQ0KRnVuY3Rpb24gR2V0VGFncygpDQoNCglJZiBJc1J1bkdldFRhZ3M9VHJ1ZSBUaGVuIEV4aXQgRnVuY3Rpb24NCg0KCURpbSBpLGosayxsDQoNCglEaW0gYXJ5QWxsRGF0YQ0KCURpbSBhcnlTaW5nbGVEYXRhKCkNCg0KCUVyYXNlIFRhZ3MNCglSZURpbSBUYWdzKDApDQoNCglEaW0gb2JqUlMNCg0KCVNldCBvYmpSUz1vYmpDb25uLkV4ZWN1dGUoIlNFTEVDVCBUT1AgMSBbdGFnX0lEXSBGUk9NIFtibG9nX1RhZ10gT1JERVIgQlkgW3RhZ19JRF0gREVTQyIpDQoJSWYgKE5vdCBvYmpSUy5ib2YpIEFuZCAoTm90IG9ialJTLmVvZikgVGhlbg0KCQlpPW9ialJTKCJ0YWdfSUQiKQ0KCQlSZURpbSBUYWdzKGkpDQoJRW5kIElmDQoNCglTZXQgb2JqUlM9b2JqQ29ubi5FeGVjdXRlKCJTRUxFQ1QgW3RhZ19JRF0sW3RhZ19OYW1lXSxbdGFnX0ludHJvXSxbdGFnX09yZGVyXSxbdGFnX0NvdW50XSxbdGFnX1BhcmVudElEXSxbdGFnX1VSTF0sW3RhZ19UZW1wbGF0ZV0sW3RhZ19GdWxsVXJsXSxbdGFnX01ldGFdIEZST00gW2Jsb2dfVGFnXSBPUkRFUiBCWSBbdGFnX0lEXSBBU0MiKQ0KCUlmIChOb3Qgb2JqUlMuYm9mKSBBbmQgKE5vdCBvYmpSUy5lb2YpIFRoZW4NCg0KCQlhcnlBbGxEYXRhPW9ialJTLkdldFJvd3Mob2JqUlMuUmVjb3JkQ291bnQpDQoJCW9ialJTLkNsb3NlDQoJCVNldCBvYmpSUz1Ob3RoaW5nDQoNCgkJaz1VQm91bmQoYXJ5QWxsRGF0YSwxKQ0KCQlsPVVCb3VuZChhcnlBbGxEYXRhLDIpDQoJCUZvciBpPTAgVG8gbA0KCQkJU2V0IFRhZ3MoYXJ5QWxsRGF0YSgwLGkpKT1OZXcgVFRhZw0KCQkJVGFncyhhcnlBbGxEYXRhKDAsaSkpLkxvYWRJbmZvQnlBcnJheShBcnJheShhcnlBbGxEYXRhKDAsaSksYXJ5QWxsRGF0YSgxLGkpLGFyeUFsbERhdGEoMixpKSxhcnlBbGxEYXRhKDMsaSksYXJ5QWxsRGF0YSg0LGkpLGFyeUFsbERhdGEoNSxpKSxhcnlBbGxEYXRhKDYsaSksYXJ5QWxsRGF0YSg3LGkpLGFyeUFsbERhdGEoOCxpKSxhcnlBbGxEYXRhKDksaSkpKQ0KCQlOZXh0DQoNCglFbmQgSWYNCg0KCVNldCBUYWdzKDApPU5ldyBUVGFnDQoNCglJc1J1bkdldFRhZ3M9VHJ1ZQ0KDQoJR2V0VGFncz1UcnVlDQoNCkVuZCBGdW5jdGlvbg0KJyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KDQoNCg0KJyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KJyDnm67nmoTvvJogICAgQ29uZmlnc+ivu+WPlg0KJyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KRGltIElzUnVuQ29uZmlncw0KSXNSdW5Db25maWdzPUZhbHNlDQpGdW5jdGlvbiBHZXRDb25maWdzKCkNCg0KCUlmIElzUnVuQ29uZmlncz1UcnVlIFRoZW4gRXhpdCBGdW5jdGlvbg0KDQoJRGltIG9ialJTDQoJU2V0IG9ialJTPW9iakNvbm4uRXhlY3V0ZSgiU0VMRUNUIFtjb25mX05hbWVdLFtjb25mX1ZhbHVlXSBGUk9NIFtibG9nX0NvbmZpZ10iKQ0KCUlmIChOb3Qgb2JqUlMuYm9mKSBBbmQgKE5vdCBvYmpSUy5lb2YpIFRoZW4NCg0KCQlEbyBXaGlsZSBOb3Qgb2JqUlMuZW9mDQoJCQlDYWxsIENvbmZpZ01ldGFzLlNldFZhbHVlKG9ialJTKDApLG9ialJTKDEpKQ0KCQkJb2JqUlMuTW92ZU5leHQNCgkJTG9vcA0KDQoJRW5kIElmDQoNCglJc1J1bkNvbmZpZ3M9VHJ1ZQ0KDQoJR2V0Q29uZmlncz1UcnVlDQoNCkVuZCBGdW5jdGlvbg0KJyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KDQoNCg0KDQonKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqDQonIOebrueahO+8miAgICBGdW5jdGlvbnPor7vlj5YNCicqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioNCkRpbSBJc1J1bkZ1bmN0aW9ucw0KSXNSdW5GdW5jdGlvbnM9RmFsc2UNCkZ1bmN0aW9uIEdldEZ1bmN0aW9uKCkNCg0KCUlmIElzUnVuRnVuY3Rpb25zPVRydWUgVGhlbiBFeGl0IEZ1bmN0aW9uDQoNCglEaW0gaSxqLGssbA0KDQoJRGltIGFyeUFsbERhdGENCglEaW0gYXJ5U2luZ2xlRGF0YSgpDQoNCglFcmFzZSBGdW5jdGlvbnMNCglSZURpbSBGdW5jdGlvbnMoMCkNCg0KCVNldCBGdW5jdGlvbk1ldGFzPU5ldyBUTWV0YQ0KDQoJRGltIG9ialJTDQoNCglTZXQgb2JqUlM9b2JqQ29ubi5FeGVjdXRlKCJTRUxFQ1QgVE9QIDEgW2ZuX0lEXSBGUk9NIFtibG9nX0Z1bmN0aW9uXSBPUkRFUiBCWSBbZm5fSURdIERFU0MiKQ0KCUlmIChOb3Qgb2JqUlMuYm9mKSBBbmQgKE5vdCBvYmpSUy5lb2YpIFRoZW4NCgkJaT1vYmpSUygiZm5fSUQiKQ0KCQlSZURpbSBGdW5jdGlvbnMoaSkNCglFbmQgSWYNCg0KCVNldCBvYmpSUz1vYmpDb25uLkV4ZWN1dGUoIlNFTEVDVCBbZm5fSURdLFtmbl9OYW1lXSxbZm5fRmlsZU5hbWVdLFtmbl9PcmRlcl0sW2ZuX0NvbnRlbnRdLFtmbl9Jc0hpZGRlbl0sW2ZuX1NpZGViYXJJRF0sW2ZuX0h0bWxJRF0sW2ZuX0Z0eXBlXSxbZm5fTWF4TGldLFtmbl9Tb3VyY2VdLFtmbl9WaWV3VHlwZV0sW2ZuX0lzSGlkZVRpdGxlXSxbZm5fTWV0YV0gRlJPTSBbYmxvZ19GdW5jdGlvbl0gT1JERVIgQlkgW2ZuX0lEXSBBU0MiKQ0KCUlmIChOb3Qgb2JqUlMuYm9mKSBBbmQgKE5vdCBvYmpSUy5lb2YpIFRoZW4NCg0KDQoJCWFyeUFsbERhdGE9b2JqUlMuR2V0Um93cyhvYmpSUy5SZWNvcmRDb3VudCkNCgkJb2JqUlMuQ2xvc2UNCgkJU2V0IG9ialJTPU5vdGhpbmcNCg0KCQlrPVVCb3VuZChhcnlBbGxEYXRhLDEpDQoJCWw9VUJvdW5kKGFyeUFsbERhdGEsMikNCgkJRm9yIGk9MCBUbyBsDQoJCQlTZXQgRnVuY3Rpb25zKGFyeUFsbERhdGEoMCxpKSk9TmV3IFRGdW5jdGlvbg0KCQkJRnVuY3Rpb25zKGFyeUFsbERhdGEoMCxpKSkuTG9hZEluZm9CeUFycmF5KEFycmF5KGFyeUFsbERhdGEoMCxpKSxhcnlBbGxEYXRhKDEsaSksYXJ5QWxsRGF0YSgyLGkpLGFyeUFsbERhdGEoMyxpKSxhcnlBbGxEYXRhKDQsaSksYXJ5QWxsRGF0YSg1LGkpLGFyeUFsbERhdGEoNixpKSxhcnlBbGxEYXRhKDcsaSksYXJ5QWxsRGF0YSg4LGkpLGFyeUFsbERhdGEoOSxpKSxhcnlBbGxEYXRhKDEwLGkpLGFyeUFsbERhdGEoMTEsaSksYXJ5QWxsRGF0YSgxMixpKSxhcnlBbGxEYXRhKDEzLGkpKSkNCgkJCUNhbGwgRnVuY3Rpb25NZXRhcy5TZXRWYWx1ZShhcnlBbGxEYXRhKDIsaSksYXJ5QWxsRGF0YSgwLGkpKQ0KCQlOZXh0DQoNCglFbmQgSWYNCg0KDQoJRGltIGFyeUZpbGVMaXN0DQoNCglhcnlGaWxlTGlzdD1Mb2FkSW5jbHVkZUZpbGVzT25seVR5cGUoInpiX3VzZXJzXElOQ0xVREVcIikNCg0KCUlmIElzQXJyYXkoYXJ5RmlsZUxpc3QpIFRoZW4NCgkJaj1VQm91bmQoYXJ5RmlsZUxpc3QpDQoNCgkJSWYgaj4wIFRoZW4NCgkJCUZvciBpPTEgdG8gag0KCQkJCUlmIFJpZ2h0KGFyeUZpbGVMaXN0KGkpLDQpPSIuYXNwIiBUaGVuDQoJCQkJbD1SZXBsYWNlKGFyeUZpbGVMaXN0KGkpLCIuYXNwIiwiIikNCgkJCQlJZiBGdW5jdGlvbk1ldGFzLkV4aXN0cyhsKSA9RmFsc2UgVGhlbg0KDQoJCQkJCWs9VUJvdW5kKEZ1bmN0aW9ucykrMQ0KDQoJCQkJCVJlRGltIFByZXNlcnZlIEZ1bmN0aW9ucyhrKQ0KDQoJCQkJCVNldCBGdW5jdGlvbnMoayk9TmV3IFRGdW5jdGlvbg0KDQoJCQkJCUZ1bmN0aW9ucyhrKS5JRD1rDQoJCQkJCUZ1bmN0aW9ucyhrKS5GaWxlTmFtZT1sDQoJCQkJCUZ1bmN0aW9ucyhrKS5OYW1lPWwNCgkJCQkJRnVuY3Rpb25zKGspLlNvdXJjZT0ib3RoZXIiDQoJCQkJCUZ1bmN0aW9ucyhrKS5IdG1sSUQ9ImZuIiAmIGwNCgkJCQkJRnVuY3Rpb25zKGspLkNvbnRlbnQ9TG9hZEZyb21GaWxlKEJsb2dQYXRoICYiemJfdXNlcnNcSU5DTFVERVwiJmFyeUZpbGVMaXN0KGkpLCJ1dGYtOCIpDQoJCQkJCUlmIEluc3RyKEZ1bmN0aW9ucyhrKS5Db250ZW50LCI8L2xpPiIpPjAgVGhlbg0KCQkJCQkJRnVuY3Rpb25zKGspLkZUeXBlPSJ1bCINCgkJCQkJRWxzZQ0KCQkJCQkJRnVuY3Rpb25zKGspLkZUeXBlPSJkaXYiDQoJCQkJCUVuZCBJZg0KCQkJCQlDYWxsIEZ1bmN0aW9uTWV0YXMuU2V0VmFsdWUobCxrKQ0KCQkJCUVuZCBJZg0KCQkJCUVuZCBJZg0KCQkJTmV4dA0KCQlFbmQgSWYNCglFbmQgSWYNCg0KCVNldCBGdW5jdGlvbnMoMCk9TmV3IFRGdW5jdGlvbg0KDQoJSXNSdW5GdW5jdGlvbnM9VHJ1ZQ0KDQoJR2V0RnVuY3Rpb249VHJ1ZQ0KDQpFbmQgRnVuY3Rpb24NCicqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioNCg0KDQoNCg0KJyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KJyDnm67nmoTvvJogICAg6K+75Y+W5p2D6ZmQDQonIOWkh+azqDogICAgIOadg+mZkOacgOmrmOS4ujEg5pyA5L2O5Li6NSDkuI3mmK/liJnpnZ7ms5UNCicgICAgICAgICAgICJSb290IuS4gOWumuWPquiDveS4ujENCicgICAgICAgICAgIOadg+mZkOmFjee9ruaWueW8j+WPr+S7peWPmOmAmg0KJyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KRnVuY3Rpb24gR2V0UmlnaHRzKHN0ckFjdGlvbikNCg0KCSdwbHVnaW4gbm9kZQ0KCWJBY3Rpb25fUGx1Z2luX0dldFJpZ2h0c19CZWdpbj1GYWxzZQ0KCUZvciBFYWNoIHNBY3Rpb25fUGx1Z2luX0dldFJpZ2h0c19CZWdpbiBpbiBBY3Rpb25fUGx1Z2luX0dldFJpZ2h0c19CZWdpbg0KCQlJZiBOb3QgSXNFbXB0eShzQWN0aW9uX1BsdWdpbl9HZXRSaWdodHNfQmVnaW4pIFRoZW4gQ2FsbCBFeGVjdXRlKHNBY3Rpb25fUGx1Z2luX0dldFJpZ2h0c19CZWdpbikNCgkJSWYgYkFjdGlvbl9QbHVnaW5fR2V0UmlnaHRzX0JlZ2luPVRydWUgVGhlbiBFeGl0IEZ1bmN0aW9uDQoJTmV4dA0KDQoJU2VsZWN0IENhc2Ugc3RyQWN0aW9uDQoNCgkJQ2FzZSAiUm9vdCINCgkJCUdldFJpZ2h0cz0xDQoJCUNhc2UgImxvZ2luIg0KCQkJR2V0UmlnaHRzPTUNCgkJQ2FzZSAidmVyaWZ5Ig0KCQkJR2V0UmlnaHRzPTUNCgkJQ2FzZSAibG9nb3V0Ig0KCQkJR2V0UmlnaHRzPTUNCgkJQ2FzZSAiYWRtaW4iDQoJCQlHZXRSaWdodHM9NA0KCQlDYXNlICJjbXQiDQoJCQlHZXRSaWdodHM9NQ0KCQknQ2FzZSAidGIiDQoJCScJR2V0UmlnaHRzPTUNCgkJQ2FzZSAidnJzIg0KCQkJR2V0UmlnaHRzPTUNCgkJQ2FzZSAicnNzIg0KCQkJR2V0UmlnaHRzPTUNCgkJQ2FzZSAiYmF0Y2giDQoJCQlHZXRSaWdodHM9NA0KCQknQ2FzZSAiZ2V0dGJ1cmwiDQoJCScJR2V0UmlnaHRzPTUNCgkJQ2FzZSAiQXJ0aWNsZUFsbCINCgkJCUdldFJpZ2h0cz0yDQoJCUNhc2UgIkFydGljbGVNbmciDQoJCQlHZXRSaWdodHM9Mw0KCQlDYXNlICJBcnRpY2xlRWR0Ig0KCQkJR2V0UmlnaHRzPTMNCgkJQ2FzZSAiQXJ0aWNsZVBzdCINCgkJCUdldFJpZ2h0cz0zDQoJCUNhc2UgIkFydGljbGVEZWwiDQoJCQlHZXRSaWdodHM9Mw0KCQlDYXNlICJBcnRpY2xlQnVkIg0KCQkJR2V0UmlnaHRzPTMNCgkJQ2FzZSAiQ2F0ZWdvcnlNbmciDQoJCQlHZXRSaWdodHM9Mg0KCQlDYXNlICJDYXRlZ29yeUVkdCINCgkJCUdldFJpZ2h0cz0yDQoJCUNhc2UgIkNhdGVnb3J5UHN0Ig0KCQkJR2V0UmlnaHRzPTINCgkJQ2FzZSAiQ2F0ZWdvcnlEZWwiDQoJCQlHZXRSaWdodHM9Mg0KCQlDYXNlICJUYWdNbmciDQoJCQlHZXRSaWdodHM9MQ0KCQlDYXNlICJUYWdFZHQiDQoJCQlHZXRSaWdodHM9MQ0KCQlDYXNlICJUYWdQc3QiDQoJCQlHZXRSaWdodHM9MQ0KCQlDYXNlICJUYWdEZWwiDQoJCQlHZXRSaWdodHM9MQ0KCQknQ2FzZSAiS2V5V29yZE1uZyINCgkJJwlHZXRSaWdodHM9MQ0KCQknQ2FzZSAiS2V5V29yZEVkdCINCgkJJwlHZXRSaWdodHM9MQ0KCQknQ2FzZSAiS2V5V29yZFBzdCINCgkJJwlHZXRSaWdodHM9MQ0KCQknQ2FzZSAiS2V5V29yZERlbCINCgkJJwlHZXRSaWdodHM9MQ0KCQknQ2FzZSAiR3Vlc3RCb29rTW5nIg0KCQknCUdldFJpZ2h0cz0yDQoJCUNhc2UgIkNvbW1lbnRBbGwiDQoJCQlHZXRSaWdodHM9Mg0KCQlDYXNlICJDb21tZW50TW5nIg0KCQkJR2V0UmlnaHRzPTQNCgkJQ2FzZSAiQ29tbWVudERlbCINCgkJCUdldFJpZ2h0cz00DQoJCUNhc2UgIkNvbW1lbnRFZHQiDQoJCQlHZXRSaWdodHM9NA0KCQlDYXNlICJDb21tZW50U2F2Ig0KCQkJR2V0UmlnaHRzPTQNCgkJQ2FzZSAiQ29tbWVudEdldCINCgkJCUdldFJpZ2h0cz01DQoJCUNhc2UgIkNvbW1lbnRBdWRpdCINCgkJCUdldFJpZ2h0cz0xDQoJCUNhc2UgIkNvbW1lbnREZWxCYXRjaCINCgkJCUdldFJpZ2h0cz00DQoJCSdDYXNlICJUcmFja0JhY2tNbmciDQoJCScJR2V0UmlnaHRzPTMNCgkJJ0Nhc2UgIlRyYWNrQmFja0RlbCINCgkJJwlHZXRSaWdodHM9Mw0KCQknQ2FzZSAiVHJhY2tCYWNrRGVsQmF0Y2giDQoJCScJR2V0UmlnaHRzPTMNCgkJJ0Nhc2UgIlRyYWNrQmFja1NuZCINCgkJJwlHZXRSaWdodHM9MA0KCQlDYXNlICJVc2VyTW5nIg0KCQkJR2V0UmlnaHRzPTQNCgkJQ2FzZSAiVXNlckVkdCINCgkJCUdldFJpZ2h0cz00DQoJCUNhc2UgIlVzZXJNb2QiDQoJCQlHZXRSaWdodHM9NA0KCQlDYXNlICJVc2VyRGVsIg0KCQkJR2V0UmlnaHRzPTENCgkJQ2FzZSAiVXNlckNydCINCgkJCUdldFJpZ2h0cz0xDQoJCUNhc2UgIkJsb2dSZUJ1aWxkIg0KCQkJR2V0UmlnaHRzPTMNCgkJQ2FzZSAiRGlyZWN0b3J5UmVCdWlsZCINCgkJCUdldFJpZ2h0cz0zDQoJCUNhc2UgIkZpbGVSZUJ1aWxkIg0KCQkJR2V0UmlnaHRzPTENCgkJQ2FzZSAiQXNrRmlsZVJlQnVpbGQiDQoJCQlHZXRSaWdodHM9MQ0KCQlDYXNlICJGaWxlQWxsIg0KCQkJR2V0UmlnaHRzPTINCgkJQ2FzZSAiRmlsZU1uZyINCgkJCUdldFJpZ2h0cz0yDQoJCUNhc2UgIkZpbGVTbmQiDQoJCQlHZXRSaWdodHM9Mg0KCQlDYXNlICJGaWxlVXBsb2FkIg0KCQkJR2V0UmlnaHRzPTINCgkJQ2FzZSAiRmlsZURlbCINCgkJCUdldFJpZ2h0cz0yDQoJCUNhc2UgIkZpbGVEZWxCYXRjaCINCgkJCUdldFJpZ2h0cz0yDQoJCUNhc2UgIlNlYXJjaCINCgkJCUdldFJpZ2h0cz01DQoJCSdDYXNlICJCbG9nTW5nIg0KCQknCUdldFJpZ2h0cz00DQoJCUNhc2UgIlNldHRpbmdNbmciDQoJCQlHZXRSaWdodHM9MQ0KCQlDYXNlICJTZXR0aW5nU2F2Ig0KCQkJR2V0UmlnaHRzPTENCgkJQ2FzZSAiUGx1Z0luTW5nIg0KCQkJR2V0UmlnaHRzPTINCgkJQ2FzZSAiU2l0ZUluZm8iDQoJCQlHZXRSaWdodHM9NA0KCQknQ2FzZSAiVXBkYXRlIg0KCQknCUdldFJpZ2h0cz0xDQoJCUNhc2UgIlRoZW1lTW5nIg0KCQkJR2V0UmlnaHRzPTENCgkJQ2FzZSAiVGhlbWVTYXYiDQoJCQlHZXRSaWdodHM9MQ0KCQknQ2FzZSAiTGlua01uZyINCgkJJwlHZXRSaWdodHM9MQ0KCQknQ2FzZSAiTGlua1NhdiINCgkJJwlHZXRSaWdodHM9MQ0KCQlDYXNlICJQbHVnSW5BY3RpdmUiDQoJCQlHZXRSaWdodHM9MQ0KCQlDYXNlICJQbHVnSW5EaXNhYmxlIg0KCQkJR2V0UmlnaHRzPTENCgkJQ2FzZSAiRnVuY3Rpb25NbmciDQoJCQlHZXRSaWdodHM9MQ0KCQlDYXNlICJGdW5jdGlvbkVkdCINCgkJCUdldFJpZ2h0cz0xDQoJCUNhc2UgIkZ1bmN0aW9uU2F2Ig0KCQkJR2V0UmlnaHRzPTENCgkJQ2FzZSAiRnVuY3Rpb25EZWwiDQoJCQlHZXRSaWdodHM9MQ0KCQlDYXNlIEVsc2UNCgkJCUdldFJpZ2h0cz1OdWxsDQoJRW5kIFNlbGVjdA0KDQpFbmQgRnVuY3Rpb24NCicqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioNCg0KDQoNCg0KJyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KJyDnm67nmoTvvJogICAg5qOA5p+l5p2D6ZmQDQonKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqDQpGdW5jdGlvbiBDaGVja1JpZ2h0cyhzdHJBY3Rpb24pDQoNCgkncGx1Z2luIG5vZGUNCgliQWN0aW9uX1BsdWdpbl9DaGVja1JpZ2h0c19CZWdpbj1GYWxzZQ0KCUZvciBFYWNoIHNBY3Rpb25fUGx1Z2luX0NoZWNrUmlnaHRzX0JlZ2luIGluIEFjdGlvbl9QbHVnaW5fQ2hlY2tSaWdodHNfQmVnaW4NCgkJSWYgTm90IElzRW1wdHkoc0FjdGlvbl9QbHVnaW5fQ2hlY2tSaWdodHNfQmVnaW4pIFRoZW4gQ2FsbCBFeGVjdXRlKHNBY3Rpb25fUGx1Z2luX0NoZWNrUmlnaHRzX0JlZ2luKQ0KCQlJZiBiQWN0aW9uX1BsdWdpbl9DaGVja1JpZ2h0c19CZWdpbj1UcnVlIFRoZW4gRXhpdCBGdW5jdGlvbg0KCU5leHQNCg0KCUlmIEJsb2dVc2VyLkxldmVsPkdldFJpZ2h0cyhzdHJBY3Rpb24pIFRoZW4NCgkJQ2hlY2tSaWdodHM9RmFsc2UNCglFbHNlDQoJCUNoZWNrUmlnaHRzPVRydWUNCglFbmQgSWYNCg0KRW5kIEZ1bmN0aW9uDQonKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqDQoNCg0KDQoNCicqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioNCicg55uu55qE77yaICAgIOajgOafpeS9nOiAheaYr+WQpuWtmOWcqA0KJyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KRnVuY3Rpb24gQ2hlY2tBdXRob3JCeUlEKGludEF1dGhvcklkKQ0KDQoJQ2hlY2tBdXRob3JCeUlEPU5vdCBvYmpDb25uLkV4ZWN1dGUoIlNFTEVDVCBbbWVtX0lEXSBGUk9NIFtibG9nX01lbWJlcl0gV0hFUkUgW21lbV9JRF09IiAmIENMbmcoaW50QXV0aG9ySWQpICkuQk9GDQoNCkVuZCBGdW5jdGlvbg0KDQpGdW5jdGlvbiBHZXRBdXRob3JCeU5hbWUoc3RyTmFtZSkNCglEaW0gb2JqUlMNCglTZXQgb2JqUlM9b2JqQ29ubi5FeGVjdXRlKCJTRUxFQ1QgW21lbV9JRF0gRlJPTSBbYmxvZ19NZW1iZXJdIFdIRVJFIFttZW1fTmFtZV09JyImRmlsdGVyU1FMKHN0ck5hbWUpJiInIiApDQoJSWYgKE5vdCBvYmpSUy5ib2YpIEFuZCAoTm90IG9ialJTLmVvZikgVGhlbg0KCQlHZXRBdXRob3JCeU5hbWU9b2JqUlMoMCkNCglFbHNlDQoJCUdldEF1dGhvckJ5TmFtZT0wDQoJRW5kIElmDQpFbmQgRnVuY3Rpb24NCg0KRnVuY3Rpb24gR2V0QXV0aG9yQnlBbGlhcyhzdHJBbGlhcykNCglEaW0gb2JqUlMNCglTZXQgb2JqUlM9b2JqQ29ubi5FeGVjdXRlKCJTRUxFQ1QgW21lbV9JRF0gRlJPTSBbYmxvZ19NZW1iZXJdIFdIRVJFIFttZW1fVXJsXT0nIiZGaWx0ZXJTUUwoc3RyQWxpYXMpJiInIiApDQoJSWYgKE5vdCBvYmpSUy5ib2YpIEFuZCAoTm90IG9ialJTLmVvZikgVGhlbg0KCQlHZXRBdXRob3JCeUFsaWFzPW9ialJTKDApDQoJRWxzZQ0KCQlHZXRBdXRob3JCeUFsaWFzPTANCglFbmQgSWYNCkVuZCBGdW5jdGlvbg0KJyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KDQoNCg0KDQonKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqDQonIOebrueahO+8miAgICDmo4Dmn6XliIbnsbvmmK/lkKblrZjlnKgNCicqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioNCkZ1bmN0aW9uIENoZWNrQ2F0ZUJ5SUQoaW50Q2F0ZUlkKQ0KDQoJSWYgQ0xuZyhpbnRDYXRlSWQpPTAgVGhlbiBDaGVja0NhdGVCeUlEPVRydWU6RXhpdCBGdW5jdGlvbg0KDQoJQ2hlY2tDYXRlQnlJRD1Ob3Qgb2JqQ29ubi5FeGVjdXRlKCJTRUxFQ1QgW2NhdGVfSURdIEZST00gW2Jsb2dfQ2F0ZWdvcnldIFdIRVJFIFtjYXRlX0lEXT0iICYgQ0xuZyhpbnRDYXRlSWQpICkuQk9GDQoNCkVuZCBGdW5jdGlvbg0KJyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KJyDnm67nmoTvvJogICAg5qC55o2u5YiG57G75ZCN5b6X5Yiw5YiG57G7SUQNCicqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioNCkZ1bmN0aW9uIEdldENhdGVCeU5hbWUoc3RyTmFtZSkNCg0KCUlmIHN0ck5hbWU9QmxvZ0NvbmZpZy5SZWFkKCJaQ19VTkNBVEVHT1JJWkVEX05BTUUiKSBUaGVuDQoJCUdldENhdGVCeU5hbWU9MA0KCQlFeGl0IEZ1bmN0aW9uDQoJRW5kIElmDQoJRGltIG9ialJTDQoJU2V0IG9ialJTPW9iakNvbm4uRXhlY3V0ZSgiU0VMRUNUIFtjYXRlX0lEXSBGUk9NIFtibG9nX0NhdGVnb3J5XSBXSEVSRSBbY2F0ZV9OYW1lXT0nIiZGaWx0ZXJTUUwoc3RyTmFtZSkmIiciICkNCglJZiAoTm90IG9ialJTLmJvZikgQW5kIChOb3Qgb2JqUlMuZW9mKSBUaGVuDQoJCUdldENhdGVCeU5hbWU9b2JqUlMoMCkNCglFbHNlDQoJCUdldENhdGVCeU5hbWU9LTENCglFbmQgSWYNCkVuZCBGdW5jdGlvbg0KDQonKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqDQonIOebrueahO+8miAgICDmoLnmja7liIbnsbvliKvlkI3lvpfliLDliIbnsbtJRA0KJyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KRnVuY3Rpb24gR2V0Q2F0ZUJ5QWxpYXMoc3RyQWxpYXMpDQoNCglJZiBzdHJBbGlhcz1CbG9nQ29uZmlnLlJlYWQoIlpDX1VOQ0FURUdPUklaRURfQUxJQVMiKSBUaGVuDQoJCUdldENhdGVCeUFsaWFzPTANCgkJRXhpdCBGdW5jdGlvbg0KCUVuZCBJZg0KCURpbSBvYmpSUw0KCVNldCBvYmpSUz1vYmpDb25uLkV4ZWN1dGUoIlNFTEVDVCBbY2F0ZV9JRF0gRlJPTSBbYmxvZ19DYXRlZ29yeV0gV0hFUkUgW2NhdGVfVXJsXT0nIiZGaWx0ZXJTUUwoc3RyQWxpYXMpJiInIiApDQoJSWYgKE5vdCBvYmpSUy5ib2YpIEFuZCAoTm90IG9ialJTLmVvZikgVGhlbg0KCQlHZXRDYXRlQnlBbGlhcz1vYmpSUygwKQ0KCUVsc2UNCgkJR2V0Q2F0ZUJ5QWxpYXM9LTENCglFbmQgSWYNCkVuZCBGdW5jdGlvbg0KJyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KDQoNCg0KDQonKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqDQonIOebrueahO+8miAgICDmo4Dmn6VUQUfmmK/lkKblrZjlnKgNCicqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioNCkZ1bmN0aW9uIENoZWNrVGFnQnlJRChpbnRUYWdJRCkNCg0KCUlmIGludFRhZ0lEPSIiIFRoZW4gaW50VGFnSUQ9MA0KCUNoZWNrVGFnQnlJRD1Ob3Qgb2JqQ29ubi5FeGVjdXRlKCJTRUxFQ1QgW3RhZ19JRF0gRlJPTSBbYmxvZ19UYWddIFdIRVJFIFt0YWdfSURdPSIgJiBpbnRUYWdJRCApLkJPRg0KDQpFbmQgRnVuY3Rpb24NCg0KJyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KJyDnm67nmoTvvJogICAg5qOA5p+lVEFH5piv5ZCm5a2Y5ZyoDQonKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqDQpGdW5jdGlvbiBDaGVja1RhZ0J5TmFtZShzdHJOYW1lKQ0KDQoJQ2hlY2tUYWdCeU5hbWU9Tm90IG9iakNvbm4uRXhlY3V0ZSgiU0VMRUNUIFt0YWdfSURdIEZST00gW2Jsb2dfVGFnXSBXSEVSRSBbdGFnX05hbWVdPSciICYgRmlsdGVyU1FMKHN0ck5hbWUpICYiJyIgKS5CT0YNCg0KRW5kIEZ1bmN0aW9uDQoNCicqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioNCicg55uu55qE77yaICAgIOajgOafpVRBR+aYr+WQpuWtmOWcqA0KJyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KRnVuY3Rpb24gQ2hlY2tUYWdCeUludHJvKHN0ck5hbWUpDQoNCglEaW0gc3RyU1FMDQoJSWYgWkNfTVNTUUxfRU5BQkxFIFRoZW4NCgkJc3RyU1FMPSJTRUxFQ1QgW3RhZ19JRF0gRlJPTSBbYmxvZ19UYWddIFdIRVJFIENPTlZFUlQoTlZBUkNIQVIoMjU1KSxbdGFnX0ludHJvXSk9JyIgJiBGaWx0ZXJTUUwoc3RyTmFtZSkgJiInIg0KCUVsc2UNCgkJc3RyU1FMPSJTRUxFQ1QgW3RhZ19JRF0gRlJPTSBbYmxvZ19UYWddIFdIRVJFIFt0YWdfSW50cm9dPSciICYgRmlsdGVyU1FMKHN0ck5hbWUpICYiJyINCglFbmQgSWYNCglDaGVja1RhZ0J5SW50cm89Tm90IG9iakNvbm4uRXhlY3V0ZShzdHJTUUwpLkJPRg0KDQpFbmQgRnVuY3Rpb24NCg0KJyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KJyDnm67nmoTvvJogICDmoLnmja5UQUfliKvlkI3lvpfliLBUQUcgSUQNCicqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioNCkZ1bmN0aW9uIEdldFRhZ0J5SW50cm8oc3RyTmFtZSkNCglEaW0gb2JqUlMsc3RyU1FMDQoJSWYgWkNfTVNTUUxfRU5BQkxFIFRoZW4NCgkJc3RyU1FMPSJTRUxFQ1QgW3RhZ19JRF0gRlJPTSBbYmxvZ19UYWddIFdIRVJFIENPTlZFUlQoTlZBUkNIQVIoMjU1KSxbdGFnX0ludHJvXSk9JyIgJiBGaWx0ZXJTUUwoc3RyTmFtZSkgJiInIg0KCUVsc2UNCgkJc3RyU1FMPSJTRUxFQ1QgW3RhZ19JRF0gRlJPTSBbYmxvZ19UYWddIFdIRVJFIFt0YWdfSW50cm9dPSciICYgRmlsdGVyU1FMKHN0ck5hbWUpICYiJyINCglFbmQgSWYNCglTZXQgb2JqUlM9b2JqQ29ubi5FeGVjdXRlKHN0clNRTCkNCglJZiAoTm90IG9ialJTLmJvZikgQW5kIChOb3Qgb2JqUlMuZW9mKSBUaGVuDQoJCUdldFRhZ0J5SW50cm89b2JqUlMoMCkNCglFbHNlDQoJCUdldFRhZ0J5SW50cm89MA0KCUVuZCBJZg0KRW5kIEZ1bmN0aW9uDQonKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqDQoNCicqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioNCicg55uu55qE77yaICAg5qC55o2uVEFH5ZCN5b6X5YiwVEFHIElEDQonKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqDQpGdW5jdGlvbiBHZXRUYWdCeU5hbWUoc3RyTmFtZSkNCglEaW0gb2JqUlMNCglTZXQgb2JqUlM9b2JqQ29ubi5FeGVjdXRlKCJTRUxFQ1QgW3RhZ19JRF0gRlJPTSBbYmxvZ19UYWddIFdIRVJFIFt0YWdfTmFtZV09JyImRmlsdGVyU1FMKHN0ck5hbWUpJiInIiApDQoJSWYgKE5vdCBvYmpSUy5ib2YpIEFuZCAoTm90IG9ialJTLmVvZikgVGhlbg0KCQlHZXRUYWdCeU5hbWU9b2JqUlMoMCkNCglFbHNlDQoJCUdldFRhZ0J5TmFtZT0wDQoJRW5kIElmDQpFbmQgRnVuY3Rpb24NCicqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioNCg0KDQoNCg0KJyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KJyDnm67nmoTvvJogICAgR2V0IENhdGVnb3J5IE9yZGVyIOi+k+WHuuaVsOe7hC4NCicqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioNCkZ1bmN0aW9uIEdldENhdGVnb3J5T3JkZXIoKQ0KDQoJRGltIGkNCglEaW0gb2JqUlMNCg0KCVNldCBvYmpSUz1TZXJ2ZXIuQ3JlYXRlT2JqZWN0KCJBRE9EQi5SZWNvcmRzZXQiKQ0KCW9ialJTLkN1cnNvclR5cGUgPSBhZE9wZW5LZXlzZXQNCglvYmpSUy5Mb2NrVHlwZSA9IGFkTG9ja1JlYWRPbmx5DQoJb2JqUlMuQWN0aXZlQ29ubmVjdGlvbj1vYmpDb25uDQoJb2JqUlMuU291cmNlPSIiDQoNCglEaW0gYXJ5Q2F0ZUluT3JkZXIoKQ0KCWk9MA0KCVJlRGltIFByZXNlcnZlIGFyeUNhdGVJbk9yZGVyKDApDQoJYXJ5Q2F0ZUluT3JkZXIoMCk9MA0KDQoJb2JqUlMuT3BlbigiU0VMRUNUIFtjYXRlX2lkXSBGUk9NIFtibG9nX0NhdGVnb3J5XSBPUkRFUiBCWSBbY2F0ZV9PcmRlcl0gQVNDLFtjYXRlX0lEXSBBU0MiKQ0KCURvIFdoaWxlIE5vdCBvYmpSUy5lb2YNCgkJaT1pKzENCgkJUmVEaW0gUHJlc2VydmUgYXJ5Q2F0ZUluT3JkZXIoaSkNCgkJYXJ5Q2F0ZUluT3JkZXIoaSk9b2JqUlMoImNhdGVfSUQiKQ0KCQlvYmpSUy5Nb3ZlTmV4dA0KCUxvb3ANCglvYmpSUy5DbG9zZQ0KCVNldCBvYmpSUz1Ob3RoaW5nDQoNCglHZXRDYXRlZ29yeU9yZGVyPWFyeUNhdGVJbk9yZGVyDQoNCkVuZCBGdW5jdGlvbg0KJyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KDQoNCg0KDQonKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqDQonIOebrueahO+8miAgICDlj5blvpfmiYDmnInlrZDliIbnsbvnmoRJRCDovpPlh7rmlbDnu4QuDQonKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqDQpGdW5jdGlvbiBHZXRTdWJDYXRlSUQoaW50Q2F0ZUlkLGJvbEluY2x1ZGVQYXJlKQ0KDQoJRGltIGkNCglEaW0gQ2F0ZWdvcnkNCglEaW0gYXJ5U3ViQ2F0ZUlEKCkNCglpPTANCg0KCUlmIGJvbEluY2x1ZGVQYXJlPVRydWUgVGhlbg0KCQlSZURpbSBQcmVzZXJ2ZSBhcnlTdWJDYXRlSUQoaSkNCgkJYXJ5U3ViQ2F0ZUlEKGkpPWludENhdGVJZA0KCQlpPWkrMQ0KCUVuZCBJZg0KDQoJRm9yIEVhY2ggQ2F0ZWdvcnkgSW4gQ2F0ZWdvcnlzDQoJCUlmIElzT2JqZWN0KENhdGVnb3J5KSBUaGVuDQoJCQlJZiBDYXRlZ29yeS5QYXJlbnRJRD1pbnRDYXRlSWQgVGhlbg0KCQkJCVJlRGltIFByZXNlcnZlIGFyeVN1YkNhdGVJRChpKQ0KCQkJCWFyeVN1YkNhdGVJRChpKT1DYXRlZ29yeS5JRA0KCQkJCWk9aSsxDQoJCQlFbmQgSWYNCgkJRW5kIElmDQoJTmV4dA0KDQoJSWYgaT4wIFRoZW4gR2V0U3ViQ2F0ZUlEPWFyeVN1YkNhdGVJRA0KDQoJRXJhc2UgYXJ5U3ViQ2F0ZUlEDQoNCkVuZCBGdW5jdGlvbg0KJyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KDQoNCg0KDQonKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqDQpGdW5jdGlvbiBNYWtlQ2FsZW5kYXIoZHRtWWVhck1vbnRoKQ0KDQoJRGltIHN0ckNhbGVuZGFyDQoNCglEaW0geQ0KCURpbSBtDQoJRGltIGQNCglEaW0gZmlydw0KCURpbSBsYXN3DQoJRGltIG55DQoJRGltIG5tDQoJRGltIHB5DQoJRGltIHBtDQoNCglEaW0gaQ0KCURpbSBqDQoJRGltIGsNCglEaW0gYg0KCURpbSBzDQoJRGltIHQNCg0KCUNhbGwgQ2hlY2tQYXJhbWV0ZXIoZHRtWWVhck1vbnRoLCJkdG0iLERhdGUoKSkNCg0KCXk9eWVhcihkdG1ZZWFyTW9udGgpDQoJbT1tb250aChkdG1ZZWFyTW9udGgpDQoJbnk9eQ0KCW5tPW0rMQ0KCUlmIG09MTIgVGhlbiBueT1ueSsxOm5tPTENCglweT15DQoJcG09bS0xDQoJaWYgbT0xIHRoZW4gcHk9cHktMTpwbT0xMg0KDQoJZmlydz1XZWVrZGF5KENkYXRlKHkmIi0iJm0mIi0xIikpDQoNCglGb3IgaT0yOCB0byAzMg0KCQlJZiBJc0RhdGUoeSYiLSImbSYiLSImaSkgVGhlbg0KCQkJbGFzdz1XZWVrZGF5KENkYXRlKHkmIi0iJm0mIi0iJmkpKQ0KCQlFbHNlDQoJCQlFeGl0IEZvcg0KCQlFbmQgSWYNCglOZXh0DQoNCglkPWktMQ0KCWs9MQ0KDQoJSWYgZmlydz41IFRoZW4gYj00MiBFbHNlIGI9MzUNCglJZiAoZD0yOCkgQW5kIChmaXJ3PTEpIFRoZW4gYj0yOA0KCUlmIChmaXJ3PjUpIEFuZCAoZDwzMSkgQW5kIChkLWZpcnc8PjIzKSBUaGVuIGI9MzUNCg0KDQoJJy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8NCgknCemAu+i+keWkhOeQhg0KCQlEaW0gYXJ5RGF0ZUxpbmsoMzIpDQoJCURpbSBhcnlEYXRlSUQoMzIpDQoJCURpbSBhcnlEYXRlQXJ0aWNsZSgzMikNCgkJRGltIG9ialJTDQoNCgkJU2V0IG9ialJTPVNlcnZlci5DcmVhdGVPYmplY3QoIkFET0RCLlJlY29yZHNldCIpDQoJCW9ialJTLkN1cnNvclR5cGUgPSBhZE9wZW5LZXlzZXQNCgkJb2JqUlMuTG9ja1R5cGUgPSBhZExvY2tSZWFkT25seQ0KCQlvYmpSUy5BY3RpdmVDb25uZWN0aW9uPW9iakNvbm4NCgkJb2JqUlMuU291cmNlPSIiDQoJCW9ialJTLk9wZW4oInNlbGVjdCBbbG9nX0lEXSxbbG9nX1RhZ10sW2xvZ19DYXRlSURdLFtsb2dfVGl0bGVdLFtsb2dfSW50cm9dLFtsb2dfQ29udGVudF0sW2xvZ19MZXZlbF0sW2xvZ19BdXRob3JJRF0sW2xvZ19Qb3N0VGltZV0sW2xvZ19Db21tTnVtc10sW2xvZ19WaWV3TnVtc10sW2xvZ19UcmFja0JhY2tOdW1zXSxbbG9nX1VybF0sW2xvZ19Jc3RvcF0sW2xvZ19UZW1wbGF0ZV0sW2xvZ19GdWxsVXJsXSxbbG9nX1R5cGVdLFtsb2dfTWV0YV0gZnJvbSBbYmxvZ19BcnRpY2xlXSB3aGVyZSAoW2xvZ19UeXBlXT0wKSBBbmQgKFtsb2dfTGV2ZWxdPjIpIEFuZCAoW2xvZ19Qb3N0VGltZV0gQkVUV0VFTiAiJiBaQ19TUUxfUE9VTkRfS0VZICZ5JiItIiZtJiItMSImIFpDX1NRTF9QT1VORF9LRVkgJiIgQU5EICImIFpDX1NRTF9QT1VORF9LRVkgJm55JiItIiZubSYiLTEiJiBaQ19TUUxfUE9VTkRfS0VZICYiKSBBTkQgbG9nX0lEIGluKFNFTEVDVCBtYXgobG9nX0lEKSBmcm9tIFtibG9nX0FydGljbGVdIGdyb3VwIGJ5IE1vbnRoKGxvZ19wb3N0dGltZSksRGF5KGxvZ19wb3N0dGltZSkpIikNCg0KCQlJZiAoTm90IG9ialJTLmJvZikgQW5kIChOb3Qgb2JqUlMuZW9mKSBUaGVuDQoJCQlGb3IgaT0xIFRvIG9ialJTLlJlY29yZENvdW50DQoJCQkJaj1DTG5nKERheShDRGF0ZShvYmpSUygibG9nX1Bvc3RUaW1lIikpKSkNCgkJCQlhcnlEYXRlTGluayhqKT1UcnVlDQoJCQkJYXJ5RGF0ZUlEKGopPW9ialJTKCJsb2dfSUQiKQ0KCQkJCVNldCBhcnlEYXRlQXJ0aWNsZShqKT1OZXcgVEFydGljbGUNCgkJCQlhcnlEYXRlQXJ0aWNsZShqKS5Mb2FkSW5mb2J5QXJyYXkgQXJyYXkob2JqUlMoMCksb2JqUlMoMSksb2JqUlMoMiksb2JqUlMoMyksb2JqUlMoNCksb2JqUlMoNSksb2JqUlMoNiksb2JqUlMoNyksb2JqUlMoOCksb2JqUlMoOSksb2JqUlMoMTApLG9ialJTKDExKSxvYmpSUygxMiksb2JqUlMoMTMpLG9ialJTKDE0KSxvYmpSUygxNSksb2JqUlMoMTYpLG9ialJTKDE3KSkNCgkJCQlvYmpSUy5Nb3ZlTmV4dA0KCQkJCUlmIG9ialJTLmVvZiBUaGVuIEV4aXQgRm9yDQoJCQlOZXh0DQoJCUVuZCBJZg0KCQlvYmpSUy5DbG9zZQ0KCQlTZXQgb2JqUlM9Tm90aGluZw0KCScvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vDQoNCglzPVVybGJ5RGF0ZUF1dG8oeSxtLTEsIiIpDQoJdD1VcmxieURhdGVBdXRvKHksbSsxLCIiKQ0KCUlmIG09MSBUaGVuIHM9VXJsYnlEYXRlQXV0byh5LTEsMTIsIiIpDQoJSWYgbT0xMiBUaGVuIHQ9VXJsYnlEYXRlQXV0byh5KzEsMSwiIikNCg0KCQlzdHJDYWxlbmRhcj0iPHRhYmxlIGlkPSIidGJDYWxlbmRhciIiPjxjYXB0aW9uPjxhIGhyZWY9IiIiJnMmIiIiPiYjMDAxNzE7PC9hPiAgPGEgaHJlZj0iIiImVXJsYnlEYXRlQXV0byh5LG0sIiIpJiIiIj4iJlJlcGxhY2UoWkNfTVNHMjMzLCIleSIseSkmICIgIiAmIFpWQV9Nb250aF9BYmJyKG0pJiI8L2E+ICA8YSBocmVmPSIiIiZ0JiIiIj4mIzAwMTg3OzwvYT48L2NhcHRpb24+Ig0KCQkNCgkndGhlYWQJDQoJCXN0ckNhbGVuZGFyPXN0ckNhbGVuZGFyICYgIgk8dGhlYWQ+CTx0cj4gPHRoIHRpdGxlPSIiIiZaVkFfV2VlaygxKSYiIiIgc2NvcGU9IiJjb2wiIiBhYmJyPSIiIiZaVkFfV2VlaygxKSYiIiI+PHNtYWxsPiImWlZBX1dlZWtfQWJicigxKSYiPC9zbWFsbD48L3RoPiA8dGggdGl0bGU9IiIiJlpWQV9XZWVrKDIpJiIiIiBzY29wZT0iImNvbCIiIGFiYnI9IiIiJlpWQV9XZWVrKDIpJiIiIj48c21hbGw+IiZaVkFfV2Vla19BYmJyKDIpJiI8L3NtYWxsPjwvdGg+IDx0aCB0aXRsZT0iIiImWlZBX1dlZWsoMykmIiIiIHNjb3BlPSIiY29sIiIgYWJicj0iIiImWlZBX1dlZWsoMykmIiIiPjxzbWFsbD4iJlpWQV9XZWVrX0FiYnIoMykmIjwvc21hbGw+PC90aD4JPHRoIHRpdGxlPSIiIiZaVkFfV2Vlayg0KSYiIiIgc2NvcGU9IiJjb2wiIiBhYmJyPSIiIiZaVkFfV2Vlayg0KSYiIiI+PHNtYWxsPiImWlZBX1dlZWtfQWJicig0KSYiPC9zbWFsbD48L3RoPiA8dGggdGl0bGU9IiIiJlpWQV9XZWVrKDUpJiIiIiBzY29wZT0iImNvbCIiIGFiYnI9IiIiJlpWQV9XZWVrKDUpJiIiIj48c21hbGw+IiZaVkFfV2Vla19BYmJyKDUpJiI8L3NtYWxsPjwvdGg+CTx0aCB0aXRsZT0iIiImWlZBX1dlZWsoNikmIiIiIHNjb3BlPSIiY29sIiIgYWJicj0iIiImWlZBX1dlZWsoNikmIiIiPjxzbWFsbD4iJlpWQV9XZWVrX0FiYnIoNikmIjwvc21hbGw+PC90aD4gPHRoIHRpdGxlPSIiIiZaVkFfV2Vlayg3KSYiIiIgc2NvcGU9IiJjb2wiIiBhYmJyPSIiIiZaVkFfV2Vlayg3KSYiIiI+PHNtYWxsPiImWlZBX1dlZWtfQWJicig3KSYiPC9zbWFsbD48L3RoPgk8L3RyPgk8L3RoZWFkPiINCgkJDQoJJ3Rmb290CQ0KCQkNCgkndGJvZHkJDQoJc3RyQ2FsZW5kYXI9c3RyQ2FsZW5kYXIgJiAiCTx0Ym9keT4iDQoJDQoJaj0wDQoJRGltIGIxLGIyDQoJRm9yIGk9MSB0byBiDQoNCgkJSWYgKGogTW9kIDcpPTAgVGhlbiBzdHJDYWxlbmRhcj1zdHJDYWxlbmRhciAmICI8dHI+Ig0KCQlJZiAoai83KTw9MCBhbmQgZmlydzw+MSB0aGVuIHN0ckNhbGVuZGFyPXN0ckNhbGVuZGFyICYgIjx0ZCBjbGFzcz0iInBhZCIiIGNvbHNwYW49IiIiJiAoZmlydy0xKSAmIiIiPiA8L3RkPiINCg0KCQlJZiAoaj0+Zmlydy0xKSBhbmQgKGs9PGQpIFRoZW4NCgkJDQoJCQlzdHJDYWxlbmRhcj1zdHJDYWxlbmRhciAmICI8dGQgIg0KCQkJDQoJCQlJZiAJQ2RhdGUoeSYiLSImbSYiLSImaykgPSBEYXRlKCkgVGhlbg0KCQkJCXN0ckNhbGVuZGFyPXN0ckNhbGVuZGFyICYgIiBpZCA9IiJ0b2RheSIiICINCgkJCQliMT0iPGI+Ig0KCQkJCWIyPSI8L2I+Ig0KCQkJRWxzZQ0KCQkJCWIxPSIiDQoJCQkJYjI9IiINCgkJCUVuZCBJZg0KCQkJDQoJCQlJZiBhcnlEYXRlTGluayhrKSBUaGVuDQoJCQkJc3RyQ2FsZW5kYXI9c3RyQ2FsZW5kYXIgJiAiPjxhIGhyZWY9IiIiJiBaQ19CTE9HX0hPU1QgJiJjYXRhbG9nLmFzcD9kYXRlPSImWWVhcihhcnlEYXRlQXJ0aWNsZShrKS5Qb3N0VGltZSkmIi0iJk1vbnRoKGFyeURhdGVBcnRpY2xlKGspLlBvc3RUaW1lKSYiLSImRGF5KGFyeURhdGVBcnRpY2xlKGspLlBvc3RUaW1lKSYgIiIiPiImYjEmKGspJmIyJiI8L2E+PC90ZD4iDQoJCQlFbHNlDQoJCQkJc3RyQ2FsZW5kYXI9c3RyQ2FsZW5kYXIgJiI+IiZiMSYoaykmYjImIjwvdGQ+Ig0KCQkJRW5kIElmDQoNCgkJCWs9aysxDQoJCUVuZCBJZg0KCQkJDQoJCWlmIGo9Yi0xIEFORCBsYXN3PD43IHRoZW4gc3RyQ2FsZW5kYXI9c3RyQ2FsZW5kYXIgJiAiPHRkIGNsYXNzPSIicGFkIiIgY29sc3Bhbj0iIiImICg3LWxhc3cpICYiIiI+IDwvdGQ+IgkJDQoNCgkJSWYgKGogTW9kIDcpPTYgVGhlbiBzdHJDYWxlbmRhcj1zdHJDYWxlbmRhciAmICI8L3RyPiINCg0KCQlqPWorMQ0KCU5leHQNCg0KCXN0ckNhbGVuZGFyPXN0ckNhbGVuZGFyICYgIgk8L3Rib2R5PjwvdGFibGU+Ig0KCU1ha2VDYWxlbmRhcj1zdHJDYWxlbmRhcg0KCQ0KRW5kIEZ1bmN0aW9uDQonKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqDQoNCg0KDQoNCicqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioNCicg55uu55qE77yaICAgIOWKoOi9vem7mOiupOeahOS4u+mimOaooeadvw0KJyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KRnVuY3Rpb24gTG9hZERlZmF1bHRUZW1wbGF0ZXMoKQ0KDQpJZiBUZW1wbGF0ZURpYy5FeGlzdHMoIlRFTVBMQVRFX0JfQVJUSUNMRS1JU1RPUCIpPUZhbHNlIFRoZW4gQ2FsbCBUZW1wbGF0ZURpYy5hZGQoIlRFTVBMQVRFX0JfQVJUSUNMRS1JU1RPUCIsTG9hZEZyb21GaWxlKEJsb2dQYXRoICYiemJfc3lzdGVtXGRlZmVuZFxkZWZhdWx0XGJfYXJ0aWNsZS1pc3RvcC5odG1sIiwidXRmLTgiKSkNCklmIFRlbXBsYXRlRGljLkV4aXN0cygiVEVNUExBVEVfQl9BUlRJQ0xFLU1VTFRJIik9RmFsc2UgVGhlbiBDYWxsIFRlbXBsYXRlRGljLmFkZCgiVEVNUExBVEVfQl9BUlRJQ0xFLU1VTFRJIixMb2FkRnJvbUZpbGUoQmxvZ1BhdGggJiJ6Yl9zeXN0ZW1cZGVmZW5kXGRlZmF1bHRcYl9hcnRpY2xlLW11bHRpLmh0bWwiLCJ1dGYtOCIpKQ0KSWYgVGVtcGxhdGVEaWMuRXhpc3RzKCJURU1QTEFURV9CX0FSVElDTEUtU0lOR0xFIik9RmFsc2UgVGhlbiBDYWxsIFRlbXBsYXRlRGljLmFkZCgiVEVNUExBVEVfQl9BUlRJQ0xFLVNJTkdMRSIsTG9hZEZyb21GaWxlKEJsb2dQYXRoICYiemJfc3lzdGVtXGRlZmVuZFxkZWZhdWx0XGJfYXJ0aWNsZS1zaW5nbGUuaHRtbCIsInV0Zi04IikpDQpJZiBUZW1wbGF0ZURpYy5FeGlzdHMoIlRFTVBMQVRFX0JfQVJUSUNMRV9DT01NRU5UIik9RmFsc2UgVGhlbiBDYWxsIFRlbXBsYXRlRGljLmFkZCgiVEVNUExBVEVfQl9BUlRJQ0xFX0NPTU1FTlQiLExvYWRGcm9tRmlsZShCbG9nUGF0aCAmInpiX3N5c3RlbVxkZWZlbmRcZGVmYXVsdFxiX2FydGljbGVfY29tbWVudC5odG1sIiwidXRmLTgiKSkNCklmIFRlbXBsYXRlRGljLkV4aXN0cygiVEVNUExBVEVfQl9BUlRJQ0xFX0NPTU1FTlRQT1NULVZFUklGWSIpPUZhbHNlIFRoZW4gQ2FsbCBUZW1wbGF0ZURpYy5hZGQoIlRFTVBMQVRFX0JfQVJUSUNMRV9DT01NRU5UUE9TVC1WRVJJRlkiLExvYWRGcm9tRmlsZShCbG9nUGF0aCAmInpiX3N5c3RlbVxkZWZlbmRcZGVmYXVsdFxiX2FydGljbGVfY29tbWVudHBvc3QtdmVyaWZ5Lmh0bWwiLCJ1dGYtOCIpKQ0KSWYgVGVtcGxhdGVEaWMuRXhpc3RzKCJURU1QTEFURV9CX0FSVElDTEVfQ09NTUVOVFBPU1QiKT1GYWxzZSBUaGVuIENhbGwgVGVtcGxhdGVEaWMuYWRkKCJURU1QTEFURV9CX0FSVElDTEVfQ09NTUVOVFBPU1QiLExvYWRGcm9tRmlsZShCbG9nUGF0aCAmInpiX3N5c3RlbVxkZWZlbmRcZGVmYXVsdFxiX2FydGljbGVfY29tbWVudHBvc3QuaHRtbCIsInV0Zi04IikpDQpJZiBUZW1wbGF0ZURpYy5FeGlzdHMoIlRFTVBMQVRFX0JfQVJUSUNMRV9DT01NRU5UX1BBR0VCQVIiKT1GYWxzZSBUaGVuIENhbGwgVGVtcGxhdGVEaWMuYWRkKCJURU1QTEFURV9CX0FSVElDTEVfQ09NTUVOVF9QQUdFQkFSIixMb2FkRnJvbUZpbGUoQmxvZ1BhdGggJiJ6Yl9zeXN0ZW1cZGVmZW5kXGRlZmF1bHRcYl9hcnRpY2xlX2NvbW1lbnRfcGFnZWJhci5odG1sIiwidXRmLTgiKSkNCklmIFRlbXBsYXRlRGljLkV4aXN0cygiVEVNUExBVEVfQl9BUlRJQ0xFX01VVFVBTElUWSIpPUZhbHNlIFRoZW4gQ2FsbCBUZW1wbGF0ZURpYy5hZGQoIlRFTVBMQVRFX0JfQVJUSUNMRV9NVVRVQUxJVFkiLExvYWRGcm9tRmlsZShCbG9nUGF0aCAmInpiX3N5c3RlbVxkZWZlbmRcZGVmYXVsdFxiX2FydGljbGVfbXV0dWFsaXR5Lmh0bWwiLCJ1dGYtOCIpKQ0KSWYgVGVtcGxhdGVEaWMuRXhpc3RzKCJURU1QTEFURV9CX0FSVElDTEVfTkFWQkFSX0wiKT1GYWxzZSBUaGVuIENhbGwgVGVtcGxhdGVEaWMuYWRkKCJURU1QTEFURV9CX0FSVElDTEVfTkFWQkFSX0wiLExvYWRGcm9tRmlsZShCbG9nUGF0aCAmInpiX3N5c3RlbVxkZWZlbmRcZGVmYXVsdFxiX2FydGljbGVfbmF2YmFyX2wuaHRtbCIsInV0Zi04IikpDQpJZiBUZW1wbGF0ZURpYy5FeGlzdHMoIlRFTVBMQVRFX0JfQVJUSUNMRV9OQVZCQVJfUiIpPUZhbHNlIFRoZW4gQ2FsbCBUZW1wbGF0ZURpYy5hZGQoIlRFTVBMQVRFX0JfQVJUSUNMRV9OQVZCQVJfUiIsTG9hZEZyb21GaWxlKEJsb2dQYXRoICYiemJfc3lzdGVtXGRlZmVuZFxkZWZhdWx0XGJfYXJ0aWNsZV9uYXZiYXJfci5odG1sIiwidXRmLTgiKSkNCklmIFRlbXBsYXRlRGljLkV4aXN0cygiVEVNUExBVEVfQl9BUlRJQ0xFX1RBRyIpPUZhbHNlIFRoZW4gQ2FsbCBUZW1wbGF0ZURpYy5hZGQoIlRFTVBMQVRFX0JfQVJUSUNMRV9UQUciLExvYWRGcm9tRmlsZShCbG9nUGF0aCAmInpiX3N5c3RlbVxkZWZlbmRcZGVmYXVsdFxiX2FydGljbGVfdGFnLmh0bWwiLCJ1dGYtOCIpKQ0KSWYgVGVtcGxhdGVEaWMuRXhpc3RzKCJURU1QTEFURV9CX0ZVTkNUSU9OIik9RmFsc2UgVGhlbiBDYWxsIFRlbXBsYXRlRGljLmFkZCgiVEVNUExBVEVfQl9GVU5DVElPTiIsTG9hZEZyb21GaWxlKEJsb2dQYXRoICYiemJfc3lzdGVtXGRlZmVuZFxkZWZhdWx0XGJfZnVuY3Rpb24uaHRtbCIsInV0Zi04IikpDQpJZiBUZW1wbGF0ZURpYy5FeGlzdHMoIlRFTVBMQVRFX0JfUEFHRUJBUiIpPUZhbHNlIFRoZW4gQ2FsbCBUZW1wbGF0ZURpYy5hZGQoIlRFTVBMQVRFX0JfUEFHRUJBUiIsTG9hZEZyb21GaWxlKEJsb2dQYXRoICYiemJfc3lzdGVtXGRlZmVuZFxkZWZhdWx0XGJfcGFnZWJhci5odG1sIiwidXRmLTgiKSkNCklmIFRlbXBsYXRlRGljLkV4aXN0cygiVEVNUExBVEVfQ0FUQUxPRyIpPUZhbHNlIFRoZW4gQ2FsbCBUZW1wbGF0ZURpYy5hZGQoIlRFTVBMQVRFX0NBVEFMT0ciLExvYWRGcm9tRmlsZShCbG9nUGF0aCAmInpiX3N5c3RlbVxkZWZlbmRcZGVmYXVsdFxjYXRhbG9nLmh0bWwiLCJ1dGYtOCIpKQ0KSWYgVGVtcGxhdGVEaWMuRXhpc3RzKCJURU1QTEFURV9ERUZBVUxUIik9RmFsc2UgVGhlbiBDYWxsIFRlbXBsYXRlRGljLmFkZCgiVEVNUExBVEVfREVGQVVMVCIsTG9hZEZyb21GaWxlKEJsb2dQYXRoICYiemJfc3lzdGVtXGRlZmVuZFxkZWZhdWx0XGRlZmF1bHQuaHRtbCIsInV0Zi04IikpDQpJZiBUZW1wbGF0ZURpYy5FeGlzdHMoIlRFTVBMQVRFX0ZPT1RFUiIpPUZhbHNlIFRoZW4gQ2FsbCBUZW1wbGF0ZURpYy5hZGQoIlRFTVBMQVRFX0ZPT1RFUiIsTG9hZEZyb21GaWxlKEJsb2dQYXRoICYiemJfc3lzdGVtXGRlZmVuZFxkZWZhdWx0XGZvb3Rlci5odG1sIiwidXRmLTgiKSkNCklmIFRlbXBsYXRlRGljLkV4aXN0cygiVEVNUExBVEVfSEVBREVSIik9RmFsc2UgVGhlbiBDYWxsIFRlbXBsYXRlRGljLmFkZCgiVEVNUExBVEVfSEVBREVSIixMb2FkRnJvbUZpbGUoQmxvZ1BhdGggJiJ6Yl9zeXN0ZW1cZGVmZW5kXGRlZmF1bHRcaGVhZGVyLmh0bWwiLCJ1dGYtOCIpKQ0KSWYgVGVtcGxhdGVEaWMuRXhpc3RzKCJURU1QTEFURV9TSURFQkFSIik9RmFsc2UgVGhlbiBDYWxsIFRlbXBsYXRlRGljLmFkZCgiVEVNUExBVEVfU0lERUJBUiIsTG9hZEZyb21GaWxlKEJsb2dQYXRoICYiemJfc3lzdGVtXGRlZmVuZFxkZWZhdWx0XC5odG1sIiwidXRmLTgiKSkNCklmIFRlbXBsYXRlRGljLkV4aXN0cygiVEVNUExBVEVfU0lOR0xFIik9RmFsc2UgVGhlbiBDYWxsIFRlbXBsYXRlRGljLmFkZCgiVEVNUExBVEVfU0lOR0xFIixMb2FkRnJvbUZpbGUoQmxvZ1BhdGggJiJ6Yl9zeXN0ZW1cZGVmZW5kXGRlZmF1bHRcc2luZ2xlLmh0bWwiLCJ1dGYtOCIpKQ0KSWYgVGVtcGxhdGVEaWMuRXhpc3RzKCJURU1QTEFURV9CX0FSVElDTEUtU0VBUkNILUNPTlRFTlQiKT1GYWxzZSBUaGVuIENhbGwgVGVtcGxhdGVEaWMuYWRkKCJURU1QTEFURV9CX0FSVElDTEUtU0VBUkNILUNPTlRFTlQiLExvYWRGcm9tRmlsZShCbG9nUGF0aCAmInpiX3N5c3RlbVxkZWZlbmRcZGVmYXVsdFxiX2FydGljbGUtc2VhcmNoLWNvbnRlbnQuaHRtbCIsInV0Zi04IikpDQpJZiBUZW1wbGF0ZURpYy5FeGlzdHMoIlRFTVBMQVRFX0JfQVJUSUNMRS1QQUdFIik9RmFsc2UgVGhlbiBDYWxsIFRlbXBsYXRlRGljLmFkZCgiVEVNUExBVEVfQl9BUlRJQ0xFLVBBR0UiLExvYWRGcm9tRmlsZShCbG9nUGF0aCAmInpiX3N5c3RlbVxkZWZlbmRcZGVmYXVsdFxiX2FydGljbGUtcGFnZS5odG1sIiwidXRmLTgiKSkNCklmIFRlbXBsYXRlRGljLkV4aXN0cygiVEVNUExBVEVfUEFHRSIpPUZhbHNlIFRoZW4gQ2FsbCBUZW1wbGF0ZURpYy5hZGQoIlRFTVBMQVRFX1BBR0UiLExvYWRGcm9tRmlsZShCbG9nUGF0aCAmInpiX3N5c3RlbVxkZWZlbmRcZGVmYXVsdFxwYWdlLmh0bWwiLCJ1dGYtOCIpKQ0KSWYgVGVtcGxhdGVEaWMuRXhpc3RzKCJURU1QTEFURV9CX0FSVElDTEVfQ09NTUVOVF9QQUdFQkFSX0wiKT1GYWxzZSBUaGVuIENhbGwgVGVtcGxhdGVEaWMuYWRkKCJURU1QTEFURV9CX0FSVElDTEVfQ09NTUVOVF9QQUdFQkFSX0wiLExvYWRGcm9tRmlsZShCbG9nUGF0aCAmInpiX3N5c3RlbVxkZWZlbmRcZGVmYXVsdFxiX2FydGljbGVfY29tbWVudF9wYWdlYmFyX2wuaHRtbCIsInV0Zi04IikpDQpJZiBUZW1wbGF0ZURpYy5FeGlzdHMoIlRFTVBMQVRFX0JfQVJUSUNMRV9DT01NRU5UX1BBR0VCQVJfUiIpPUZhbHNlIFRoZW4gQ2FsbCBUZW1wbGF0ZURpYy5hZGQoIlRFTVBMQVRFX0JfQVJUSUNMRV9DT01NRU5UX1BBR0VCQVJfUiIsTG9hZEZyb21GaWxlKEJsb2dQYXRoICYiemJfc3lzdGVtXGRlZmVuZFxkZWZhdWx0XGJfYXJ0aWNsZV9jb21tZW50X3BhZ2ViYXJfci5odG1sIiwidXRmLTgiKSkNCg0KJ+S4ujIuMuaUueS6huaooeadv+eahOm7mOiupOihqOWNlQ0KRGltIHMNCnM9VGVtcGxhdGVEaWMuSXRlbSgiVEVNUExBVEVfQl9BUlRJQ0xFX0NPTU1FTlRQT1NUIikNCg0KSWYgSW5TdHIocywiaW5wUmV2SUQiKT0wIFRoZW4NCglJZiBJblN0cihzLCJpbnBMb2NhdGlvbiIpPjAgVGhlbg0KCQlzPVJlcGxhY2UocywiaW5wTG9jYXRpb24iLCJpbnBSZXZJRCIpDQoJRWxzZQ0KCQlzPVJlcGxhY2UocywiPGlucHV0IiwiPGlucHV0IHR5cGU9IiJoaWRkZW4iIiBuYW1lPSIiaW5wUmV2SUQiIiBpZD0iImlucFJldklEIiIgdmFsdWU9IiIiIiAvPjxpbnB1dCIsMSwxKQ0KCUVuZCBJZg0KRW5kIElmDQpUZW1wbGF0ZURpYy5JdGVtKCJURU1QTEFURV9CX0FSVElDTEVfQ09NTUVOVFBPU1QiKT1zDQoNCglEaW0gaSxqDQoJJ+WcqOaooeadv+aWh+S7tuS4reWFiOabv+aNouS4gOasoeaooeadv0lOQ0xVREXph4znmoTmlofku7bmoIfnrb4NCglGb3IgRWFjaCBpIEluIFRlbXBsYXRlRGljLktleXMNCgkJRm9yIEVhY2ggaiBJbiBUZW1wbGF0ZURpYy5LZXlzDQoJCQlUZW1wbGF0ZURpYy5JdGVtKGopPVJlcGxhY2UoVGVtcGxhdGVEaWMuSXRlbShqKSwiPCMiK2krIiM+IixUZW1wbGF0ZURpYy5JdGVtKGkpKQ0KCQlOZXh0DQoJTmV4dA0KDQoNCkVuZCBGdW5jdGlvbg0KJyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KDQoNCg0KDQonKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqDQonIOebrueahO+8miAgICDliqDovb3mjIflrprnm67lvZXnmoTmlofku7bliJfooagNCicqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioNCkZ1bmN0aW9uIExvYWRJbmNsdWRlRmlsZXMoc3RyRGlyKQ0KDQoJRGltIGFyeUZpbGVMaXN0KCkNCglSZURpbSBhcnlGaWxlTGlzdCgtMSkNCg0KCURpbSBmLCBmMSwgZmMsIHMsIGkNCg0KCUlmIE5vdCBJc09iamVjdChQdWJsaWNPYmpGU08pIFRoZW4gU2V0IFB1YmxpY09iakZTTz1TZXJ2ZXIuQ3JlYXRlT2JqZWN0KCJTY3JpcHRpbmcuRmlsZVN5c3RlbU9iamVjdCIpDQoJDQoJSWYgUHVibGljT2JqRlNPLkZvbGRlckV4aXN0cyhCbG9nUGF0aCAmIHN0ckRpcik9RmFsc2UgVGhlbg0KCQlMb2FkSW5jbHVkZUZpbGVzPUFycmF5KCkNCgkJRXhpdCBGdW5jdGlvbg0KCUVuZCBJZg0KDQoJU2V0IGYgPSBQdWJsaWNPYmpGU08uR2V0Rm9sZGVyKEJsb2dQYXRoICYgc3RyRGlyKQ0KCVNldCBmYyA9IGYuRmlsZXMNCg0KCWk9MA0KDQoJRm9yIEVhY2ggZjEgaW4gZmMNCgkJaT1pKzENCgkJUmVEaW0gUHJlc2VydmUgYXJ5RmlsZUxpc3QoaSkNCgkJYXJ5RmlsZUxpc3QoaSk9ZjEubmFtZQ0KCU5leHQNCg0KCUxvYWRJbmNsdWRlRmlsZXM9YXJ5RmlsZUxpc3QNCg0KRW5kIEZ1bmN0aW9uDQonKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqDQoNCg0KDQonKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqDQonIOebrueahO+8miAgICDliqDovb3mjIflrprnm67lvZXnmoTmlofku7bliJfooagNCicqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioNCkZ1bmN0aW9uIExvYWRJbmNsdWRlRmlsZXNPbmx5VHlwZShzdHJEaXIpDQoNCglEaW0gYXJ5RmlsZUxpc3QoKQ0KCVJlRGltIGFyeUZpbGVMaXN0KC0xKQ0KDQoJRGltIGYsIGYxLCBmYywgcywgaQ0KDQoJSWYgTm90IElzT2JqZWN0KFB1YmxpY09iakZTTykgVGhlbiBTZXQgUHVibGljT2JqRlNPPVNlcnZlci5DcmVhdGVPYmplY3QoIlNjcmlwdGluZy5GaWxlU3lzdGVtT2JqZWN0IikNCg0KCUlmIFB1YmxpY09iakZTTy5Gb2xkZXJFeGlzdHMoQmxvZ1BhdGggJiBzdHJEaXIpPUZhbHNlIFRoZW4NCgkJTG9hZEluY2x1ZGVGaWxlc09ubHlUeXBlPUFycmF5KCkNCgkJRXhpdCBGdW5jdGlvbg0KCUVuZCBJZg0KDQoJU2V0IGYgPSBQdWJsaWNPYmpGU08uR2V0Rm9sZGVyKEJsb2dQYXRoICYgc3RyRGlyKQ0KCVNldCBmYyA9IGYuRmlsZXMNCg0KCWk9MA0KDQoJRm9yIEVhY2ggZjEgaW4gZmMNCgkJSWYgUmlnaHQoZjEubmFtZSw1KT0iLmh0bWwiIE9yIFJpZ2h0KGYxLm5hbWUsNCk9Ii5hc3AiIE9yIFJpZ2h0KGYxLm5hbWUsNCk9Ii5odG0iICBUaGVuDQoJCQlpPWkrMQ0KCQkJUmVEaW0gUHJlc2VydmUgYXJ5RmlsZUxpc3QoaSkNCgkJCWFyeUZpbGVMaXN0KGkpPWYxLm5hbWUNCgkJRW5kIElmDQoJTmV4dA0KDQoJTG9hZEluY2x1ZGVGaWxlc09ubHlUeXBlPWFyeUZpbGVMaXN0DQoNCkVuZCBGdW5jdGlvbg0KJyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KDQoNCg0KDQonKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqDQonIOebrueahO+8miAgICBHZXQgVGVtcGxhdGUgYnkgTmFtZQ0KJyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KRnVuY3Rpb24gR2V0VGVtcGxhdGUoTmFtZSkNCg0KCUdldFRlbXBsYXRlPVRlbXBsYXRlRGljLkl0ZW0oTmFtZSkNCg0KRW5kIEZ1bmN0aW9uDQonKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqDQoNCg0KDQoNCicqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioNCicg55uu55qE77yaICAgIFNldCBUZW1wbGF0ZSBieSBOYW1lDQonKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqDQpGdW5jdGlvbiBTZXRUZW1wbGF0ZShOYW1lLFZhbHVlKQ0KDQoJVGVtcGxhdGVEaWMuSXRlbShOYW1lKT1WYWx1ZQ0KDQpFbmQgRnVuY3Rpb24NCicqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioNCg0KDQoNCg0KJyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KJyDnm67nmoTvvJogICAg5b6X5Yiw5qih5p2/5qCH562+DQonKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqDQpGdW5jdGlvbiBHZXRUZW1wbGF0ZVRhZ3MoTmFtZSkNCglHZXRUZW1wbGF0ZVRhZ3M9VGVtcGxhdGVUYWdzRGljLkl0ZW0oTmFtZSkNCkVuZCBGdW5jdGlvbg0KJyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KDQoNCg0KDQonKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqDQonIOebrueahO+8miAgICDorr7nva7mqKHmnb/moIfnrb4NCicqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioNCkZ1bmN0aW9uIFNldFRlbXBsYXRlVGFncyhOYW1lLFZhbHVlKQ0KCVRlbXBsYXRlVGFnc0RpYy5JdGVtKE5hbWUpPVZhbHVlDQpFbmQgRnVuY3Rpb24NCicqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioNCg0KDQoNCg0KJyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KJyDnm67nmoTvvJogICAgQ2hlY2sgVGVtcGxhdGUgTW9kaWZpZWQgRGF0ZQ0KJyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KRnVuY3Rpb24gQ2hlY2tUZW1wbGF0ZU1vZGlmaWVkKCkNCg0KCURpbSBmLCBmMSwgZmMsIHMNCglEaW0gZCxuZA0KDQoJSWYgTm90IElzT2JqZWN0KFB1YmxpY09iakZTTykgVGhlbiBTZXQgUHVibGljT2JqRlNPPVNlcnZlci5DcmVhdGVPYmplY3QoIlNjcmlwdGluZy5GaWxlU3lzdGVtT2JqZWN0IikNCgkNCglJZiBQdWJsaWNPYmpGU08uRm9sZGVyRXhpc3RzKEJsb2dQYXRoICYgInpiX3VzZXJzXCIgJiAidGhlbWUiICYgIlwiICYgWkNfQkxPR19USEVNRSAmICJcIiAmIFpDX1RFTVBMQVRFX0RJUkVDVE9SWSk9RmFsc2UgVGhlbiBFeGl0IEZ1bmN0aW9uDQoJU2V0IGYgPSBQdWJsaWNPYmpGU08uR2V0Rm9sZGVyKEJsb2dQYXRoICYgInpiX3VzZXJzXCIgJiAidGhlbWUiICYgIlwiICYgWkNfQkxPR19USEVNRSAmICJcIiAmIFpDX1RFTVBMQVRFX0RJUkVDVE9SWSkNCglTZXQgZmMgPSBmLkZpbGVzDQoNCglGb3IgRWFjaCBmMSBpbiBmYw0KCSAgZD1mMS5EYXRlTGFzdE1vZGlmaWVkDQoJICBJZiBuZD0iIiBUaGVuIG5kPWQNCgkgIElmIERhdGVEaWZmKCJzIixuZCxkKT4wIFRoZW4gbmQ9ZA0KCU5leHQNCg0KCUNoZWNrVGVtcGxhdGVNb2RpZmllZD1uZA0KDQpFbmQgRnVuY3Rpb24NCicqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioNCg0KDQoNCg0KJyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KJyDnm67nmoTvvJogICAgTG9hZCDlhajlsYAgQ2FjaGUNCicqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioNCkZ1bmN0aW9uIExvYWRHbG9iZUNhY2hlKCkNCg0KCU9uIEVycm9yIFJlc3VtZSBOZXh0DQoNCglEaW0gaWksamoNCg0KCURpbSBib2xSZUxvYWRDYWNoZQ0KCUFwcGxpY2F0aW9uLkxvY2sNCglib2xSZUxvYWRDYWNoZT1BcHBsaWNhdGlvbihaQ19CTE9HX0NMU0lEICYgIlNJR05BTF9SRUxPQURDQUNIRSIpDQoJQXBwbGljYXRpb24uVW5Mb2NrDQoNCglJZiBJc0VtcHR5KGJvbFJlTG9hZENhY2hlKT1UcnVlIFRoZW4NCgkJYm9sUmVMb2FkQ2FjaGU9Im9rIg0KCUVsc2UNCgkJRGltIFRlbXBsYXRlc05hbWUNCgkJRGltIFRlbXBsYXRlc0NvbnRlbnQNCg0KCQlEaW0gVGVtcGxhdGVUYWdzTmFtZQ0KCQlEaW0gVGVtcGxhdGVUYWdzVmFsdWUNCg0KCQlUZW1wbGF0ZVRhZ3NEaWMuUmVtb3ZlQWxsDQoJCVRlbXBsYXRlRGljLlJlbW92ZUFsbA0KDQoJCUFwcGxpY2F0aW9uLkxvY2sNCgkJVGVtcGxhdGVUYWdzTmFtZT1BcHBsaWNhdGlvbihaQ19CTE9HX0NMU0lEICYgIlRlbXBsYXRlVGFnc05hbWUiKQ0KCQlUZW1wbGF0ZVRhZ3NWYWx1ZT1BcHBsaWNhdGlvbihaQ19CTE9HX0NMU0lEICYgIlRlbXBsYXRlVGFnc1ZhbHVlIikNCg0KCQlUZW1wbGF0ZXNOYW1lPUFwcGxpY2F0aW9uKFpDX0JMT0dfQ0xTSUQgJiAiVGVtcGxhdGVzTmFtZSIpDQoJCVRlbXBsYXRlc0NvbnRlbnQ9QXBwbGljYXRpb24oWkNfQkxPR19DTFNJRCAmICJUZW1wbGF0ZXNDb250ZW50IikNCgkJQXBwbGljYXRpb24uVW5Mb2NrDQoNCgkJamo9VUJvdW5kKFRlbXBsYXRlc05hbWUpDQoJCUZvciBpaT0wIHRvIGpqDQoJCQlJZiBUZW1wbGF0ZURpYy5FeGlzdHMoVGVtcGxhdGVzTmFtZShpaSkpPUZhbHNlIFRoZW4gVGVtcGxhdGVEaWMuQWRkIFRlbXBsYXRlc05hbWUoaWkpLCBUZW1wbGF0ZXNDb250ZW50KGlpKQ0KCQlOZXh0DQoNCgkJamo9VUJvdW5kKFRlbXBsYXRlVGFnc05hbWUpDQoJCUZvciBpaT0wIHRvIGpqDQoJCQlJZiBUZW1wbGF0ZVRhZ3NEaWMuRXhpc3RzKFRlbXBsYXRlVGFnc05hbWUoaWkpKT1GYWxzZSBUaGVuIFRlbXBsYXRlVGFnc0RpYy5BZGQgVGVtcGxhdGVUYWdzTmFtZShpaSksIFRlbXBsYXRlVGFnc1ZhbHVlKGlpKQ0KCQlOZXh0DQoNCgkJJ0NhbGwgTG9hZERlZmF1bHRUZW1wbGF0ZXMoKQ0KDQoJCUlmIElzRW1wdHkoVGVtcGxhdGVUYWdzVmFsdWUpPUZhbHNlIEFuZCBJc0VtcHR5KFRlbXBsYXRlVGFnc1ZhbHVlKT1GYWxzZSBBbmQgSXNFbXB0eShUZW1wbGF0ZXNOYW1lKT1GYWxzZSBBbmQgSXNFbXB0eShUZW1wbGF0ZXNDb250ZW50KT1GYWxzZSBUaGVuDQoJCQlFeGl0IEZ1bmN0aW9uDQoJCUVuZCBJZg0KCUVuZCBJZg0KDQoJRGltIGksag0KDQoJJ+WKoOi9veaooeadvw0KCURpbSBvYmpTdHJlYW0NCglEaW0gc3RyQ29udGVudA0KDQoNCglEaW0gYXJ5VGVtcGxhdGVzTmFtZSgpDQoJRGltIGFyeVRlbXBsYXRlc0NvbnRlbnQoKQ0KDQoJJ+ivu+WPllRlbXBsYXRl55uu5b2V5LiL55qE5omA5pyJ5paH5Lu25bm25YaZ5YWlQ2FjaGUNCglEaW0gYXJ5RmlsZUxpc3QNCglEaW0gYXJ5RmlsZU5hbWVUZW1wbGF0ZSgpDQoJRGltIGFyeUZpbGVOYW1lVGVtcGxhdGVfVmFyaWFibGUoKQ0KDQoJYXJ5RmlsZUxpc3Q9TG9hZEluY2x1ZGVGaWxlc09ubHlUeXBlKCJ6Yl91c2Vyc1x0aGVtZSIgJiAiLyIgJiBaQ19CTE9HX1RIRU1FICYgIi8iICYgWkNfVEVNUExBVEVfRElSRUNUT1JZKQ0KDQoJSWYgSXNBcnJheShhcnlGaWxlTGlzdCkgVGhlbg0KDQoJCWo9VUJvdW5kKGFyeUZpbGVMaXN0KQ0KDQoJCUlmIGo+MCBUaGVuDQoNCgkJCVJlRGltIGFyeUZpbGVOYW1lVGVtcGxhdGUoaikNCgkJCVJlRGltIGFyeUZpbGVOYW1lVGVtcGxhdGVfVmFyaWFibGUoaikNCg0KCQkJUmVEaW0gUHJlc2VydmUgYXJ5VGVtcGxhdGVzTmFtZShqKQ0KCQkJUmVEaW0gUHJlc2VydmUgYXJ5VGVtcGxhdGVzQ29udGVudChqKQ0KDQoJCQlGb3IgaT0xIHRvIGoNCg0KCQkJCWFyeUZpbGVOYW1lVGVtcGxhdGUoaSk9InRoZW1lIiAmICIvIiAmIFpDX0JMT0dfVEhFTUUgJiAiLyIgJiBaQ19URU1QTEFURV9ESVJFQ1RPUlkgJiAiLyIgJiBhcnlGaWxlTGlzdChpKQ0KCQkJCWFyeUZpbGVOYW1lVGVtcGxhdGVfVmFyaWFibGUoaSk9IlRFTVBMQVRFXyIgJiBVQ2FzZShMZWZ0KGFyeUZpbGVMaXN0KGkpLEluU3RyKGFyeUZpbGVMaXN0KGkpLCIuIiktMSkpDQoJCQkJSWYgSW5TdHIoYXJ5RmlsZUxpc3QoaSksIi4iKT0wIFRoZW4NCgkJCQkJYXJ5RmlsZU5hbWVUZW1wbGF0ZV9WYXJpYWJsZShpKT0iVEVNUExBVEVfIiAmIFVDYXNlKGFyeUZpbGVMaXN0KGkpKQ0KCQkJCUVuZCBJZg0KCQkJCWFyeVRlbXBsYXRlc05hbWUoaSk9YXJ5RmlsZU5hbWVUZW1wbGF0ZV9WYXJpYWJsZShpKQ0KDQoJCQkJc3RyQ29udGVudD0iIg0KCQkJCXN0ckNvbnRlbnQ9TG9hZEZyb21GaWxlKEJsb2dQYXRoICYgInpiX3VzZXJzXCIgJiBhcnlGaWxlTmFtZVRlbXBsYXRlKGkpLCJ1dGYtOCIpDQoNCgkJCQlhcnlUZW1wbGF0ZXNDb250ZW50KGkpPXN0ckNvbnRlbnQNCgkJCU5leHQNCg0KCQkJJ+WcqOaooeadv+aWh+S7tuS4reWFiOabv+aNouW9k+WJjeaooeeJiOWGheeahOaWh+S7tuagh+etvg0KCQkJRm9yIGk9MSBUbyBVQm91bmQoYXJ5VGVtcGxhdGVzTmFtZSkNCgkJCQlGb3Igaj0xIHRvIFVCb3VuZChhcnlUZW1wbGF0ZXNOYW1lKQ0KCQkJCQlhcnlUZW1wbGF0ZXNDb250ZW50KGkpPVJlcGxhY2UoYXJ5VGVtcGxhdGVzQ29udGVudChpKSwiPCMiK2FyeVRlbXBsYXRlc05hbWUoaikrIiM+IixhcnlUZW1wbGF0ZXNDb250ZW50KGopKQ0KCQkJCU5leHQNCgkJCQlhcnlUZW1wbGF0ZXNDb250ZW50KGkpPVJlcGxhY2UoYXJ5VGVtcGxhdGVzQ29udGVudChpKSwiPCNaQ19CTE9HX0hPU1QjPnRoZW1lcy8iLCI8I1pDX0JMT0dfSE9TVCM+emJfdXNlcnMvdGhlbWUvIikNCgkJCU5leHQNCgkJCWo9VUJvdW5kKGFyeUZpbGVMaXN0KQ0KDQoJCUVsc2UNCgkJCWo9MA0KCQlFbmQgSWYNCg0KCUVuZCBJZg0KDQoNCgkn6K+75Y+WQ2FjaGXnm67lvZXkuIvnmoTmiYDmnInkvqfmoI/mlofku7blubblhpnlhaVDYWNoZQ0KDQoJUmVEaW0gUHJlc2VydmUgYXJ5VGVtcGxhdGVzTmFtZShqKzUpDQoJUmVEaW0gUHJlc2VydmUgYXJ5VGVtcGxhdGVzQ29udGVudChqKzUpDQoNCg0KCWFyeVRlbXBsYXRlc05hbWUoaisxKT0iQ0FDSEVfU0lERUJBUiINCglhcnlUZW1wbGF0ZXNOYW1lKGorMik9IkNBQ0hFX1NJREVCQVIyIg0KCWFyeVRlbXBsYXRlc05hbWUoaiszKT0iQ0FDSEVfU0lERUJBUjMiDQoJYXJ5VGVtcGxhdGVzTmFtZShqKzQpPSJDQUNIRV9TSURFQkFSNCINCglhcnlUZW1wbGF0ZXNOYW1lKGorNSk9IkNBQ0hFX1NJREVCQVI1Ig0KDQoJYXJ5VGVtcGxhdGVzQ29udGVudChqKzEpPUxvYWRGcm9tRmlsZShCbG9nUGF0aCAmICJ6Yl91c2Vyc1xjYWNoZSIgJiAiXHNpZGViYXIuYXNwIiwidXRmLTgiICkNCglhcnlUZW1wbGF0ZXNDb250ZW50KGorMik9TG9hZEZyb21GaWxlKEJsb2dQYXRoICYgInpiX3VzZXJzXGNhY2hlIiAmICJcc2lkZWJhcjIuYXNwIiwidXRmLTgiKQ0KCWFyeVRlbXBsYXRlc0NvbnRlbnQoaiszKT1Mb2FkRnJvbUZpbGUoQmxvZ1BhdGggJiAiemJfdXNlcnNcY2FjaGUiICYgIlxzaWRlYmFyMy5hc3AiLCJ1dGYtOCIpDQoJYXJ5VGVtcGxhdGVzQ29udGVudChqKzQpPUxvYWRGcm9tRmlsZShCbG9nUGF0aCAmICJ6Yl91c2Vyc1xjYWNoZSIgJiAiXHNpZGViYXI0LmFzcCIsInV0Zi04IikNCglhcnlUZW1wbGF0ZXNDb250ZW50KGorNSk9TG9hZEZyb21GaWxlKEJsb2dQYXRoICYgInpiX3VzZXJzXGNhY2hlIiAmICJcc2lkZWJhcjUuYXNwIiwidXRmLTgiKQ0KDQoNCgkn5Yqg6L295qCH562+DQoJRGltIGEsYixjLGQsZSxhMixhMyxmDQoJRGltIHQoKQ0KCURpbSBzKCkNCg0KCWE9MA0KCWI9MjQNCgljPTENCglkPTM1MA0KCWU9MA0KCWEyPTANCglhMz0wDQoJZj0xDQoNCgkn6K+75Y+WVEVNUExBVEXkuIvnmoRJbmNsdWRl55uu5b2V5LiL55qE5omA5pyJ5paH5Lu25bm25YaZ5YWlQ2FjaGUNCgknRGltIGFyeUZpbGVMaXN0DQoJRGltIGFyeUZpbGVOYW1lVGVtcGxhdGVJbmNsdWRlKCkNCglEaW0gYXJ5RmlsZU5hbWVUZW1wbGF0ZUluY2x1ZGVfVmFyaWFibGUoKQ0KDQoJYXJ5RmlsZUxpc3Q9TG9hZEluY2x1ZGVGaWxlc09ubHlUeXBlKCJ6Yl91c2Vyc1x0aGVtZSIgJiAiLyIgJiBaQ19CTE9HX1RIRU1FICYgIi8iICYgIklOQ0xVREUiKQ0KDQoJSWYgSXNBcnJheShhcnlGaWxlTGlzdCkgVGhlbg0KDQoJCWU9VUJvdW5kKGFyeUZpbGVMaXN0KQ0KDQoJCUlmIGU+MCBUaGVuDQoNCgkJCVJlRGltIGFyeUZpbGVOYW1lVGVtcGxhdGVJbmNsdWRlKGUpDQoJCQlSZURpbSBhcnlGaWxlTmFtZVRlbXBsYXRlSW5jbHVkZV9WYXJpYWJsZShlKQ0KCQkJUmVEaW0gYXJ5RmlsZU5hbWVUZW1wbGF0ZUluY2x1ZGVfQ29udGVudChlKQ0KCQkJUmVEaW0gcyhlKQ0KCQkJUmVEaW0gUHJlc2VydmUgYXJ5VGVtcGxhdGVUYWdzTmFtZShlKQ0KCQkJUmVEaW0gUHJlc2VydmUgYXJ5VGVtcGxhdGVUYWdzVmFsdWUoZSkNCg0KCQkJRm9yIGk9MSB0byBlDQoNCgkJCQlhcnlGaWxlTmFtZVRlbXBsYXRlSW5jbHVkZShpKT0idGhlbWUiICYgIi8iICYgWkNfQkxPR19USEVNRSAmICIvIiAmICJJTkNMVURFIiAmICIvIiAmIGFyeUZpbGVMaXN0KGkpDQoJCQkJYXJ5RmlsZU5hbWVUZW1wbGF0ZUluY2x1ZGVfVmFyaWFibGUoaSk9IlRFTVBMQVRFX0lOQ0xVREVfIiAmIFVDYXNlKExlZnQoYXJ5RmlsZUxpc3QoaSksSW5TdHIoYXJ5RmlsZUxpc3QoaSksIi4iKS0xKSkNCgkJCQlJZiBJblN0cihhcnlGaWxlTGlzdChpKSwiLiIpPTAgVGhlbg0KCQkJCQlhcnlGaWxlTmFtZVRlbXBsYXRlSW5jbHVkZV9WYXJpYWJsZShpKT0iVEVNUExBVEVfSU5DTFVERV8iICYgVUNhc2UoYXJ5RmlsZUxpc3QoaSkpDQoJCQkJRW5kIElmDQoNCgkJCQlzKGkpPWFyeUZpbGVOYW1lVGVtcGxhdGVJbmNsdWRlX1ZhcmlhYmxlKGkpDQoNCgkJCQlzdHJDb250ZW50PSIiDQoJCQkJc3RyQ29udGVudD1Mb2FkRnJvbUZpbGUoQmxvZ1BhdGggJiAiemJfdXNlcnNcIiAmIGFyeUZpbGVOYW1lVGVtcGxhdGVJbmNsdWRlKGkpLCJ1dGYtOCIpDQoJCQkJc3RyQ29udGVudD1SZXBsYWNlKHN0ckNvbnRlbnQsIjwiJiIlPVpDX0JMT0dfSE9TVCUiJiI+IiwiPCNaQ19CTE9HX0hPU1QjPiIpDQoNCgkJCQlhcnlGaWxlTmFtZVRlbXBsYXRlSW5jbHVkZV9Db250ZW50KGkpPXN0ckNvbnRlbnQNCg0KCQkJCWFyeVRlbXBsYXRlVGFnc05hbWUoaSk9cyhpKQ0KCQkJCWFyeVRlbXBsYXRlVGFnc1ZhbHVlKGkpPWFyeUZpbGVOYW1lVGVtcGxhdGVJbmNsdWRlX0NvbnRlbnQoaSkNCgkJCU5leHQNCg0KCQlFbHNlDQoJCQllPTANCgkJRW5kIElmDQoNCglFbmQgSWYNCg0KDQoJJ+ivu+WPlkluY2x1ZGXnm67lvZXkuIvnmoTmiYDmnInmlofku7blubblhpnlhaVDYWNoZQ0KCSdEaW0gYXJ5RmlsZUxpc3QNCglEaW0gYXJ5RmlsZU5hbWVJbmNsdWRlKCkNCglEaW0gYXJ5RmlsZU5hbWVJbmNsdWRlX1ZhcmlhYmxlKCkNCglEaW0gYXJ5RmlsZU5hbWVJbmNsdWRlX0NvbnRlbnQoKQ0KDQoJYXJ5RmlsZUxpc3Q9TG9hZEluY2x1ZGVGaWxlc09ubHlUeXBlKCJ6Yl91c2Vyc1xJTkNMVURFIikNCg0KCUlmIElzQXJyYXkoYXJ5RmlsZUxpc3QpIFRoZW4NCg0KCQlhPVVCb3VuZChhcnlGaWxlTGlzdCkNCgkJDQoJCUlmIGE+MCBUaGVuDQoNCgkJCVJlRGltIGFyeUZpbGVOYW1lSW5jbHVkZShhKQ0KCQkJUmVEaW0gYXJ5RmlsZU5hbWVJbmNsdWRlX1ZhcmlhYmxlKGEpDQoJCQlSZURpbSBhcnlGaWxlTmFtZUluY2x1ZGVfQ29udGVudChhKQ0KCQkJUmVEaW0gcyhhKQ0KCQkJUmVEaW0gUHJlc2VydmUgYXJ5VGVtcGxhdGVUYWdzTmFtZShlK2EpDQoJCQlSZURpbSBQcmVzZXJ2ZSBhcnlUZW1wbGF0ZVRhZ3NWYWx1ZShlK2EpDQoNCgkJCUZvciBpPTEgdG8gYQ0KDQoJCQkJYXJ5RmlsZU5hbWVJbmNsdWRlKGkpPSJJTkNMVURFLyIgJiBhcnlGaWxlTGlzdChpKQ0KCQkJCWFyeUZpbGVOYW1lSW5jbHVkZV9WYXJpYWJsZShpKT0iQ0FDSEVfSU5DTFVERV8iICYgVUNhc2UoTGVmdChhcnlGaWxlTGlzdChpKSxJblN0cihhcnlGaWxlTGlzdChpKSwiLiIpLTEpKQ0KCQkJCUlmIEluU3RyKGFyeUZpbGVMaXN0KGkpLCIuIik9MCBUaGVuDQoJCQkJCWFyeUZpbGVOYW1lSW5jbHVkZV9WYXJpYWJsZShpKT0iQ0FDSEVfSU5DTFVERV8iICYgVUNhc2UoYXJ5RmlsZUxpc3QoaSkpDQoJCQkJRW5kIElmDQoNCgkJCQlzKGkpPWFyeUZpbGVOYW1lSW5jbHVkZV9WYXJpYWJsZShpKQ0KDQoJCQkJc3RyQ29udGVudD0iIg0KCQkJCXN0ckNvbnRlbnQ9TG9hZEZyb21GaWxlKEJsb2dQYXRoICYgInpiX3VzZXJzXCIgJiBhcnlGaWxlTmFtZUluY2x1ZGUoaSksInV0Zi04IikNCgkJCQlzdHJDb250ZW50PVJlcGxhY2Uoc3RyQ29udGVudCwiPCImIiU9WkNfQkxPR19IT1NUJSImIj4iLCI8I1pDX0JMT0dfSE9TVCM+IikNCgkJCQlhcnlGaWxlTmFtZUluY2x1ZGVfQ29udGVudChpKT1zdHJDb250ZW50DQoNCgkJCQlhcnlUZW1wbGF0ZVRhZ3NOYW1lKGUraSk9cyhpKQ0KCQkJCWFyeVRlbXBsYXRlVGFnc1ZhbHVlKGUraSk9YXJ5RmlsZU5hbWVJbmNsdWRlX0NvbnRlbnQoaSkNCg0KCQkJTmV4dA0KDQoNCgkJCWEyPWENCgkJCVJlRGltIFByZXNlcnZlIGFyeVRlbXBsYXRlVGFnc05hbWUoZSthK2EyKQ0KCQkJUmVEaW0gUHJlc2VydmUgYXJ5VGVtcGxhdGVUYWdzVmFsdWUoZSthK2EyKQ0KDQoJCQlGb3IgaT0xIHRvIGENCg0KCQkJCWFyeVRlbXBsYXRlVGFnc05hbWUoZStpK2EpPWFyeUZpbGVOYW1lSW5jbHVkZV9WYXJpYWJsZShpKSAmICJfSlMiDQoNCgkJCQlEaW0gbW9kbmFtZQ0KCQkJCW1vZG5hbWU9TENhc2UoUmVwbGFjZShhcnlGaWxlTmFtZUluY2x1ZGVfVmFyaWFibGUoaSksIkNBQ0hFX0lOQ0xVREVfIiwiIikpDQoNCgkJCQlEaW0gZnVuY3Rpb25zdHlwZQ0KDQoJCQkJU2V0IGZ1bmN0aW9uc3R5cGU9TmV3IFRNZXRhDQoJCQkJZnVuY3Rpb25zdHlwZS5Mb2FkU3RyaW5nPUxvYWRGcm9tRmlsZShCbG9nUGF0aCAmICJ6Yl91c2Vyc1xjYWNoZVxmdW5jdGlvbnN0eXBlLmFzcCIsInV0Zi04IikNCgkJCQkNCgkJCQkNCgkJCQlJZiBmdW5jdGlvbnN0eXBlLkdldFZhbHVlKG1vZG5hbWUpPSJkaXYiIFRoZW4NCgkJCQkJYXJ5VGVtcGxhdGVUYWdzVmFsdWUoZStpK2EpPSI8ZGl2IGlkPSIibW9kXyIrbW9kbmFtZSsiIiIgc3R5bGU9IiJkaXNwbGF5Om5vbmU7IiI+PHNjcmlwdCB0eXBlPSIidGV4dC9qYXZhc2NyaXB0IiI+TG9hZEZ1bmN0aW9uKCciJm1vZG5hbWUmIicpOzwvc2NyaXB0PjwvZGl2PiINCgkJCQlFbHNlDQoJCQkJCWFyeVRlbXBsYXRlVGFnc1ZhbHVlKGUraSthKT0iPGxpIGlkPSIibW9kXyIrbW9kbmFtZSsiIiIgc3R5bGU9IiJkaXNwbGF5Om5vbmU7IiI+PHNjcmlwdCB0eXBlPSIidGV4dC9qYXZhc2NyaXB0IiI+TG9hZEZ1bmN0aW9uKCciJm1vZG5hbWUmIicpOzwvc2NyaXB0PjwvbGk+Ig0KCQkJCUVuZCBJZg0KDQoJCQlOZXh0DQoNCgkJCWEzPWENCgkJCVJlRGltIFByZXNlcnZlIGFyeVRlbXBsYXRlVGFnc05hbWUoZSthK2EyK2EzKQ0KCQkJUmVEaW0gUHJlc2VydmUgYXJ5VGVtcGxhdGVUYWdzVmFsdWUoZSthK2EyK2EzKQ0KDQoJCQlGb3IgaT0xIHRvIGENCgkJCQlhcnlUZW1wbGF0ZVRhZ3NOYW1lKGUraSthK2EyKT1hcnlGaWxlTmFtZUluY2x1ZGVfVmFyaWFibGUoaSkgJiAiX0hUTUwiDQoJCQkJYXJ5VGVtcGxhdGVUYWdzVmFsdWUoZStpK2ErYTIpPWFyeUZpbGVOYW1lSW5jbHVkZV9Db250ZW50KGkpDQoJCQlOZXh0DQoNCgkJRWxzZQ0KCQkJYT0wDQoJCUVuZCBJZg0KDQoJRW5kIElmDQoNCg0KCVJlRGltIFByZXNlcnZlIGFyeVRlbXBsYXRlVGFnc05hbWUoYSthMithMytlK2QpDQoJUmVEaW0gUHJlc2VydmUgYXJ5VGVtcGxhdGVUYWdzVmFsdWUoYSthMithMytlK2QpDQoJRm9yIGo9MSB0byBkDQoJCWk9UmlnaHQoIjAwMCIgJiBDU3RyKGopLDMpDQoJCWFyeVRlbXBsYXRlVGFnc05hbWUoYSthMithMytlK2opPSJaQ19NU0ciICYgaQ0KCQlDYWxsIEV4ZWN1dGUoImFyeVRlbXBsYXRlVGFnc1ZhbHVlKGErYTIrYTMrZStqKT1aQ19NU0ciICYgaSkNCglOZXh0DQoNCg0KCVJlRGltIHQoYikNCgl0KDEpPSJaQ19CTE9HX1ZFUlNJT04iDQoJdCgyKT0iWkNfQkxPR19MQU5HVUFHRSINCgl0KDMpPSJaQ19CTE9HX1RJVExFIg0KCXQoNCk9IlpDX0JMT0dfU1VCVElUTEUiDQoJdCg1KT0iWkNfQkxPR19OQU1FIg0KCXQoNik9IlpDX0JMT0dfU1VCX05BTUUiDQoJdCg3KT0iWkNfQkxPR19USEVNRSINCgl0KDgpPSJaQ19CTE9HX0NTUyINCgl0KDkpPSJaQ19CTE9HX0NPUFlSSUdIVCINCgl0KDEwKT0iWkNfQkxPR19NQVNURVIiDQoJdCgxMSk9IlpDX0NPTlRFTlRfTUFYIg0KCXQoMTIpPSJaQ19FTU9USUNPTlNfRklMRU5BTUUiDQoJdCgxMyk9IlpDX0VNT1RJQ09OU19GSUxFU0laRSINCgl0KDE0KT0iWkNfRU1PVElDT05TX0ZJTEVUWVBFIg0KCXQoMTUpPSJaQ19HVUVTVEJPT0tfQ09OVEVOVCINCgl0KDE2KT0iWkNfQkxPR19DTFNJRCINCgl0KDE3KT0iWkNfVElNRV9aT05FIg0KCXQoMTgpPSJaQ19IT1NUX1RJTUVfWk9ORSINCgl0KDE5KT0iWkNfVkVSSUZZQ09ERV9XSURUSCINCgl0KDIwKT0iWkNfVkVSSUZZQ09ERV9IRUlHSFQiDQoJdCgyMSk9IlpDX0JMT0dfSE9TVCINCgl0KDIyKT0iWkNfQkxPR19QUk9EVUNUIg0KCXQoMjMpPSJaQ19CTE9HX1BST0RVQ1RfRlVMTCINCgl0KDI0KT0iWkNfQkxPR19QUk9EVUNUX0ZVTExIVE1MIg0KDQoJDQoJUmVEaW0gUHJlc2VydmUgYXJ5VGVtcGxhdGVUYWdzTmFtZShhK2EyK2EzK2UrZCtiKQ0KCVJlRGltIFByZXNlcnZlIGFyeVRlbXBsYXRlVGFnc1ZhbHVlKGErYTIrYTMrZStkK2IpDQoJRm9yIGo9MSB0byBiDQoJCWFyeVRlbXBsYXRlVGFnc05hbWUoYSthMithMytlK2Qraik9dChqKQ0KCQlDYWxsIEV4ZWN1dGUoImFyeVRlbXBsYXRlVGFnc1ZhbHVlKGErYTIrYTMrZStkK2opPSImIHQoaikpDQoJTmV4dA0KDQoJUmVEaW0gUHJlc2VydmUgYXJ5VGVtcGxhdGVUYWdzTmFtZShhK2EyK2EzK2UrZCtiK2MpDQoJUmVEaW0gUHJlc2VydmUgYXJ5VGVtcGxhdGVUYWdzVmFsdWUoYSthMithMytlK2QrYitjKQ0KCWFyeVRlbXBsYXRlVGFnc05hbWUoYSthMithMytlK2QrYitjKT0iQkxPR19DUkVBVEVfVElNRSINCglhcnlUZW1wbGF0ZVRhZ3NWYWx1ZShhK2EyK2EzK2UrZCtiK2MpPUdldFRpbWUoTm93KCkpDQoNCglSZURpbSBQcmVzZXJ2ZSBhcnlUZW1wbGF0ZVRhZ3NOYW1lKGErYTIrYTMrZStkK2IrYytmKQ0KCVJlRGltIFByZXNlcnZlIGFyeVRlbXBsYXRlVGFnc1ZhbHVlKGErYTIrYTMrZStkK2IrYytmKQ0KDQoJYXJ5VGVtcGxhdGVUYWdzTmFtZShhK2EyK2EzK2UrZCtiK2MrZik9IkNBQ0hFX0lOQ0xVREVfQ0FMRU5EQVJfTk9XIg0KCWFyeVRlbXBsYXRlVGFnc1ZhbHVlKGErYTIrYTMrZStkK2IrYytmKT0iIg0KDQoNCg0KCUFwcGxpY2F0aW9uLkxvY2sNCglBcHBsaWNhdGlvbihaQ19CTE9HX0NMU0lEICYgIlRFTVBMQVRFTU9ESUZJRUQiKT1DaGVja1RlbXBsYXRlTW9kaWZpZWQoKQ0KCUFwcGxpY2F0aW9uLlVuTG9jaw0KDQoJQXBwbGljYXRpb24uTG9jaw0KCUFwcGxpY2F0aW9uKFpDX0JMT0dfQ0xTSUQgJiAiU0lHTkFMX1JFTE9BRENBQ0hFIik9Ym9sUmVMb2FkQ2FjaGUNCglBcHBsaWNhdGlvbi5VbkxvY2sNCg0KDQoJVGVtcGxhdGVUYWdzRGljLlJlbW92ZUFsbA0KCVRlbXBsYXRlRGljLlJlbW92ZUFsbA0KCVRlbXBsYXRlVGFnc0RpYy5hZGQgIkJsb2dUaXRsZSIsIiINCg0KCWpqPVVCb3VuZChhcnlUZW1wbGF0ZXNOYW1lKQ0KCUZvciBpaT0xIHRvIGpqDQoJCUlmIFRlbXBsYXRlRGljLkV4aXN0cyhhcnlUZW1wbGF0ZXNOYW1lKGlpKSk9RmFsc2UgVGhlbiBUZW1wbGF0ZURpYy5BZGQgYXJ5VGVtcGxhdGVzTmFtZShpaSksIGFyeVRlbXBsYXRlc0NvbnRlbnQoaWkpDQoJTmV4dA0KDQoJamo9VUJvdW5kKGFyeVRlbXBsYXRlVGFnc05hbWUpDQoJRm9yIGlpPTEgdG8gamoNCgkJSWYgVGVtcGxhdGVUYWdzRGljLkV4aXN0cyhhcnlUZW1wbGF0ZVRhZ3NOYW1lKGlpKSk9RmFsc2UgVGhlbiBUZW1wbGF0ZVRhZ3NEaWMuQWRkIGFyeVRlbXBsYXRlVGFnc05hbWUoaWkpLCBhcnlUZW1wbGF0ZVRhZ3NWYWx1ZShpaSkNCglOZXh0DQoNCglDYWxsIExvYWREZWZhdWx0VGVtcGxhdGVzKCkNCg0KDQoJQXBwbGljYXRpb24uTG9jaw0KCUFwcGxpY2F0aW9uKFpDX0JMT0dfQ0xTSUQgJiAiVGVtcGxhdGVUYWdzTmFtZSIpPVRlbXBsYXRlVGFnc0RpYy5LZXlzDQoJQXBwbGljYXRpb24oWkNfQkxPR19DTFNJRCAmICJUZW1wbGF0ZVRhZ3NWYWx1ZSIpPVRlbXBsYXRlVGFnc0RpYy5JdGVtcw0KDQoNCglBcHBsaWNhdGlvbihaQ19CTE9HX0NMU0lEICYgIlRlbXBsYXRlc05hbWUiKT1UZW1wbGF0ZURpYy5LZXlzDQoJQXBwbGljYXRpb24oWkNfQkxPR19DTFNJRCAmICJUZW1wbGF0ZXNDb250ZW50Iik9VGVtcGxhdGVEaWMuSXRlbXMNCg0KCUFwcGxpY2F0aW9uLlVuTG9jaw0KDQoNCglTZXQgVGVtcGxhdGVzTmFtZT1Ob3RoaW5nDQoJU2V0IFRlbXBsYXRlc0NvbnRlbnQ9Tm90aGluZw0KDQoJU2V0IFRlbXBsYXRlVGFnc05hbWU9Tm90aGluZw0KCVNldCBUZW1wbGF0ZVRhZ3NWYWx1ZT1Ob3RoaW5nDQoNCglMb2FkR2xvYmVDYWNoZT1UcnVlDQoNCkVuZCBGdW5jdGlvbg0KJyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KDQoNCg0KDQonKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqDQonIOebrueahO+8miAgICBDbGVhciBDYWNoZQ0KJyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KRnVuY3Rpb24gQ2xlYXJHbG9iZUNhY2hlKCkNCg0KCUFwcGxpY2F0aW9uLkxvY2sNCg0KDQoJQXBwbGljYXRpb24oWkNfQkxPR19DTFNJRCAmICJUZW1wbGF0ZVRhZ3NOYW1lIik9RW1wdHkNCglBcHBsaWNhdGlvbihaQ19CTE9HX0NMU0lEICYgIlRlbXBsYXRlVGFnc1ZhbHVlIik9RW1wdHkNCg0KCUFwcGxpY2F0aW9uKFpDX0JMT0dfQ0xTSUQgJiAiVGVtcGxhdGVzTmFtZSIpPUVtcHR5DQoJQXBwbGljYXRpb24oWkNfQkxPR19DTFNJRCAmICJUZW1wbGF0ZXNDb250ZW50Iik9RW1wdHkNCg0KDQoJQXBwbGljYXRpb24oWkNfQkxPR19DTFNJRCAmICJTSUdOQUxfUkVMT0FEQ0FDSEUiKT1FbXB0eQ0KDQoJQXBwbGljYXRpb24oWkNfQkxPR19DTFNJRCAmICJURU1QTEFURU1PRElGSUVEIik9RW1wdHkNCg0KCUFwcGxpY2F0aW9uKFpDX0JMT0dfQ0xTSUQgJiAiQ0FDSEVfQVJUSUNMRV9WSUVXQ09VTlQiKT1FbXB0eQ0KDQoJQXBwbGljYXRpb24uVW5Mb2NrDQoNCglDbGVhckdsb2JlQ2FjaGU9VHJ1ZQ0KDQpFbmQgRnVuY3Rpb24NCicqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioNCg0KDQoNCg0KJyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KJyDnm67nmoTvvJogICAgUGFyc2UgVGFnIOW5tuagvOW8j+WMlg0KJyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KRnVuY3Rpb24gUGFyc2VUYWcoc3RyVGFnKQ0KDQoJRGltIHMNCglEaW0gdA0KCURpbSBpDQoJRGltIFRhZw0KCURpbSBiDQoJRGltIG9ialRhZw0KDQoJc3RyVGFnPVRyaW0oc3RyVGFnKQ0KCXN0clRhZz1SZXBsYWNlKHN0clRhZywi77yMIiwiLCIpDQoJc3RyVGFnPVRyYW5zZmVySFRNTChzdHJUYWcsIltub3JtYWx0YWddIikNCg0KCUlmIHN0clRhZz0iIiBUaGVuIFBhcnNlVGFnPSIiOkV4aXQgRnVuY3Rpb24NCg0KCXQ9U3BsaXQoc3RyVGFnLCIsIikNCg0KCUNhbGwgR2V0VGFnc2J5VGFnTmFtZUxpc3Qoc3RyVGFnKQ0KDQoJRm9yIGk9TEJvdW5kKHQpIFRvIFVCb3VuZCh0KQ0KCQl0KGkpPVRyaW0odChpKSkNCglOZXh0DQoNCglGb3IgaT1MQm91bmQodCkgVG8gVUJvdW5kKHQpDQoNCgkJYj1GYWxzZQ0KDQoJCUZvciBFYWNoIFRhZyBpbiBUYWdzDQoJCQlJZiBJc09iamVjdChUYWcpIFRoZW4NCgkJCQlJZiBVQ2FzZShUYWcuTmFtZSk9VUNhc2UodChpKSkgVGhlbg0KCQkJCQliPVRydWUNCgkJCQlFbmQgSWYNCgkJCUVuZCBJZg0KCQlOZXh0DQoNCgkJSWYgYj1GYWxzZSBUaGVuDQoJCQlTZXQgb2JqVGFnPU5ldyBUVGFnDQoJCQlvYmpUYWcuSUQ9MA0KCQkJb2JqVGFnLk5hbWU9dChpKQ0KCQkJb2JqVGFnLk9yZGVyPTANCgkJCW9ialRhZy5JbnRybz0iIg0KCQkJSWYgb2JqVGFnLlBvc3QgVGhlbg0KCQkJCVJlRGltIFByZXNlcnZlIFRhZ3Mob2JqVGFnLklEKQ0KCQkJCVNldCBUYWdzKG9ialRhZy5JRCk9b2JqVGFnDQoJCQlFbmQgSWYNCgkJCVNldCBvYmpUYWc9Tm90aGluZw0KCQlFbmQgSWYNCg0KCU5leHQNCg0KCUZvciBpPUxCb3VuZCh0KSBUbyBVQm91bmQodCkNCgkJRm9yIEVhY2ggVGFnIGluIFRhZ3MNCgkJCUlmIElzT2JqZWN0KFRhZykgVGhlbg0KCQkJCUlmIFVDYXNlKFRhZy5OYW1lKT1VQ2FzZSh0KGkpKSBUaGVuDQoJCQkJCXQoaSk9InsiJlRhZy5JRCYifSINCgkJCQlFbmQgSWYNCgkJCUVuZCBJZg0KCQlOZXh0DQoJTmV4dA0KDQoJcz1Kb2luKHQpDQoJcz1SZXBsYWNlKHMsIiAiLCIiKQ0KDQoJUGFyc2VUYWc9cw0KDQpFbmQgRnVuY3Rpb24NCicqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioNCg0KDQoNCg0KJyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KJyDnm67nmoTvvJogICAg5b6X5Yiw5a6e6ZmF5LiK55qEQkxPR+eahOecn+WunueJqeeQhuebruW9lQ0KJyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KRnVuY3Rpb24gR2V0UmVhbGx5RGlyZWN0b3J5KCkNCg0KCUlmIEN1cnJlbnRSZWFsbHlEaXJlY3Rvcnk8PiIiIFRoZW4NCgkJR2V0UmVhbGx5RGlyZWN0b3J5PUN1cnJlbnRSZWFsbHlEaXJlY3RvcnkNCgkJRXhpdCBGdW5jdGlvbg0KCUVuZCBJZg0KDQoJSWYgTm90IElzT2JqZWN0KFB1YmxpY09iakZTTykgVGhlbiBTZXQgUHVibGljT2JqRlNPPVNlcnZlci5DcmVhdGVPYmplY3QoIlNjcmlwdGluZy5GaWxlU3lzdGVtT2JqZWN0IikNCg0KCURpbSBwCQ0KCXA9U2VydmVyLk1hcFBhdGgoIi4iKSAmICJcIg0KDQoJSWYgUHVibGljT2JqRlNPLkZvbGRlckV4aXN0cyhwICYgIlpCX1NZU1RFTVwiKSBUaGVuDQoJCXA9cA0KCUVsc2VJZiBQdWJsaWNPYmpGU08uRm9sZGVyRXhpc3RzKHAgJiAiLi5cWkJfU1lTVEVNXCIpIFRoZW4NCgkJcD1wICYgIi4uXCINCglFbHNlSWYgUHVibGljT2JqRlNPLkZvbGRlckV4aXN0cyhwICYgIi4uXC4uXFpCX1NZU1RFTVwiKSBUaGVuDQoJCXA9cCAmICIuLlwuLlwiDQoJRWxzZUlmIFB1YmxpY09iakZTTy5Gb2xkZXJFeGlzdHMocCAmICIuLlwuLlwuLlxaQl9TWVNURU1cIikgVGhlbg0KCQlwPXAgJiAiLi5cLi5cLi5cIg0KCUVsc2VJZiBQdWJsaWNPYmpGU08uRm9sZGVyRXhpc3RzKHAgJiAiLi5cLi5cLi5cLi5cWkJfU1lTVEVNXCIpIFRoZW4NCgkJcD1wICYgIi4uXC4uXC4uXC4uXCINCglFbHNlSWYgUHVibGljT2JqRlNPLkZvbGRlckV4aXN0cyhwICYgIi4uXC4uXC4uXC4uXC4uXFpCX1NZU1RFTVwiKSBUaGVuDQoJCXA9cCAmICIuLlwuLlwuLlwuLlwuLlwiDQoJRWxzZUlmIFB1YmxpY09iakZTTy5Gb2xkZXJFeGlzdHMocCAmICIuLlwuLlwuLlwuLlwuLlwuLlxaQl9TWVNURU1cIikgVGhlbg0KCQlwPXAgJiAiLi5cLi5cLi5cLi5cLi5cLi5cIg0KCUVsc2VJZiBQdWJsaWNPYmpGU08uRm9sZGVyRXhpc3RzKHAgJiAiLi5cLi5cLi5cLi5cLi5cLi5cLi5cWkJfU1lTVEVNXCIpIFRoZW4NCgkJcD1wICYgIi4uXC4uXC4uXC4uXC4uXC4uXC4uXCINCglFbmQgSWYNCglTZXQgZnNvPU5vdGhpbmcNCg0KCUdldFJlYWxseURpcmVjdG9yeT1QdWJsaWNPYmpGU08uR2V0Rm9sZGVyKHApLlBhdGggJiAiXCINCg0KCSdFcnIuQ2xlYXINCg0KRW5kIEZ1bmN0aW9uDQonKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqDQoNCg0KDQoNCicqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioNCicg55uu55qE77yaICAgIOiuvue9ruaPkOekuuagh+W/lw0KJyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KRnVuY3Rpb24gU2V0QmxvZ0hpbnQoYm9sT3BlcmF0ZVN1Y2Nlc3MsYm9sUmVidWlsZEluZGV4LGJvbFJlYnVpbGRGaWxlcykNCg0KCUNhbGwgU2V0QmxvZ0hpbnRXaXRoQ0xTSUQoYm9sT3BlcmF0ZVN1Y2Nlc3MsYm9sUmVidWlsZEluZGV4LGJvbFJlYnVpbGRGaWxlcyxaQ19CTE9HX0NMU0lEKQ0KDQpFbmQgRnVuY3Rpb24NCicqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioNCg0KDQoNCg0KJyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KJyDnm67nmoTvvJogICAg6K6+572u5o+Q56S66Ieq5a6a5LmJ5qCH5b+XDQonKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqDQpGdW5jdGlvbiBTZXRCbG9nSGludF9DdXN0b20oc3RySW5mbykNCg0KCUFwcGxpY2F0aW9uLkxvY2sNCg0KCUFwcGxpY2F0aW9uKFpDX0JMT0dfQ0xTSUQgJiBCbG9nVXNlci5JRCAmICJTSUdOQUxfT1BFUkFURUlORk8iKT1BcHBsaWNhdGlvbihaQ19CTE9HX0NMU0lEICYgQmxvZ1VzZXIuSUQgJiAiU0lHTkFMX09QRVJBVEVJTkZPIikgJiB2YkNybGYgJiAgc3RySW5mbw0KDQoJQXBwbGljYXRpb24uVW5Mb2NrDQoNCkVuZCBGdW5jdGlvbg0KJyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KDQoNCg0KDQonKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqDQonIOebrueahO+8miAgICDorr7nva7mj5DnpLrmoIflv5d3aXRoQ0xTSUQNCicqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioNCkZ1bmN0aW9uIFNldEJsb2dIaW50V2l0aENMU0lEKGJvbE9wZXJhdGVTdWNjZXNzLGJvbFJlYnVpbGRJbmRleCxib2xSZWJ1aWxkRmlsZXMsbmV3Q0xTSUQpDQoNCglBcHBsaWNhdGlvbi5Mb2NrDQoNCglBcHBsaWNhdGlvbihuZXdDTFNJRCAgJiBCbG9nVXNlci5JRCAmICJTSUdOQUxfT1BFUkFURVNVQ0NFU1MiKT1ib2xPcGVyYXRlU3VjY2Vzcw0KDQoJSWYgSXNFbXB0eShib2xSZWJ1aWxkSW5kZXgpPUZhbHNlIFRoZW4NCgkJQXBwbGljYXRpb24obmV3Q0xTSUQgJiAiU0lHTkFMX1JFQlVJTERJTkRFWCIpPWJvbFJlYnVpbGRJbmRleA0KCUVuZCBJZg0KDQoJSWYgSXNFbXB0eShib2xSZWJ1aWxkRmlsZXMpPUZhbHNlIFRoZW4NCgkJQXBwbGljYXRpb24obmV3Q0xTSUQgJiAiU0lHTkFMX1JFQlVJTERGSUxFUyIpPWJvbFJlYnVpbGRGaWxlcw0KCUVuZCBJZg0KDQoJQXBwbGljYXRpb24uVW5Mb2NrDQoNCkVuZCBGdW5jdGlvbg0KJyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KDQoNCg0KDQonKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqDQonIOebrueahO+8miAgICDovpPlh7rmj5DnpLoNCicqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioNCkZ1bmN0aW9uIEdldEJsb2dIaW50KCkNCg0KCURpbSBib2xPcGVyYXRlU3VjY2Vzcyxib2xSZWJ1aWxkSW5kZXgsYm9sUmVidWlsZEZpbGVzLHN0ck9wZXJhdGVJbmZvDQoNCglBcHBsaWNhdGlvbi5Mb2NrDQoJYm9sT3BlcmF0ZVN1Y2Nlc3M9QXBwbGljYXRpb24oWkNfQkxPR19DTFNJRCAmIEJsb2dVc2VyLklEICYgIlNJR05BTF9PUEVSQVRFU1VDQ0VTUyIpDQoJYm9sUmVidWlsZEluZGV4PUFwcGxpY2F0aW9uKFpDX0JMT0dfQ0xTSUQgJiAiU0lHTkFMX1JFQlVJTERJTkRFWCIpDQoJYm9sUmVidWlsZEZpbGVzPUFwcGxpY2F0aW9uKFpDX0JMT0dfQ0xTSUQgJiAiU0lHTkFMX1JFQlVJTERGSUxFUyIpDQoJc3RyT3BlcmF0ZUluZm89QXBwbGljYXRpb24oWkNfQkxPR19DTFNJRCAmIEJsb2dVc2VyLklEICYgIlNJR05BTF9PUEVSQVRFSU5GTyIpDQoJQXBwbGljYXRpb24oWkNfQkxPR19DTFNJRCAmIEJsb2dVc2VyLklEICYgIlNJR05BTF9PUEVSQVRFSU5GTyIpPUVtcHR5DQoJQXBwbGljYXRpb24uVW5Mb2NrDQoNCg0KCUlmIElzRW1wdHkoYm9sT3BlcmF0ZVN1Y2Nlc3MpPUZhbHNlIFRoZW4NCg0KCQlJZiBib2xPcGVyYXRlU3VjY2Vzcz1UcnVlIFRoZW4NCgkJCVJlc3BvbnNlLldyaXRlICI8ZGl2IGNsYXNzPSdoaW50Jz48cCBjbGFzcz0naGludCBoaW50X2dyZWVuJz48Zm9udCBjb2xvcj0nZ3JlZW4nPiIgJiBaQ19NU0cyNjYgJiAiPC9mb250PjwvcD48L2Rpdj4iDQoJCUVuZCBJZg0KDQoJCUlmIGJvbE9wZXJhdGVTdWNjZXNzPUZhbHNlIFRoZW4NCgkJCVJlc3BvbnNlLldyaXRlICI8ZGl2IGNsYXNzPSdoaW50Jz48cCBjbGFzcz0naGludCBoaW50X3JlZCc+PGZvbnQgY29sb3I9J3JlZCc+IiAmIFpDX01TRzI2NyAmICI8L2ZvbnQ+PC9wPjwvZGl2PiINCgkJRW5kIElmDQoNCgkJQXBwbGljYXRpb24uTG9jaw0KCQlBcHBsaWNhdGlvbihaQ19CTE9HX0NMU0lEICYgQmxvZ1VzZXIuSUQgJiAiU0lHTkFMX09QRVJBVEVTVUNDRVNTIik9RW1wdHkNCgkJQXBwbGljYXRpb24uVW5Mb2NrDQoNCglFbmQgSWYNCg0KCUlmIElzRW1wdHkoc3RyT3BlcmF0ZUluZm8pPUZhbHNlIFRoZW4NCg0KCQlEaW0gcyx0DQoJCXQ9U3BsaXQoc3RyT3BlcmF0ZUluZm8sdmJDcmxmKQ0KDQoJCUZvciBFYWNoIHMgSW4gdA0KCQkJSWYgczw+IiIgVGhlbg0KCQkJUmVzcG9uc2UuV3JpdGUgIjxkaXYgY2xhc3M9J2hpbnQnPjxwIGNsYXNzPSdoaW50IGhpbnRfdGVhbCc+PGZvbnQgY29sb3I9J29yYW5nZXJlZCc+IiAmIHMgJiAiPC9mb250PjwvcD48L2Rpdj4iDQoJCQlFbmQgSWYNCgkJTmV4dA0KDQoJRW5kIElmDQoNCg0KCUlmIElzRW1wdHkoYm9sUmVidWlsZEluZGV4KT1GYWxzZSBUaGVuDQoNCgkJSWYgYm9sUmVidWlsZEluZGV4PVRydWUgVGhlbg0KCQkJUmVzcG9uc2UuV3JpdGUgIjxkaXYgY2xhc3M9J2hpbnQnPjxwIGNsYXNzPSdoaW50IGhpbnRfYmx1ZSc+PGZvbnQgY29sb3I9J2JsdWUnPiIgJiBaQ19NU0cyNjggJiAiPC9mb250PjwvcD48L2Rpdj4iDQoJCUVuZCBJZg0KDQoJRW5kIElmDQoNCglJZiBJc0VtcHR5KGJvbFJlYnVpbGRGaWxlcyk9RmFsc2UgVGhlbg0KDQoJCUlmIGJvbFJlYnVpbGRGaWxlcz1UcnVlIFRoZW4NCgkJCVJlc3BvbnNlLldyaXRlICI8ZGl2IGNsYXNzPSdoaW50Jz48cCBjbGFzcz0naGludCBoaW50X2JsdWUnPjxmb250IGNvbG9yPSdibHVlJz4iICYgUmVwbGFjZShaQ19NU0cyNjksIiV1IixCbG9nSG9zdCYiemJfc3lzdGVtL2NtZC5hc3A/YWN0PUFza0ZpbGVSZUJ1aWxkIikgJiAiPC9mb250PjwvcD48L2Rpdj4iDQoJCUVuZCBJZg0KDQoJRW5kIElmDQoNCg0KRW5kIEZ1bmN0aW9uDQonKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqDQoNCg0KDQoNCicqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioNCicg55uu55qE77yaICAgIOino+aekCBSRUdFWCBGb3IgUGF0aA0KJyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KRnVuY3Rpb24gUGFyc2VDdXN0b21EaXJlY3RvcnlGb3JQYXRoKHN0clJlZ2V4LHN0clBvc3Qsc3RyQ2F0ZWdvcnksc3RyVXNlcixzdHJZZWFyLHN0ck1vbnRoLHN0ckRheSxzdHJJRCxzdHJOYW1lLHN0ckFsaWFzKQ0KCURpbSBzDQoJcz1QYXJzZUN1c3RvbURpcmVjdG9yeShzdHJSZWdleCxzdHJQb3N0LHN0ckNhdGVnb3J5LHN0clVzZXIsc3RyWWVhcixzdHJNb250aCxzdHJEYXksc3RySUQsc3RyTmFtZSxzdHJBbGlhcykNCglzPVJlcGxhY2UocywieyVob3N0JX0iLExlZnQoQmxvZ1BhdGgsTGVuKEJsb2dQYXRoKS0xKSkNCglQYXJzZUN1c3RvbURpcmVjdG9yeUZvclBhdGg9UmVwbGFjZShzLCIvIiwiXCIpDQpFbmQgRnVuY3Rpb24NCicqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioNCg0KDQoNCg0KJyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KJyDnm67nmoTvvJogICAg6Kej5p6QIFJFR0VYIEZvciBVcmwNCicqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioNCkZ1bmN0aW9uIFBhcnNlQ3VzdG9tRGlyZWN0b3J5Rm9yVXJsKHN0clJlZ2V4LHN0clBvc3Qsc3RyQ2F0ZWdvcnksc3RyVXNlcixzdHJZZWFyLHN0ck1vbnRoLHN0ckRheSxzdHJJRCxzdHJOYW1lLHN0ckFsaWFzKQ0KCURpbSBzDQoJcz1QYXJzZUN1c3RvbURpcmVjdG9yeShzdHJSZWdleCxzdHJQb3N0LHN0ckNhdGVnb3J5LHN0clVzZXIsc3RyWWVhcixzdHJNb250aCxzdHJEYXksc3RySUQsc3RyTmFtZSxzdHJBbGlhcykNCglzPVJlcGxhY2UocywieyVob3N0JX0iLExlZnQoQmxvZ0hvc3QsTGVuKEJsb2dIb3N0KS0xKSkNCglQYXJzZUN1c3RvbURpcmVjdG9yeUZvclVybD1SZXBsYWNlKHMsIlwiLCIvIikNCkVuZCBGdW5jdGlvbg0KJyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KDQoNCg0KDQonKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqDQonIOebrueahO+8miAgICDop6PmnpBaQ19DVVNUT01fRElSRUNUT1JZX1JFR0VYDQonKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqDQpGdW5jdGlvbiBQYXJzZUN1c3RvbURpcmVjdG9yeShzdHJSZWdleCxzdHJQb3N0LHN0ckNhdGVnb3J5LHN0clVzZXIsc3RyWWVhcixzdHJNb250aCxzdHJEYXksc3RySUQsc3RyTmFtZSxzdHJBbGlhcykNCg0KCU9uIEVycm9yIFJlc3VtZSBOZXh0DQoNCglEaW0gcyxkDQoJcz1zdHJSZWdleA0KDQoJZD1zdHJZZWFyDQoJSWYgc3RyTW9udGg8PiIiIFRoZW4NCgkJZD1kICYgIi0iICYgUmlnaHQoIjAiICYgc3RyTW9udGgsMikNCglFbmQgSWYNCglJZiBzdHJEYXk8PiIiIFRoZW4NCgkJZD1kICYgIi0iICYgUmlnaHQoIjAiICYgc3RyRGF5LDIpDQoJRW5kIElmDQoNCglzPVJlcGxhY2UocywieyVwb3N0JX0iLHN0clBvc3QpDQoJcz1SZXBsYWNlKHMsInslY2F0ZWdvcnklfSIsc3RyQ2F0ZWdvcnkpDQoJcz1SZXBsYWNlKHMsInslYXV0aG9yJX0iLHN0clVzZXIpDQoJcz1SZXBsYWNlKHMsInsleWVhciV9IixzdHJZZWFyKQ0KCXM9UmVwbGFjZShzLCJ7JW1vbnRoJX0iLFJpZ2h0KCIwIiAmIHN0ck1vbnRoLDIpKQ0KCXM9UmVwbGFjZShzLCJ7JWRheSV9IixSaWdodCgiMCIgJiBzdHJEYXksMikpDQoJcz1SZXBsYWNlKHMsInslaWQlfSIsc3RySUQpDQoJcz1SZXBsYWNlKHMsInslYWxpYXMlfSIsc3RyQWxpYXMpDQoJcz1SZXBsYWNlKHMsInslbmFtZSV9IixzdHJOYW1lKQ0KCXM9UmVwbGFjZShzLCJ7JWRhdGUlfSIsZCkNCg0KCVBhcnNlQ3VzdG9tRGlyZWN0b3J5PXMNCg0KCUVyci5DbGVhcg0KDQpFbmQgRnVuY3Rpb24NCicqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioNCg0KDQoNCg0KJyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KJyDnm67nmoTvvJogICAg5oyJ54WnQ3VzdG9tRGlyZWN0b3J55oyH56S65Yib5bu655u45bqU55qE55uu5b2VDQonKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqDQpTdWIgQ3JlYXREaXJlY3RvcnlCeUN1c3RvbURpcmVjdG9yeVdpdGhGdWxsQmxvZ1BhdGgoQnlWYWwgc3RyQ3VzdG9tRGlyZWN0b3J5KQ0KDQoJT24gRXJyb3IgUmVzdW1lIE5leHQNCg0KCUlmIE5vdCBJc09iamVjdChQdWJsaWNPYmpGU08pIFRoZW4gU2V0IFB1YmxpY09iakZTTz1TZXJ2ZXIuQ3JlYXRlT2JqZWN0KCJTY3JpcHRpbmcuRmlsZVN5c3RlbU9iamVjdCIpDQoJDQoJRGltIHMNCglEaW0gdA0KCURpbSBpDQoJRGltIGoNCg0KCXM9QmxvZ1BhdGgNCg0KCXN0ckN1c3RvbURpcmVjdG9yeT1SZXBsYWNlKHN0ckN1c3RvbURpcmVjdG9yeSwiLyIsIlwiKQ0KDQoJc3RyQ3VzdG9tRGlyZWN0b3J5PVJpZ2h0KHN0ckN1c3RvbURpcmVjdG9yeSxMZW4oc3RyQ3VzdG9tRGlyZWN0b3J5KS1MZW4oQmxvZ1BhdGgpKQ0KDQoJdD1TcGxpdChzdHJDdXN0b21EaXJlY3RvcnksIlwiKQ0KDQoJRm9yIGk9TEJvdW5kKHQpIFRvIFVCb3VuZCh0KS0xDQoJCUlmIChJc0VtcHR5KHQoaSkpPUZhbHNlKSBBbmQgKHQoaSk8PiIiKSBUaGVuDQoJCQlzPXMgJiB0KGkpICYgIlwiDQoJCQlJZiAoUHVibGljT2JqRlNPLkZvbGRlckV4aXN0cyhzKT1GYWxzZSkgVGhlbg0KCQkJCUNhbGwgUHVibGljT2JqRlNPLkNyZWF0ZUZvbGRlcihzKQ0KCQkJRW5kIElmDQoJCUVuZCBJZg0KCU5leHQNCg0KDQoJRXJyLkNsZWFyDQoNCkVuZCBTdWINCicqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioNCg0KDQoNCg0KDQoNCicqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioNCicg55uu55qE77yaICAgIOaMieeFp0N1c3RvbURpcmVjdG9yeeaMh+ekuuWIm+W7uuebuOW6lOeahOebruW9lQ0KJyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KU3ViIENyZWF0RGlyZWN0b3J5QnlDdXN0b21EaXJlY3RvcnkoQnlWYWwgc3RyQ3VzdG9tRGlyZWN0b3J5KQ0KDQoJT24gRXJyb3IgUmVzdW1lIE5leHQNCg0KCUlmIE5vdCBJc09iamVjdChQdWJsaWNPYmpGU08pIFRoZW4gU2V0IFB1YmxpY09iakZTTz1TZXJ2ZXIuQ3JlYXRlT2JqZWN0KCJTY3JpcHRpbmcuRmlsZVN5c3RlbU9iamVjdCIpDQoJDQoJRGltIHMNCglEaW0gdA0KCURpbSBpDQoJRGltIGoNCg0KCXM9QmxvZ1BhdGgNCg0KCXN0ckN1c3RvbURpcmVjdG9yeT1SZXBsYWNlKHN0ckN1c3RvbURpcmVjdG9yeSwiLyIsIlwiKQ0KDQoJdD1TcGxpdChzdHJDdXN0b21EaXJlY3RvcnksIlwiKQ0KDQoJaj0wDQoJRm9yIGk9TEJvdW5kKHQpIFRvIFVCb3VuZCh0KQ0KCQlJZiAoSXNFbXB0eSh0KGkpKT1GYWxzZSkgQW5kICh0KGkpPD4iIikgVGhlbg0KCQkJcz1zICYgdChpKSAmICJcIg0KCQkJSWYgKFB1YmxpY09iakZTTy5Gb2xkZXJFeGlzdHMocyk9RmFsc2UpIFRoZW4NCgkJCQlDYWxsIFB1YmxpY09iakZTTy5DcmVhdGVGb2xkZXIocykNCgkJCUVuZCBJZg0KCQkJaj1qKzENCgkJRW5kIElmDQoJTmV4dA0KDQoJDQoNCglFcnIuQ2xlYXINCg0KRW5kIFN1Yg0KJyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KDQoNCg0KDQonKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqDQonIOebrueahO+8miAg55Sf5oiQ5bem5L6n5a+86Iiq5qCPDQonKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqDQpEaW0gQWRtaW5MZWZ0TWVudUNvdW50DQpBZG1pbkxlZnRNZW51Q291bnQ9MA0KRnVuY3Rpb24gTWFrZUxlZnRNZW51KHJlcXVpcmVMZXZlbCxzdHJOYW1lLHN0clVybCxzdHJMaUlkLHN0ckFJZCxzdHJJbWdVcmwpDQoNCglJZiBCbG9nVXNlci5MZXZlbD5yZXF1aXJlTGV2ZWwgVGhlbiBFeGl0IEZ1bmN0aW9uDQoNCglBZG1pbkxlZnRNZW51Q291bnQ9QWRtaW5MZWZ0TWVudUNvdW50KzENCglkaW0gdG1wDQoJSWYgVHJpbShzdHJJbWdVcmwpPD4iIiBUaGVuDQoJCXRtcD0iPGxpIGlkPSIiIiZzdHJMaUlkJiIiIj48YSBpZD0iIiImc3RyQUlkJiIiIiBocmVmPSIiIiZzdHJVcmwmIiIiPjxzcGFuIHN0eWxlPSIiYmFja2dyb3VuZC1pbWFnZTp1cmwoJyImc3RySW1nVXJsJiInKSIiPiImc3RyTmFtZSYiPC9zcGFuPjwvYT48L2xpPiINCglFbHNlDQoJCXRtcD0iPGxpIGlkPSIiIiZzdHJMaUlkJiIiIj48YSBpZD0iIiImc3RyQUlkJiIiIiBocmVmPSIiIiZzdHJVcmwmIiIiPjxzcGFuPiImc3RyTmFtZSYiPC9zcGFuPjwvYT48L2xpPiINCglFbmQgSWYNCglNYWtlTGVmdE1lbnU9dG1wDQoJDQpFbmQgRnVuY3Rpb24NCicqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioNCg0KDQoNCg0KJyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KJyDnm67nmoTvvJogIOeUn+aIkOWktOmDqOiPnOWNlQ0KJyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KRGltIEFkbWluVG9wTWVudUNvdW50DQpBZG1pblRvcE1lbnVDb3VudD0wDQpGdW5jdGlvbiBNYWtlVG9wTWVudShyZXF1aXJlTGV2ZWwsc3RyTmFtZSxzdHJVcmwsc3RyTGlJZCxzdHJUYXJnZXQpDQoNCglJZiBCbG9nVXNlci5MZXZlbD5yZXF1aXJlTGV2ZWwgVGhlbiBFeGl0IEZ1bmN0aW9uDQoNCglEaW0gdG1wDQoJSWYgc3RyVGFyZ2V0PSIiIFRoZW4gc3RyVGFyZ2V0PSJfc2VsZiINCglBZG1pblRvcE1lbnVDb3VudD1BZG1pblRvcE1lbnVDb3VudCsxDQoJSWYgc3RyTGlJZD0iIiBUaGVuIHN0ckxpSWQ9InRvcG1lbnUiJkFkbWluVG9wTWVudUNvdW50DQoJdG1wPSI8bGkgaWQ9IiIiJnN0ckxpSWQmIiIiPjxhIGhyZWY9IiIiJnN0clVybCYiIiIgdGFyZ2V0PSIiIiZzdHJUYXJnZXQmIiIiPiImc3RyTmFtZSYiPC9hPjwvbGk+Ig0KCU1ha2VUb3BNZW51PXRtcA0KRW5kIEZ1bmN0aW9uDQonKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqDQoNCg0KDQoNCicqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioNCicg55uu55qE77yaIOWKoOWFpeS6jOe6p+iPnOWNlemhuQ0KJyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KRnVuY3Rpb24gTWFrZVN1Yk1lbnUoc3RyTmFtZSxzdHJVcmwsc3RyVHlwZSxpc05ld1dpbmRvd3MpDQoNCglEaW0gc3RyU291cmNlDQoNCglzdHJTb3VyY2U9c3RyU291cmNlICYgIjxhICIgJiAiaHJlZj0iIiIgJiBzdHJVcmwgICYgIiIiIg0KDQoJSWYgaXNOZXdXaW5kb3dzPVRydWUgVGhlbiBzdHJTb3VyY2U9c3RyU291cmNlICYgIiB0YXJnZXQ9IiJfYmxhbmsiIiINCg0KCXN0clNvdXJjZT1zdHJTb3VyY2UgJiAiPiIgJiAiPHNwYW4gY2xhc3M9IiIiICYgc3RyVHlwZSAmICIiIj4iDQoNCg0KCXN0clNvdXJjZT1zdHJTb3VyY2UgJiBzdHJOYW1lDQoNCglzdHJTb3VyY2U9c3RyU291cmNlICYgIjwvc3Bhbj48L2E+Ig0KDQoJTWFrZVN1Yk1lbnU9c3RyU291cmNlDQoNCkVuZCBGdW5jdGlvbg0KJyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KDQoNCg0KDQonKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqDQonIOebrueahO+8miDms6jlhozmj5Lku7blh73mlbANCicqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioNCkZ1bmN0aW9uIFJlZ2lzdGVyUGx1Z2luKHN0clBsdWdpbk5hbWUsc3RyUGx1Z2luQWN0aXZlRnVuY3Rpb24pDQoNCglEaW0gaQ0KCWk9VUJvdW5kKFBsdWdpbk5hbWUpDQoNCglSZURpbSBQcmVzZXJ2ZSBQbHVnaW5OYW1lKGkrMSkNCglSZURpbSBQcmVzZXJ2ZSBQbHVnaW5BY3RpdmVGdW5jdGlvbihpKzEpDQoNCglQbHVnaW5OYW1lKGkpPXN0clBsdWdpbk5hbWUNCglQbHVnaW5BY3RpdmVGdW5jdGlvbihpKT1zdHJQbHVnaW5BY3RpdmVGdW5jdGlvbg0KDQpFbmQgRnVuY3Rpb24NCicqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioNCg0KDQoNCg0KJyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KJyDnm67nmoTvvJog5r+A5rS75o+S5Lu25Ye95pWwDQonKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqDQpEaW0gSXNSdW5BY3RpdmVQbHVnaW4NCkZ1bmN0aW9uIEFjdGl2ZVBsdWdpbigpDQoNCglJZiBJc1J1bkFjdGl2ZVBsdWdpbj1UcnVlIFRoZW4gRXhpdCBGdW5jdGlvbg0KDQoJT24gRXJyb3IgUmVzdW1lIE5leHQNCg0KCURpbSBpDQoJRm9yIGk9MCBUbyBVQm91bmQoUGx1Z2luQWN0aXZlRnVuY3Rpb24pLTENCg0KCQlDYWxsIEV4ZWN1dGUoUGx1Z2luQWN0aXZlRnVuY3Rpb24oaSkpDQoNCglOZXh0DQoNCglFcnIuQ2xlYXINCg0KCUlzUnVuQWN0aXZlUGx1Z2luPVRydWUNCg0KRW5kIEZ1bmN0aW9uDQonKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqDQoNCg0KDQoNCicqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioNCicg55uu55qE77yaIOWuieijheaPkuS7tuWHveaVsO+8jOWPqui/kOihjOS4gOasoQ0KJyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KRnVuY3Rpb24gSW5zdGFsbFBsdWdpbihzdHJQbHVnaW5OYW1lKQ0KCU9uIEVycm9yIFJlc3VtZSBOZXh0DQoJQ2FsbCBFeGVjdXRlKCJDYWxsIEluc3RhbGxQbHVnaW5fIiAmIHN0clBsdWdpbk5hbWUgJiAiKCkiKQ0KCUVyci5DbGVhcg0KRW5kIEZ1bmN0aW9uDQonKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqDQoNCg0KDQoNCicqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioNCicg55uu55qE77yaIOWIoOmZpOaPkuS7tuWHveaVsO+8jOWPqui/kOihjOS4gOasoQ0KJyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KRnVuY3Rpb24gVW5pbnN0YWxsUGx1Z2luKHN0clBsdWdpbk5hbWUpDQoJT24gRXJyb3IgUmVzdW1lIE5leHQNCglDYWxsIEV4ZWN1dGUoIkNhbGwgVW5pbnN0YWxsUGx1Z2luXyIgJiBzdHJQbHVnaW5OYW1lICYgIigpIikNCglFcnIuQ2xlYXINCkVuZCBGdW5jdGlvbg0KJyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KDQoNCg0KDQonKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqDQonIOebrueahO+8miDmo4DmtYvmj5Lku7bmmK/lkKblt7Lmv4DmtLsNCicqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioNCkZ1bmN0aW9uIENoZWNrUGx1Z2luU3RhdGUoc3RyUGx1Z2luTmFtZSkNCg0KCUNoZWNrUGx1Z2luU3RhdGU9Q2hlY2tQbHVnaW5TdGF0ZUJ5TmV3VmFsdWUoc3RyUGx1Z2luTmFtZSxaQ19CTE9HX1RIRU1FICYgInwiICYgWkNfVVNJTkdfUExVR0lOX0xJU1QpDQoNCkVuZCBGdW5jdGlvbg0KJyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KDQoNCg0KJyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KJyDnm67nmoTvvJog5qOA5rWL5o+S5Lu25piv5ZCm5bey5r+A5rS7IGJ5IG5ldyB2YWx1ZQ0KJyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KRnVuY3Rpb24gQ2hlY2tQbHVnaW5TdGF0ZUJ5TmV3VmFsdWUoc3RyUGx1Z2luTmFtZSxuZXdaQ19VU0lOR19QTFVHSU5fTElTVCkNCg0KCURpbSBzLGkNCglzPVNwbGl0KG5ld1pDX1VTSU5HX1BMVUdJTl9MSVNULCJ8IikNCg0KCUZvciBpPUxCb3VuZChzKSBUbyBVQm91bmQocykNCgkJSWYgVUNhc2UocyhpKSk9VUNhc2Uoc3RyUGx1Z2luTmFtZSkgVGhlbg0KCQkJQ2hlY2tQbHVnaW5TdGF0ZUJ5TmV3VmFsdWU9VHJ1ZQ0KCQkJRXhpdCBGdW5jdGlvbg0KCQlFbmQgSWYNCglOZXh0DQoNCglDaGVja1BsdWdpblN0YXRlQnlOZXdWYWx1ZT1GYWxzZQ0KDQpFbmQgRnVuY3Rpb24NCicqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioNCg0KDQoNCg0KJyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KJyDnm67nmoTvvJrmjILkuIpBY3Rpb27mjqXlj6MNCicg5Y+C5pWw77yaJ3BsdWduYW1lOuaOpeWPo+WQjeensA0KCQknYWN0aW9uY29kZTropoHmiafooYznmoTor63lj6XvvIzopoHovazkuYnkuLpFeGVjdXRl5Y+v5omn6KGM6K+t5Y+lDQonKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqDQpGdW5jdGlvbiBBZGRfQWN0aW9uX1BsdWdpbihwbHVnbmFtZSxhY3Rpb25jb2RlKQ0KCU9uIEVycm9yIFJlc3VtZSBOZXh0DQoJYWN0aW9uY29kZT1SZXBsYWNlKGFjdGlvbmNvZGUsIkV4aXQgRnVuY3Rpb24iLCJiIiAmIHBsdWduYW1lICYgIj1UcnVlIikNCglhY3Rpb25jb2RlPVJlcGxhY2UoYWN0aW9uY29kZSwiRXhpdCBTdWIiLCJiIiAmIHBsdWduYW1lICYgIj1UcnVlIikNCglhY3Rpb25jb2RlPVJlcGxhY2UoYWN0aW9uY29kZSwiRXhpdCBQcm9wZXJ0eSIsImIiICYgcGx1Z25hbWUgJiAiPVRydWUiKQ0KCUNhbGwgRXhlY3V0ZSgiUmVEaW0gUHJlc2VydmUgIiAmIHBsdWduYW1lICYgIihVQm91bmQoIiYgcGx1Z25hbWUgJiIpKzEpIikNCglDYWxsIEV4ZWN1dGUocGx1Z25hbWUgJiAiKFVCb3VuZCgiJiBwbHVnbmFtZSAmIikpPSIgJiBwbHVnbmFtZSAmICIoVUJvdW5kKCImIHBsdWduYW1lICYiKSkmIiIiICYgUmVwbGFjZShhY3Rpb25jb2RlLCIiIiIsIiIiIiIiKSAmICIiIiIgJiAiOiIpDQoJRXJyLkNsZWFyDQpFbmQgRnVuY3Rpb24NCicqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioNCg0KDQoNCg0KJyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KJyDnm67nmoTvvJrmjILkuIpGaWx0ZXLmjqXlj6MNCicg5Y+C5pWw77yaJ3BsdWduYW1lOuaOpeWPo+WQjeensA0KCQknZnVuY3Rpb25uYW1lOuimgeaMguaOpeeahOWHveaVsOWQjQ0KJyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KRnVuY3Rpb24gQWRkX0ZpbHRlcl9QbHVnaW4ocGx1Z25hbWUsZnVuY3Rpb25uYW1lKQ0KCU9uIEVycm9yIFJlc3VtZSBOZXh0DQoJQ2FsbCBFeGVjdXRlKCJzIiAmIHBsdWduYW1lICYgIj0iICYgInMiICYgcGx1Z25hbWUgJiAiJiIiIiAmIGZ1bmN0aW9ubmFtZSAmICIiIiIgJiAiJiAiInwiIiIpDQoJRXJyLkNsZWFyDQpFbmQgRnVuY3Rpb24NCicqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioNCg0KDQoNCg0KJyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KJyDnm67nmoTvvJrmjILkuIpSZXNwb25zZeaOpeWPow0KJyDlj4LmlbDvvJoncGx1Z25hbWU65o6l5Y+j5ZCN56ewDQoJCSdwYXJhbWV0ZXI66KaB5YaZ5YWl55qE5YaF5a65DQonKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqDQpGdW5jdGlvbiBBZGRfUmVzcG9uc2VfUGx1Z2luKHBsdWduYW1lLHBhcmFtZXRlcikNCglPbiBFcnJvciBSZXN1bWUgTmV4dA0KCUNhbGwgRXhlY3V0ZShwbHVnbmFtZSAmICI9IiAmIHBsdWduYW1lICYgIiYiIiIgJiBSZXBsYWNlKFJlcGxhY2UoUmVwbGFjZShSZXBsYWNlKHBhcmFtZXRlciwiIiIiLCIiIiIiIiksdmJDcmxmLCIiIiZ2YkNybGYmIiIiKSx2YkxmLCIiIiZ2YkxmJiIiIiksdmJDciwiIiImdmJDciYiIiIpICYgIiIiIikNCglFcnIuQ2xlYXINCkVuZCBGdW5jdGlvbg0KJyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KDQoNCg0KDQonKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqDQonIOebrueahO+8mkdldFNldHRpbmdGb3JtTmFtZQ0KJyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KRnVuY3Rpb24gR2V0U2V0dGluZ0Zvcm1OYW1lKHMpDQoJT24gRXJyb3IgUmVzdW1lIE5leHQNCglEaW0geA0KCUNhbGwgRXhlY3V0ZSgieD0iICYgcykNCglHZXRTZXR0aW5nRm9ybU5hbWU9eA0KCUVyci5DbGVhcg0KRW5kIEZ1bmN0aW9uDQonKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqDQoNCg0KDQoNCicqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioNCicg55uu55qE77yaR2V0U2V0dGluZ0Zvcm1OYW1lIHdpdGggRGVmYXVsdA0KJyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KRnVuY3Rpb24gR2V0U2V0dGluZ0Zvcm1OYW1lV2l0aERlZmF1bHQocyxkKQ0KCU9uIEVycm9yIFJlc3VtZSBOZXh0DQoJRXJyLkNsZWFyDQoJRGltIHgNCglDYWxsIEV4ZWN1dGUoIng9IiAmIHMpDQoJR2V0U2V0dGluZ0Zvcm1OYW1lV2l0aERlZmF1bHQ9eA0KCUlmIEVyci5OdW1iZXI8PjAgVGhlbg0KCQlHZXRTZXR0aW5nRm9ybU5hbWVXaXRoRGVmYXVsdD1kDQoJRW5kIElmDQoJRXJyLkNsZWFyDQpFbmQgRnVuY3Rpb24NCicqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioNCg0KDQoNCg0KJyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KJyDnm67nmoTvvJpHZXROYW1lRm9ybVRoZW1lDQonKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqDQpGdW5jdGlvbiBHZXROYW1lRm9ybVRoZW1lKHMpDQoJT24gRXJyb3IgUmVzdW1lIE5leHQNCg0KCUdldE5hbWVGb3JtVGhlbWU9cw0KCURpbSBvYmpYbWxGaWxlDQoJU2V0IG9ialhtbEZpbGU9U2VydmVyLkNyZWF0ZU9iamVjdCgiTWljcm9zb2Z0LlhNTERPTSIpDQoJb2JqWG1sRmlsZS5hc3luYyA9IEZhbHNlDQoJb2JqWG1sRmlsZS5WYWxpZGF0ZU9uUGFyc2U9RmFsc2UNCglvYmpYbWxGaWxlLmxvYWQoQmxvZ1BhdGggJiAiemJfdXNlcnNcIiAmICJ0aGVtZSIgJiAiXCIgJiBzICYgIlwiICYgInRoZW1lLnhtbCIpDQoJSWYgb2JqWG1sRmlsZS5yZWFkeVN0YXRlPTQgVGhlbg0KCQlJZiBvYmpYbWxGaWxlLnBhcnNlRXJyb3IuZXJyb3JDb2RlIDw+IDAgVGhlbg0KCQlFbHNlDQoJCQlHZXROYW1lRm9ybVRoZW1lPW9ialhtbEZpbGUuZG9jdW1lbnRFbGVtZW50LnNlbGVjdFNpbmdsZU5vZGUoIm5hbWUiKS50ZXh0DQoJCUVuZCBJZg0KCUVuZCBJZg0KDQoJRXJyLkNsZWFyDQpFbmQgRnVuY3Rpb24NCicqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioNCg0KDQoNCg0KJyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KJyDnm67nmoTvvJogICAgQmxvZyBSZUJ1aWxkIOaguOW/gw0KJyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KRnVuY3Rpb24gTWFrZUJsb2dSZUJ1aWxkX0NvcmUoKQ0KDQoJJ09uIEVycm9yIFJlc3VtZSBOZXh0DQoNCgkncGx1Z2luIG5vZGUNCgliQWN0aW9uX1BsdWdpbl9NYWtlQmxvZ1JlQnVpbGRfQ29yZV9CZWdpbj1GYWxzZQ0KCUZvciBFYWNoIHNBY3Rpb25fUGx1Z2luX01ha2VCbG9nUmVCdWlsZF9Db3JlX0JlZ2luIGluIEFjdGlvbl9QbHVnaW5fTWFrZUJsb2dSZUJ1aWxkX0NvcmVfQmVnaW4NCgkJSWYgTm90IElzRW1wdHkoc0FjdGlvbl9QbHVnaW5fTWFrZUJsb2dSZUJ1aWxkX0NvcmVfQmVnaW4pIFRoZW4gQ2FsbCBFeGVjdXRlKHNBY3Rpb25fUGx1Z2luX01ha2VCbG9nUmVCdWlsZF9Db3JlX0JlZ2luKQ0KCQlJZiBiQWN0aW9uX1BsdWdpbl9NYWtlQmxvZ1JlQnVpbGRfQ29yZV9CZWdpbj1UcnVlIFRoZW4gRXhpdCBGdW5jdGlvbg0KCU5leHQNCg0KCUJsb2dSZUJ1aWxkX1N0YXRpc3RpY3MNCg0KCUJsb2dSZUJ1aWxkX0F1dGhvcnMNCg0KCUJsb2dSZUJ1aWxkX0FyY2hpdmVzDQoNCglCbG9nUmVCdWlsZF9QcmV2aW91cw0KDQoJQmxvZ1JlQnVpbGRfQ29tbWVudHMNCg0KCUJsb2dSZUJ1aWxkX0NhdGFsb2dzDQoNCglCbG9nUmVCdWlsZF9DYXRlZ29yeXMNCg0KCUJsb2dSZUJ1aWxkX0NhbGVuZGFyDQoNCglCbG9nUmVCdWlsZF9UYWdzDQoNCglCbG9nUmVCdWlsZF9GdW5jdGlvbnMNCg0KCUJ1aWxkQWxsQ2FjaGUNCg0KCUV4cG9ydFJTUw0KDQoJQmxvZ1JlQnVpbGRfRGVmYXVsdA0KDQoJRGltIGJvbE9wZXJhdGVTdWNjZXNzDQoNCglBcHBsaWNhdGlvbi5Mb2NrDQoJYm9sT3BlcmF0ZVN1Y2Nlc3M9QXBwbGljYXRpb24oWkNfQkxPR19DTFNJRCAgJiBCbG9nVXNlci5JRCAmICJTSUdOQUxfT1BFUkFURVNVQ0NFU1MiKQ0KCUFwcGxpY2F0aW9uLlVuTG9jaw0KDQoJQ2FsbCBTZXRCbG9nSGludChib2xPcGVyYXRlU3VjY2VzcyxGYWxzZSxFbXB0eSkNCg0KCU1ha2VCbG9nUmVCdWlsZF9Db3JlPVRydWUNCg0KCSdwbHVnaW4gbm9kZQ0KCWJBY3Rpb25fUGx1Z2luX01ha2VCbG9nUmVCdWlsZF9Db3JlX0VuZD1GYWxzZQ0KCUZvciBFYWNoIHNBY3Rpb25fUGx1Z2luX01ha2VCbG9nUmVCdWlsZF9Db3JlX0VuZCBpbiBBY3Rpb25fUGx1Z2luX01ha2VCbG9nUmVCdWlsZF9Db3JlX0VuZA0KCQlJZiBOb3QgSXNFbXB0eShzQWN0aW9uX1BsdWdpbl9NYWtlQmxvZ1JlQnVpbGRfQ29yZV9FbmQpIFRoZW4gQ2FsbCBFeGVjdXRlKHNBY3Rpb25fUGx1Z2luX01ha2VCbG9nUmVCdWlsZF9Db3JlX0VuZCkNCgkJSWYgYkFjdGlvbl9QbHVnaW5fTWFrZUJsb2dSZUJ1aWxkX0NvcmVfRW5kPVRydWUgVGhlbiBFeGl0IEZ1bmN0aW9uDQoJTmV4dA0KDQoJJ0Vyci5DbGVhcg0KDQpFbmQgRnVuY3Rpb24NCicqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioNCg0KDQoNCg0KJyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KJyDnm67nmoTvvJogICAg5YWo5paw55qE6YOo5Lu957Si5byV56iL5bqPDQonKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqDQpGdW5jdGlvbiBCdWlsZEFsbENhY2hlKCkNCg0KCSdwbHVnaW4gbm9kZQ0KCWJBY3Rpb25fUGx1Z2luX0J1aWxkQWxsQ2FjaGVfQmVnaW49RmFsc2UNCglGb3IgRWFjaCBzQWN0aW9uX1BsdWdpbl9CdWlsZEFsbENhY2hlX0JlZ2luIGluIEFjdGlvbl9QbHVnaW5fQnVpbGRBbGxDYWNoZV9CZWdpbg0KCQlJZiBOb3QgSXNFbXB0eShzQWN0aW9uX1BsdWdpbl9CdWlsZEFsbENhY2hlX0JlZ2luKSBUaGVuIENhbGwgRXhlY3V0ZShzQWN0aW9uX1BsdWdpbl9CdWlsZEFsbENhY2hlX0JlZ2luKQ0KCQlJZiBiQWN0aW9uX1BsdWdpbl9CdWlsZEFsbENhY2hlX0JlZ2luPVRydWUgVGhlbiBFeGl0IEZ1bmN0aW9uDQoJTmV4dA0KDQoJQnVpbGRBbGxDYWNoZT1UcnVlDQoNCkVuZCBGdW5jdGlvbg0KJyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KDQoNCg0KDQonKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqDQonIOebrueahO+8mg0KJyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KRnVuY3Rpb24gQmxvZ1JlQnVpbGRfQ2FsZW5kYXIoKQ0KDQoJJ3BsdWdpbiBub2RlDQoJYkFjdGlvbl9QbHVnaW5fQmxvZ1JlQnVpbGRfQ2FsZW5kYXJfQmVnaW49RmFsc2UNCglGb3IgRWFjaCBzQWN0aW9uX1BsdWdpbl9CbG9nUmVCdWlsZF9DYWxlbmRhcl9CZWdpbiBpbiBBY3Rpb25fUGx1Z2luX0Jsb2dSZUJ1aWxkX0NhbGVuZGFyX0JlZ2luDQoJCUlmIE5vdCBJc0VtcHR5KHNBY3Rpb25fUGx1Z2luX0Jsb2dSZUJ1aWxkX0NhbGVuZGFyX0JlZ2luKSBUaGVuIENhbGwgRXhlY3V0ZShzQWN0aW9uX1BsdWdpbl9CbG9nUmVCdWlsZF9DYWxlbmRhcl9CZWdpbikNCgkJSWYgYkFjdGlvbl9QbHVnaW5fQmxvZ1JlQnVpbGRfQ2FsZW5kYXJfQmVnaW49VHJ1ZSBUaGVuIEV4aXQgRnVuY3Rpb24NCglOZXh0DQoNCglEaW0gb2JqU3RyZWFtDQoJRGltIHN0ckNhbGVuZGFyDQoJRGltIGksag0KCURpbSBvYmpSUw0KCURpbSBrLGwsbSxuDQoJQ2FsbCBHZXRGdW5jdGlvbigpDQoJSWYgRnVuY3Rpb25zKEZ1bmN0aW9uTWV0YXMuR2V0VmFsdWUoImNhbGVuZGFyIikpLklzSGlkZGVuPVRydWUgVGhlbiANCg0KCQlFeGl0IEZ1bmN0aW9uDQoJRW5kIElmDQoJJ0NhbGVuZGFyDQoNCglzdHJDYWxlbmRhcj1NYWtlQ2FsZW5kYXIoIiIpDQoNCglzdHJDYWxlbmRhcj1UcmFuc2ZlckhUTUwoc3RyQ2FsZW5kYXIsIltuby1hc3BdIikNCg0KDQoJDQoJRnVuY3Rpb25zKEZ1bmN0aW9uTWV0YXMuR2V0VmFsdWUoImNhbGVuZGFyIikpLkNvbnRlbnQ9c3RyQ2FsZW5kYXINCglGdW5jdGlvbnMoRnVuY3Rpb25NZXRhcy5HZXRWYWx1ZSgiY2FsZW5kYXIiKSkuUG9zdCgpDQoJQmxvZ1JlQnVpbGRfQ2FsZW5kYXI9VHJ1ZQ0KDQpFbmQgRnVuY3Rpb24NCicqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioNCg0KDQoNCg0KJyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KJyDnm67nmoTvvJoNCicqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioNCkZ1bmN0aW9uIEJsb2dSZUJ1aWxkX0FyY2hpdmVzKCkNCg0KCSdwbHVnaW4gbm9kZQ0KCWJBY3Rpb25fUGx1Z2luX0Jsb2dSZUJ1aWxkX0FyY2hpdmVzX0JlZ2luPUZhbHNlDQoJRm9yIEVhY2ggc0FjdGlvbl9QbHVnaW5fQmxvZ1JlQnVpbGRfQXJjaGl2ZXNfQmVnaW4gaW4gQWN0aW9uX1BsdWdpbl9CbG9nUmVCdWlsZF9BcmNoaXZlc19CZWdpbg0KCQlJZiBOb3QgSXNFbXB0eShzQWN0aW9uX1BsdWdpbl9CbG9nUmVCdWlsZF9BcmNoaXZlc19CZWdpbikgVGhlbiBDYWxsIEV4ZWN1dGUoc0FjdGlvbl9QbHVnaW5fQmxvZ1JlQnVpbGRfQXJjaGl2ZXNfQmVnaW4pDQoJCUlmIGJBY3Rpb25fUGx1Z2luX0Jsb2dSZUJ1aWxkX0FyY2hpdmVzX0JlZ2luPVRydWUgVGhlbiBFeGl0IEZ1bmN0aW9uDQoJTmV4dA0KDQoJRGltIGkNCglEaW0gag0KCURpbSBsDQoJRGltIG4NCglEaW0gb2JqUlMNCglEaW0gb2JqU3RyZWFtDQoJRGltIHMNCg0KCURpbSBBcnRMaXN0DQoNCglDYWxsIEdldEZ1bmN0aW9uKCkNCglJZiBGdW5jdGlvbnMoRnVuY3Rpb25NZXRhcy5HZXRWYWx1ZSgiYXJjaGl2ZXMiKSkuSXNIaWRkZW49VHJ1ZSBUaGVuIA0KDQoJCUV4aXQgRnVuY3Rpb24NCglFbmQgSWYNCgknQXJjaGl2ZXMNCglEaW0gc3RyQXJjaGl2ZXMNCglTZXQgb2JqUlM9b2JqQ29ubi5FeGVjdXRlKCJTRUxFQ1QgW2xvZ19Qb3N0VGltZV0gRlJPTSBbYmxvZ19BcnRpY2xlXSBXSEVSRSAoW2xvZ19UeXBlXT0wKSBBbmQgKFtsb2dfTGV2ZWxdPjEpIE9SREVSIEJZIFtsb2dfUG9zdFRpbWVdIERFU0MiKQ0KCUlmIChOb3Qgb2JqUlMuYm9mKSBBbmQgKE5vdCBvYmpSUy5lb2YpIFRoZW4NCgkJRGltIGR0bVlNKCkNCgkJaT0wDQoJCWo9MA0KCQlSZURpbSBQcmVzZXJ2ZSBkdG1ZTSgwKQ0KCQlEbyBXaGlsZSBOb3Qgb2JqUlMuZW9mDQoJCQlqPVVCb3VuZChkdG1ZTSkNCgkJCWk9WWVhcihvYmpSUygibG9nX1Bvc3RUaW1lIikpICYgIi0iICYgTW9udGgob2JqUlMoImxvZ19Qb3N0VGltZSIpKQ0KCQkJSWYgaTw+ZHRtWU0oaikgVGhlbg0KCQkJCVJlRGltIFByZXNlcnZlIGR0bVlNKGorMSkNCgkJCQlkdG1ZTShqKzEpPWkNCgkJCUVuZCBJZg0KCQkJb2JqUlMuTW92ZU5leHQNCgkJTG9vcA0KCUVuZCBJZg0KCW9ialJTLkNsb3NlDQoJU2V0IG9ialJTPU5vdGhpbmcNCg0KDQoJaj1GdW5jdGlvbnMoRnVuY3Rpb25NZXRhcy5HZXRWYWx1ZSgiYXJjaGl2ZXMiKSkuTWF4TGkNCg0KDQpJZiBCbG9nQ29uZmlnLlJlYWQoIlpDX0FSQ0hJVkVTX09MRF9MSVNUVFlQRSIpPSJUcnVlIiBUaGVuDQoJSWYgTm90IElzRW1wdHkoZHRtWU0pIFRoZW4NCgkJRm9yIGk9MSB0byBVQm91bmQoZHRtWU0pDQoNCgkJCWw9WWVhcihkdG1ZTShpKSkNCgkJCW49TW9udGgoZHRtWU0oaSkpKzENCgkJCUlGIG4+MTIgVGhlbiBsPWwrMTpuPTENCg0KCQkJU2V0IG9ialJTPW9iakNvbm4uRXhlY3V0ZSgiU0VMRUNUIENPVU5UKFtsb2dfSURdKSBGUk9NIFtibG9nX0FydGljbGVdIFdIRVJFIChbbG9nX1R5cGVdPTApIEFuZCAoW2xvZ19MZXZlbF0+MSkgQU5EIFtsb2dfUG9zdFRpbWVdIEJFVFdFRU4gIiYgWkNfU1FMX1BPVU5EX0tFWSAmIFllYXIoZHRtWU0oaSkpICYiLSImIE1vbnRoKGR0bVlNKGkpKSAmIi0xIiYgWkNfU1FMX1BPVU5EX0tFWSAmIiBBTkQgIiYgWkNfU1FMX1BPVU5EX0tFWSAmIGwgJiItIiYgbiAmIi0xIiAmIFpDX1NRTF9QT1VORF9LRVkpDQoNCgkJCUlmIChOb3Qgb2JqUlMuYm9mKSBBbmQgKE5vdCBvYmpSUy5lb2YpIFRoZW4NCgkJCQlzdHJBcmNoaXZlcz1zdHJBcmNoaXZlcyAmICI8bGk+PGEgaHJlZj0iIiImIFVybGJ5RGF0ZUF1dG8oWWVhcihkdG1ZTShpKSksTW9udGgoZHRtWU0oaSkpLCIiKSAmIiIiPiIgJiBZZWFyKGR0bVlNKGkpKSAmICIgIiAmIFpWQV9Nb250aChNb250aChkdG1ZTShpKSkpICYgIjxzcGFuIGNsYXNzPSIiYXJ0aWNsZS1udW1zIiI+ICgiICYgb2JqUlMoMCkgJiAiKTwvc3Bhbj4iICsiPC9hPjwvbGk+Ig0KCQkJCUlmIGo+MCBUaGVuDQoJCQkJCUlmIGk9aiBUaGVuIEV4aXQgRm9yDQoJCQkJRW5kIElmDQoJCQlFbmQgSWYNCg0KCQkJb2JqUlMuQ2xvc2UNCgkJCVNldCBvYmpSUz1Ob3RoaW5nDQoJCU5leHQNCglFbmQgSWYNCkVsc2UNCglzPSI8bGk+Ig0KCUlmIE5vdCBJc0VtcHR5KGR0bVlNKSBUaGVuDQoJCUZvciBpPTEgdG8gVUJvdW5kKGR0bVlNKQ0KDQoJCQlsPVllYXIoZHRtWU0oaSkpDQoJCQluPU1vbnRoKGR0bVlNKGkpKSsxDQoJCQlJRiBuPjEyIFRoZW4gbD1sKzE6bj0xDQoNCgkJCVNldCBvYmpSUz1vYmpDb25uLkV4ZWN1dGUoIlNFTEVDVCBDT1VOVChbbG9nX0lEXSkgRlJPTSBbYmxvZ19BcnRpY2xlXSBXSEVSRSAoW2xvZ19UeXBlXT0wKSBBbmQgKFtsb2dfTGV2ZWxdPjEpIEFORCBbbG9nX1Bvc3RUaW1lXSBCRVRXRUVOICImIFpDX1NRTF9QT1VORF9LRVkgJiBZZWFyKGR0bVlNKGkpKSAmIi0iJiBNb250aChkdG1ZTShpKSkgJiItMSImIFpDX1NRTF9QT1VORF9LRVkgJiIgQU5EICImIFpDX1NRTF9QT1VORF9LRVkgJiBsICYiLSImIG4gJiItMSIgJiBaQ19TUUxfUE9VTkRfS0VZKQ0KDQoJCQlJZiAoTm90IG9ialJTLmJvZikgQW5kIChOb3Qgb2JqUlMuZW9mKSBUaGVuDQoJCQkJSWYgSW5TdHIocywiPCEtLSB5ZWFyIC0tPiImUmVwbGFjZShaQ19NU0cyMzMsIiV5IixZZWFyKGR0bVlNKGkpKSkmIjwhLS0geWVhciAtLT4iKT0wIFRoZW4gcz1zICYgIjwvbGk+PGxpPjwhLS0geWVhciAtLT4iJlJlcGxhY2UoWkNfTVNHMjMzLCIleSIsWWVhcihkdG1ZTShpKSkpJiI8IS0tIHllYXIgLS0+PGJyLz4iDQoJCQkJDQoJCQkJcz1zICYgIjxhIGhyZWY9IiIiJiBVcmxieURhdGVBdXRvKFllYXIoZHRtWU0oaSkpLE1vbnRoKGR0bVlNKGkpKSwiIikgJiIiIj4iICYgIFpWQV9Nb250aF9BYmJyKE1vbnRoKGR0bVlNKGkpKSkgICYgIjxzcGFuIGNsYXNzPSIiYXJ0aWNsZS1udW1zIiI+KCIgJiBvYmpSUygwKSAmICIpPC9zcGFuPiIgKyI8L2E+Jm5ic3A7ICINCgkJCQlJZiBqPjAgVGhlbg0KCQkJCQlJZiBpPWogVGhlbiBFeGl0IEZvcg0KCQkJCUVuZCBJZg0KCQkJRW5kIElmDQoNCgkJCW9ialJTLkNsb3NlDQoJCQlTZXQgb2JqUlM9Tm90aGluZw0KCQlOZXh0DQoJRW5kIElmDQoJcz1zICYgIjwvbGk+Ig0KCXM9UmVwbGFjZShzLCI8bGk+PC9saT4iLCIiKQ0KCXN0ckFyY2hpdmVzPVJlcGxhY2UocywiPCEtLSB5ZWFyIC0tPiIsIiIpDQpFbmQgSWYNCg0KCXN0ckFyY2hpdmVzPVRyYW5zZmVySFRNTChzdHJBcmNoaXZlcywiW25vLWFzcF0iKQ0KCUZ1bmN0aW9ucyhGdW5jdGlvbk1ldGFzLkdldFZhbHVlKCJhcmNoaXZlcyIpKS5Db250ZW50PXN0ckFyY2hpdmVzDQoJRnVuY3Rpb25zKEZ1bmN0aW9uTWV0YXMuR2V0VmFsdWUoImFyY2hpdmVzIikpLlBvc3QoKQ0KDQoJQmxvZ1JlQnVpbGRfQXJjaGl2ZXM9VHJ1ZQ0KDQpFbmQgRnVuY3Rpb24NCicqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioNCg0KDQoNCg0KJyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KJyDnm67nmoTvvJoNCicqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioNCkZ1bmN0aW9uIEJsb2dSZUJ1aWxkX0NhdGFsb2dzKCkNCg0KCSdwbHVnaW4gbm9kZQ0KCWJBY3Rpb25fUGx1Z2luX0Jsb2dSZUJ1aWxkX0NhdGFsb2dzX0JlZ2luPUZhbHNlDQoJRm9yIEVhY2ggc0FjdGlvbl9QbHVnaW5fQmxvZ1JlQnVpbGRfQ2F0YWxvZ3NfQmVnaW4gaW4gQWN0aW9uX1BsdWdpbl9CbG9nUmVCdWlsZF9DYXRhbG9nc19CZWdpbg0KCQlJZiBOb3QgSXNFbXB0eShzQWN0aW9uX1BsdWdpbl9CbG9nUmVCdWlsZF9DYXRhbG9nc19CZWdpbikgVGhlbiBDYWxsIEV4ZWN1dGUoc0FjdGlvbl9QbHVnaW5fQmxvZ1JlQnVpbGRfQ2F0YWxvZ3NfQmVnaW4pDQoJCUlmIGJBY3Rpb25fUGx1Z2luX0Jsb2dSZUJ1aWxkX0NhdGFsb2dzX0JlZ2luPVRydWUgVGhlbiBFeGl0IEZ1bmN0aW9uDQoJTmV4dA0KDQoJSXNSdW5HZXRDYXRlZ29yeT1GYWxzZQ0KCUNhbGwgR2V0RnVuY3Rpb24NCglJZiBGdW5jdGlvbnMoRnVuY3Rpb25NZXRhcy5HZXRWYWx1ZSgiY2F0YWxvZyIpKS5Jc0hpZGRlbj1UcnVlIFRoZW4gDQoNCgkJRXhpdCBGdW5jdGlvbg0KCUVuZCBJZg0KCUNhbGwgR2V0Q2F0ZWdvcnkoKQ0KCQ0KCURpbSBvYmpSUw0KCURpbSBvYmpTdHJlYW0NCg0KCURpbSBBcnRMaXN0DQoNCgknQ2F0YWxvZ3MNCglEaW0gc3RyQ2F0YWxvZyxib2xIYXNTdWJDYXRlDQoNCglEaW0gYXJ5Q2F0ZUluT3JkZXIgDQoJYXJ5Q2F0ZUluT3JkZXI9R2V0Q2F0ZWdvcnlPcmRlcigpDQoNCg0KCUNhdGVnb3J5cygwKS5Db3VudD1DTG5nKG9iakNvbm4uRXhlY3V0ZSgiU0VMRUNUIENPVU5UKFtsb2dfSURdKSBGUk9NIFtibG9nX0FydGljbGVdIFdIRVJFIFtsb2dfTGV2ZWxdPjEgQU5EIFtsb2dfVHlwZV09MCBBTkQgW2xvZ19DYXRlSURdPTAiKSgwKSkNCglJZiBDYXRlZ29yeXMoMCkuQ291bnQ+MCBUaGVuDQoJCXN0ckNhdGFsb2c9c3RyQ2F0YWxvZyAmICI8bGkgY2xhc3M9IiJsaS1jYXRlIGNhdGUtIiYgQ2F0ZWdvcnlzKDApLmlkICYiIiI+PGEgaHJlZj0iIiImIENhdGVnb3J5cygwKS5VcmwgJiAiIiI+IitDYXRlZ29yeXMoMCkuTmFtZSArICI8c3BhbiBjbGFzcz0iImFydGljbGUtbnVtcyIiPiAoIiAmIENhdGVnb3J5cygwKS5Db3VudCAmICIpPC9zcGFuPiIgKyI8L2E+PC9saT4iDQoJRW5kIElmDQoNCglEaW0gaSxqLGMNCglEaW0gc3RyUHJlY2F0YSxzdHJTdWJjYXRlDQoJRm9yIGk9TGJvdW5kKGFyeUNhdGVJbk9yZGVyKSsxIFRvIFVib3VuZChhcnlDYXRlSW5PcmRlcikNCgkJc3RyUHJlY2F0YT0iIjpzdHJTdWJjYXRlPSIiDQoJCUlmIENhdGVnb3J5cyhhcnlDYXRlSW5PcmRlcihpKSkuUGFyZW50SUQ9MCBUaGVuDQoJCQljPUNhdGVnb3J5cyhhcnlDYXRlSW5PcmRlcihpKSkuQ291bnQNCg0KCQkJYm9sSGFzU3ViQ2F0ZT1GYWxzZQ0KCQkJRm9yIGo9TGJvdW5kKGFyeUNhdGVJbk9yZGVyKSsxIFRvIFVCb3VuZChhcnlDYXRlSW5PcmRlcikNCgkJCQlJZiBDYXRlZ29yeXMoYXJ5Q2F0ZUluT3JkZXIoaikpLlBhcmVudElEPUNhdGVnb3J5cyhhcnlDYXRlSW5PcmRlcihpKSkuSUQgVGhlbiBib2xIYXNTdWJDYXRlPVRydWUNCgkJCU5leHQNCgkJCSdJZiBib2xIYXNTdWJDYXRlIFRoZW4gc3RyU3ViY2F0ZSA9ICI8dWwgY2xhc3M9IiJ1bC1zdWJjYXRlcyIiPiINCgkJCUZvciBqPUxib3VuZChhcnlDYXRlSW5PcmRlcikrMSBUbyBVQm91bmQoYXJ5Q2F0ZUluT3JkZXIpDQoJCQkJSWYgQ2F0ZWdvcnlzKGFyeUNhdGVJbk9yZGVyKGopKS5QYXJlbnRJRD1DYXRlZ29yeXMoYXJ5Q2F0ZUluT3JkZXIoaSkpLklEIEFuZCBDYXRlZ29yeXMoYXJ5Q2F0ZUluT3JkZXIoaikpLkNvdW50PjAgVGhlbg0KCQkJCQlzdHJTdWJjYXRlPXN0clN1YmNhdGUgJiAiPGxpIGNsYXNzPSIibGktc3ViY2F0ZSBjYXRlLSImIENhdGVnb3J5cyhhcnlDYXRlSW5PcmRlcihqKSkuSUQgJiIiIj48YSBocmVmPSIiIiYgQ2F0ZWdvcnlzKGFyeUNhdGVJbk9yZGVyKGopKS5VcmwgJiAiIiI+IitDYXRlZ29yeXMoYXJ5Q2F0ZUluT3JkZXIoaikpLk5hbWUgKyAiPHNwYW4gY2xhc3M9IiJhcnRpY2xlLW51bXMiIj4gKCIgJiBDYXRlZ29yeXMoYXJ5Q2F0ZUluT3JkZXIoaikpLkNvdW50ICYgIik8L3NwYW4+IiArIjwvYT48L2xpPiINCgkJCQkJYz1jK0NhdGVnb3J5cyhhcnlDYXRlSW5PcmRlcihqKSkuQ291bnQNCgkJCQlFbmQgSWYNCgkJCU5leHQNCgkJCUlmIGJvbEhhc1N1YkNhdGUgQW5kIHN0clN1YmNhdGU8PiIiIFRoZW4gc3RyU3ViY2F0ZT0iPHVsIGNsYXNzPSIidWwtc3ViY2F0ZXMiIj4iICYgc3RyU3ViY2F0ZSAmICI8L3VsPiINCg0KCQkJSWYgYz4wIFRoZW4gc3RyUHJlY2F0YT0iPGxpIGNsYXNzPSIibGktY2F0ZSBjYXRlLSImIENhdGVnb3J5cyhhcnlDYXRlSW5PcmRlcihpKSkuSUQgJiIiIj48YSBocmVmPSIiIiYgQ2F0ZWdvcnlzKGFyeUNhdGVJbk9yZGVyKGkpKS5VcmwgJiAiIiI+IitDYXRlZ29yeXMoYXJ5Q2F0ZUluT3JkZXIoaSkpLk5hbWUgKyAiPHNwYW4gY2xhc3M9IiJhcnRpY2xlLW51bXMiIj4gKCIgJiBjICYgIik8L3NwYW4+IiArIjwvYT4iJiBzdHJTdWJjYXRlICYiPC9saT4iDQoNCgkJCXN0ckNhdGFsb2c9c3RyQ2F0YWxvZyAmIHN0clByZWNhdGENCgkJRW5kIElmDQoNCglOZXh0DQoNCglzdHJDYXRhbG9nPVRyYW5zZmVySFRNTChzdHJDYXRhbG9nLCJbbm8tYXNwXSIpDQoNCg0KCUZ1bmN0aW9ucyhGdW5jdGlvbk1ldGFzLkdldFZhbHVlKCJjYXRhbG9nIikpLkNvbnRlbnQ9c3RyQ2F0YWxvZw0KCUZ1bmN0aW9ucyhGdW5jdGlvbk1ldGFzLkdldFZhbHVlKCJjYXRhbG9nIikpLlBvc3QoKQ0KDQoJQmxvZ1JlQnVpbGRfQ2F0YWxvZ3M9VHJ1ZQ0KDQpFbmQgRnVuY3Rpb24NCicqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioNCg0KDQoNCg0KJyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KJyDnm67nmoTvvJoNCicqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioNCkZ1bmN0aW9uIEJsb2dSZUJ1aWxkX0NhdGVnb3J5cygpDQoNCgkncGx1Z2luIG5vZGUNCgliQWN0aW9uX1BsdWdpbl9CbG9nUmVCdWlsZF9DYXRlZ29yeXNfQmVnaW49RmFsc2UNCglGb3IgRWFjaCBzQWN0aW9uX1BsdWdpbl9CbG9nUmVCdWlsZF9DYXRlZ29yeXNfQmVnaW4gaW4gQWN0aW9uX1BsdWdpbl9CbG9nUmVCdWlsZF9DYXRlZ29yeXNfQmVnaW4NCgkJSWYgTm90IElzRW1wdHkoc0FjdGlvbl9QbHVnaW5fQmxvZ1JlQnVpbGRfQ2F0ZWdvcnlzX0JlZ2luKSBUaGVuIENhbGwgRXhlY3V0ZShzQWN0aW9uX1BsdWdpbl9CbG9nUmVCdWlsZF9DYXRlZ29yeXNfQmVnaW4pDQoJCUlmIGJBY3Rpb25fUGx1Z2luX0Jsb2dSZUJ1aWxkX0NhdGVnb3J5c19CZWdpbj1UcnVlIFRoZW4gRXhpdCBGdW5jdGlvbg0KCU5leHQNCg0KCUJsb2dSZUJ1aWxkX0NhdGVnb3J5cz1UcnVlDQoNCkVuZCBGdW5jdGlvbg0KJyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KDQoNCg0KDQonKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqDQonIOebrueahO+8mg0KJyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KRnVuY3Rpb24gQmxvZ1JlQnVpbGRfQXV0aG9ycygpDQoNCgkncGx1Z2luIG5vZGUNCgliQWN0aW9uX1BsdWdpbl9CbG9nUmVCdWlsZF9BdXRob3JzX0JlZ2luPUZhbHNlDQoJRm9yIEVhY2ggc0FjdGlvbl9QbHVnaW5fQmxvZ1JlQnVpbGRfQXV0aG9yc19CZWdpbiBpbiBBY3Rpb25fUGx1Z2luX0Jsb2dSZUJ1aWxkX0F1dGhvcnNfQmVnaW4NCgkJSWYgTm90IElzRW1wdHkoc0FjdGlvbl9QbHVnaW5fQmxvZ1JlQnVpbGRfQXV0aG9yc19CZWdpbikgVGhlbiBDYWxsIEV4ZWN1dGUoc0FjdGlvbl9QbHVnaW5fQmxvZ1JlQnVpbGRfQXV0aG9yc19CZWdpbikNCgkJSWYgYkFjdGlvbl9QbHVnaW5fQmxvZ1JlQnVpbGRfQXV0aG9yc19CZWdpbj1UcnVlIFRoZW4gRXhpdCBGdW5jdGlvbg0KCU5leHQNCg0KCUNhbGwgR2V0VXNlcigpDQoJQ2FsbCBHZXRGdW5jdGlvbigpDQoJSWYgRnVuY3Rpb25zKEZ1bmN0aW9uTWV0YXMuR2V0VmFsdWUoImF1dGhvcnMiKSkuSXNIaWRkZW49VHJ1ZSBUaGVuIA0KDQoJCUV4aXQgRnVuY3Rpb24NCglFbmQgSWYNCgkNCglEaW0gb2JqUlMNCglEaW0gb2JqU3RyZWFtDQoNCgknQXV0aG9ycw0KCURpbSBzdHJBdXRob3INCglEaW0gVXNlcg0KCUZvciBFYWNoIFVzZXIgaW4gVXNlcnMNCgkJSWYgSXNPYmplY3QoVXNlcikgVGhlbicnJycnJw0KCQkJSWYgVXNlci5JRD4wIEFuZCBVc2VyLkxldmVsPDQgQW5kIFVzZXIuQ291bnQ+MCBUaGVuDQoJCQkJc3RyQXV0aG9yPXN0ckF1dGhvciAmICI8bGk+PGEgaHJlZj0iIiImIFVzZXIuVXJsICYgIiIiPiIrVXNlci5GaXJzdE5hbWUgKyAiICgiICYgVXNlci5Db3VudCAmICIpIiArIjwvYT48L2xpPiINCgkJCUVuZCBJZg0KCQlFbmQgSWYNCglOZXh0DQoNCglzdHJBdXRob3I9VHJhbnNmZXJIVE1MKHN0ckF1dGhvciwiW25vLWFzcF0iKQ0KDQoJDQoJRnVuY3Rpb25zKEZ1bmN0aW9uTWV0YXMuR2V0VmFsdWUoImF1dGhvcnMiKSkuQ29udGVudD1zdHJBdXRob3INCglGdW5jdGlvbnMoRnVuY3Rpb25NZXRhcy5HZXRWYWx1ZSgiYXV0aG9ycyIpKS5Qb3N0KCkNCg0KCUJsb2dSZUJ1aWxkX0F1dGhvcnM9VHJ1ZQ0KDQpFbmQgRnVuY3Rpb24NCicqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioNCg0KDQoNCg0KJyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KJyDnm67nmoTvvJoNCicqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioNCkZ1bmN0aW9uIEJsb2dSZUJ1aWxkX1RhZ3MoKQ0KDQoJJ3BsdWdpbiBub2RlDQoJYkFjdGlvbl9QbHVnaW5fQmxvZ1JlQnVpbGRfVGFnc19CZWdpbj1GYWxzZQ0KCUZvciBFYWNoIHNBY3Rpb25fUGx1Z2luX0Jsb2dSZUJ1aWxkX1RhZ3NfQmVnaW4gaW4gQWN0aW9uX1BsdWdpbl9CbG9nUmVCdWlsZF9UYWdzX0JlZ2luDQoJCUlmIE5vdCBJc0VtcHR5KHNBY3Rpb25fUGx1Z2luX0Jsb2dSZUJ1aWxkX1RhZ3NfQmVnaW4pIFRoZW4gQ2FsbCBFeGVjdXRlKHNBY3Rpb25fUGx1Z2luX0Jsb2dSZUJ1aWxkX1RhZ3NfQmVnaW4pDQoJCUlmIGJBY3Rpb25fUGx1Z2luX0Jsb2dSZUJ1aWxkX1RhZ3NfQmVnaW49VHJ1ZSBUaGVuIEV4aXQgRnVuY3Rpb24NCglOZXh0DQoNCglDYWxsIEdldEZ1bmN0aW9uKCkNCgkNCglJZiBGdW5jdGlvbnMoRnVuY3Rpb25NZXRhcy5HZXRWYWx1ZSgidGFncyIpKS5Jc0hpZGRlbj1UcnVlIFRoZW4gDQoNCgkJRXhpdCBGdW5jdGlvbg0KCUVuZCBJZg0KCQ0KCURpbSBvYmpSUw0KCURpbSBvYmpTdHJlYW0NCg0KCURpbSBpLGoscyx0LGgNCgkNCglpPUZ1bmN0aW9ucyhGdW5jdGlvbk1ldGFzLkdldFZhbHVlKCJ0YWdzIikpLk1heExpDQoJSWYgaT0wIFRoZW4gaT0yNQ0KCWo9MA0KCSdBdXRob3JzDQoJRGltIHN0clRhZw0KDQoJU2V0IG9ialJTPW9iakNvbm4uRXhlY3V0ZSgiU0VMRUNUIFt0YWdfaWRdIEZST00gW2Jsb2dfVGFnXSBPUkRFUiBCWSBbdGFnX0NvdW50XSBERVNDLFt0YWdfSURdIEFTQyIpDQoJSWYgKE5vdCBvYmpSUy5ib2YpIEFuZCAoTm90IG9ialJTLmVvZikgVGhlbg0KCQlEbyBXaGlsZSBOb3Qgb2JqUlMuZW9mDQoJCQlzPXMgJiAieyIgJiBvYmpSUygidGFnX0lEIikgJiAifSINCgkJCXQ9dCAmIG9ialJTKCJ0YWdfSUQiKSAmICIsIg0KCQkJb2JqUlMuTW92ZU5leHQNCgkJCWo9aisxDQoJCQlJZiBqPmkgVGhlbiBFeGl0IERvDQoJCUxvb3ANCglFbmQgSWYNCglvYmpSUy5DbG9zZQ0KCVNldCBvYmpSUz1Ob3RoaW5nDQoNCglDYWxsIEdldFRhZ3NieVRhZ0lETGlzdChzKQ0KDQoJU2V0IGg9Q3JlYXRlT2JqZWN0KCJTY3JpcHRpbmcuRGljdGlvbmFyeSIpDQoNCglzPVNwbGl0KHQsIiwiKQ0KCUZvciBpPTAgVG8gVUJvdW5kKHMpLTENCgkJSWYgcyhpKTw+IiIgQW5kIFRhZ3MocyhpKSkuQ291bnQ8PjAgVGhlbg0KCQkJaC5hZGQgcyhpKSxUYWdzKHMoaSkpDQoJCUVuZCBJZg0KCU5leHQNCg0KCUZvciBFYWNoIHMgSW4gVGFncw0KCQlJZiBJc09iamVjdChzKT1UcnVlIFRoZW4NCgkJCUlmIGguRXhpc3RzKENTdHIocy5JRCkpIFRoZW4NCgkJCQlzdHJUYWc9c3RyVGFnICYgIjxsaSBjbGFzcz0iInRhZy1uYW1lIHRhZy1uYW1lLXNpemUtIiZUYWdDbG91ZChzLkNvdW50KSYiIiI+PGEgaHJlZj0iIiImcy5VcmwmIiIiPiIrcy5OYW1lICsgIjxzcGFuIGNsYXNzPSIidGFnLWNvdW50IiI+ICgiICYgcy5Db3VudCAmICIpPC9zcGFuPiIgKyI8L2E+PC9saT4iDQoJCQlFbmQgSWYNCgkJRW5kIElmDQoJTmV4dA0KDQoNCglzdHJUYWc9VHJhbnNmZXJIVE1MKHN0clRhZywiW25vLWFzcF0iKQ0KDQoNCglGdW5jdGlvbnMoRnVuY3Rpb25NZXRhcy5HZXRWYWx1ZSgidGFncyIpKS5Db250ZW50PXN0clRhZw0KCUZ1bmN0aW9ucyhGdW5jdGlvbk1ldGFzLkdldFZhbHVlKCJ0YWdzIikpLlBvc3QoKQ0KDQoJQmxvZ1JlQnVpbGRfVGFncz1UcnVlDQoNCkVuZCBGdW5jdGlvbg0KJyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KDQoNCg0KDQonKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqDQonIOebrueahO+8mg0KJyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KRnVuY3Rpb24gQmxvZ1JlQnVpbGRfUHJldmlvdXMoKQ0KDQoJJ3BsdWdpbiBub2RlDQoJYkFjdGlvbl9QbHVnaW5fQmxvZ1JlQnVpbGRfUHJldmlvdXNfQmVnaW49RmFsc2UNCglGb3IgRWFjaCBzQWN0aW9uX1BsdWdpbl9CbG9nUmVCdWlsZF9QcmV2aW91c19CZWdpbiBpbiBBY3Rpb25fUGx1Z2luX0Jsb2dSZUJ1aWxkX1ByZXZpb3VzX0JlZ2luDQoJCUlmIE5vdCBJc0VtcHR5KHNBY3Rpb25fUGx1Z2luX0Jsb2dSZUJ1aWxkX1ByZXZpb3VzX0JlZ2luKSBUaGVuIENhbGwgRXhlY3V0ZShzQWN0aW9uX1BsdWdpbl9CbG9nUmVCdWlsZF9QcmV2aW91c19CZWdpbikNCgkJSWYgYkFjdGlvbl9QbHVnaW5fQmxvZ1JlQnVpbGRfUHJldmlvdXNfQmVnaW49VHJ1ZSBUaGVuIEV4aXQgRnVuY3Rpb24NCglOZXh0DQoNCg0KCURpbSBpLGoNCglEaW0gb2JqUlMNCglEaW0gb2JqU3RyZWFtDQoJRGltIG9iakFydGljbGUNCglDYWxsIEdldEZ1bmN0aW9uKCkNCglqPUZ1bmN0aW9ucyhGdW5jdGlvbk1ldGFzLkdldFZhbHVlKCJwcmV2aW91cyIpKS5NYXhMaQ0KCQ0KCUlmIEZ1bmN0aW9ucyhGdW5jdGlvbk1ldGFzLkdldFZhbHVlKCJwcmV2aW91cyIpKS5Jc0hpZGRlbj1UcnVlIFRoZW4gDQoNCgkJRXhpdCBGdW5jdGlvbg0KCUVuZCBJZg0KCQ0KCUlmIGo9MCBUaGVuIGo9MTANCg0KCSdQcmV2aW91cw0KCURpbSBzdHJQcmV2aW91cw0KCVNldCBvYmpSUz1vYmpDb25uLkV4ZWN1dGUoIlNFTEVDVCBUT1AgIiZqJiIgW2xvZ19JRF0sW2xvZ19UYWddLFtsb2dfQ2F0ZUlEXSxbbG9nX1RpdGxlXSxbbG9nX0ludHJvXSxbbG9nX0NvbnRlbnRdLFtsb2dfTGV2ZWxdLFtsb2dfQXV0aG9ySURdLFtsb2dfUG9zdFRpbWVdLFtsb2dfQ29tbU51bXNdLFtsb2dfVmlld051bXNdLFtsb2dfVHJhY2tCYWNrTnVtc10sW2xvZ19VcmxdLFtsb2dfSXN0b3BdLFtsb2dfVGVtcGxhdGVdLFtsb2dfRnVsbFVybF0sW2xvZ19UeXBlXSxbbG9nX01ldGFdIEZST00gW2Jsb2dfQXJ0aWNsZV0gV0hFUkUgKFtsb2dfVHlwZV09MCkgQW5kIChbbG9nX0lEXT4wKSBBTkQgKFtsb2dfTGV2ZWxdPjEpIE9SREVSIEJZIFtsb2dfUG9zdFRpbWVdIERFU0MiKQ0KDQoJSWYgKE5vdCBvYmpSUy5ib2YpIEFuZCAoTm90IG9ialJTLmVvZikgVGhlbg0KCQlGb3IgaT0xIHRvIGoNCgkJCVNldCBvYmpBcnRpY2xlPU5ldyBUQXJ0aWNsZQ0KCQkJSWYgb2JqQXJ0aWNsZS5Mb2FkSW5mb0J5QXJyYXkoQXJyYXkob2JqUlMoMCksb2JqUlMoMSksb2JqUlMoMiksb2JqUlMoMyksb2JqUlMoNCksb2JqUlMoNSksb2JqUlMoNiksb2JqUlMoNyksb2JqUlMoOCksb2JqUlMoOSksb2JqUlMoMTApLG9ialJTKDExKSxvYmpSUygxMiksb2JqUlMoMTMpLG9ialJTKDE0KSxvYmpSUygxNSksb2JqUlMoMTYpLG9ialJTKDE3KSkpIFRoZW4NCgkJCQlzdHJQcmV2aW91cz1zdHJQcmV2aW91cyAmICI8bGk+PGEgaHJlZj0iIiImIG9iakFydGljbGUuSHRtbFVybCAmICIiIiB0aXRsZT0iIiImIG9iakFydGljbGUuSHRtbFRpdGxlICYiIiI+PHNwYW4gY2xhc3M9IiJhcnRpY2xlLWRhdGUiIj5bIiYgUmlnaHQoIjAiICYgTW9udGgob2JqQXJ0aWNsZS5Qb3N0VGltZSksMikgJiAiLyIgJiBSaWdodCgiMCIgJiBEYXkob2JqQXJ0aWNsZS5Qb3N0VGltZSksMikgJiJdPC9zcGFuPiIgJiBvYmpBcnRpY2xlLlRpdGxlICYgIjwvYT48L2xpPiINCgkJCUVuZCBJZg0KCQkJU2V0IG9iakFydGljbGU9Tm90aGluZw0KCQkJb2JqUlMuTW92ZU5leHQNCgkJCUlmIG9ialJTLmVvZiBUaGVuIEV4aXQgRm9yDQoJCU5leHQNCglFbmQgSWYNCglvYmpSUy5jbG9zZQ0KDQoJc3RyUHJldmlvdXM9VHJhbnNmZXJIVE1MKHN0clByZXZpb3VzLCJbbm8tYXNwXSIpDQoNCglGdW5jdGlvbnMoRnVuY3Rpb25NZXRhcy5HZXRWYWx1ZSgicHJldmlvdXMiKSkuQ29udGVudD1zdHJQcmV2aW91cw0KCUZ1bmN0aW9ucyhGdW5jdGlvbk1ldGFzLkdldFZhbHVlKCJwcmV2aW91cyIpKS5Qb3N0KCkNCglGdW5jdGlvbnMoRnVuY3Rpb25NZXRhcy5HZXRWYWx1ZSgicHJldmlvdXMiKSkuU2F2ZUZpbGUNCg0KCUJsb2dSZUJ1aWxkX1ByZXZpb3VzPVRydWUNCg0KRW5kIEZ1bmN0aW9uDQonKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqDQoNCg0KDQoNCicqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioNCicg55uu55qE77yaDQonKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqDQpGdW5jdGlvbiBCbG9nUmVCdWlsZF9Db21tZW50cygpDQoNCgkncGx1Z2luIG5vZGUNCgliQWN0aW9uX1BsdWdpbl9CbG9nUmVCdWlsZF9Db21tZW50c19CZWdpbj1GYWxzZQ0KCUZvciBFYWNoIHNBY3Rpb25fUGx1Z2luX0Jsb2dSZUJ1aWxkX0NvbW1lbnRzX0JlZ2luIGluIEFjdGlvbl9QbHVnaW5fQmxvZ1JlQnVpbGRfQ29tbWVudHNfQmVnaW4NCgkJSWYgTm90IElzRW1wdHkoc0FjdGlvbl9QbHVnaW5fQmxvZ1JlQnVpbGRfQ29tbWVudHNfQmVnaW4pIFRoZW4gQ2FsbCBFeGVjdXRlKHNBY3Rpb25fUGx1Z2luX0Jsb2dSZUJ1aWxkX0NvbW1lbnRzX0JlZ2luKQ0KCQlJZiBiQWN0aW9uX1BsdWdpbl9CbG9nUmVCdWlsZF9Db21tZW50c19CZWdpbj1UcnVlIFRoZW4gRXhpdCBGdW5jdGlvbg0KCU5leHQNCg0KCUNhbGwgR2V0RnVuY3Rpb24oKQ0KCUlmIEZ1bmN0aW9ucyhGdW5jdGlvbk1ldGFzLkdldFZhbHVlKCJjb21tZW50cyIpKS5Jc0hpZGRlbj1UcnVlIFRoZW4gDQoNCgkJRXhpdCBGdW5jdGlvbg0KCUVuZCBJZg0KCQ0KCURpbSBvYmpSUw0KCURpbSBvYmpTdHJlYW0NCglEaW0gb2JqQXJ0aWNsZQ0KDQoJJ0NvbW1lbnRzDQoJRGltIHN0ckNvbW1lbnRzDQoNCglEaW0gcyx0DQoJRGltIGksag0KDQoJaj1GdW5jdGlvbnMoRnVuY3Rpb25NZXRhcy5HZXRWYWx1ZSgiY29tbWVudHMiKSkuTWF4TGkNCglJZiBqPTAgVGhlbiBqPTEwDQoNCglTZXQgb2JqUlM9b2JqQ29ubi5FeGVjdXRlKCJTRUxFQ1QgVE9QICImaiYiIFtsb2dfSURdLFtjb21tX0lEXSxbY29tbV9Db250ZW50XSxbY29tbV9Qb3N0VGltZV0sW2NvbW1fQXV0aG9ySURdLFtjb21tX0F1dGhvcl0gRlJPTSBbYmxvZ19Db21tZW50XSBXSEVSRSBbbG9nX0lEXT4wIEFORCBbY29tbV9Jc0NoZWNrXT0wIE9SREVSIEJZIFtjb21tX1Bvc3RUaW1lXSBERVNDLFtjb21tX0lEXSBERVNDIikNCglJZiAoTm90IG9ialJTLmJvZikgQW5kIChOb3Qgb2JqUlMuZW9mKSBUaGVuDQoJCUZvciBpPTEgdG8gag0KCQkJQ2FsbCBHZXRVc2Vyc2J5VXNlcklETGlzdChvYmpSUygiY29tbV9BdXRob3JJRCIpKQ0KDQoJCQlTZXQgb2JqQXJ0aWNsZT1OZXcgVEFydGljbGUNCg0KCQkJSWYgb2JqQXJ0aWNsZS5Mb2FkSW5mb0J5SUQob2JqUlMoImxvZ19JRCIpKSBUaGVuDQoJCQkJdD1vYmpBcnRpY2xlLkZ1bGxVcmwNCgkJCUVuZCBJZg0KDQoJCQlzPW9ialJTKCJjb21tX0NvbnRlbnQiKQ0KCQkJcz1SZXBsYWNlKHMsdmJDcmxmLCIiKQ0KCQkJcz1MZWZ0KHMsWkNfQ09NTUVOVF9FWENFUlBUX01BWCkNCgkJCXM9VHJhbnNmZXJIVE1MKHMsIltub2h0bWxdIikNCgkJCQ0KCQkJc3RyQ29tbWVudHM9c3RyQ29tbWVudHMgJiAiPGxpIHN0eWxlPSIidGV4dC1vdmVyZmxvdzplbGxpcHNpczsiIj48YSBocmVmPSIiIiYgdCAmICIjY210IiAmIG9ialJTKCJjb21tX0lEIikgJiAiIiIgdGl0bGU9IiIiICYgb2JqUlMoImNvbW1fUG9zdFRpbWUiKSAmICIgcG9zdCBieSAiICYgSUlmKFVzZXJzKG9ialJTKCJjb21tX0F1dGhvcklEIikpLkxldmVsPTUsb2JqUlMoImNvbW1fQXV0aG9yIiksVXNlcnMob2JqUlMoImNvbW1fQXV0aG9ySUQiKSkuRmlyc3ROYW1lKSAmICIiIj4iK3MrIjwvYT48L2xpPiINCgkJCVNldCBvYmpBcnRpY2xlPU5vdGhpbmcNCgkJCW9ialJTLk1vdmVOZXh0DQoJCQlJZiBvYmpSUy5lb2YgVGhlbiBFeGl0IEZvcg0KCQlOZXh0DQoJRW5kIElmDQoJb2JqUlMuY2xvc2UNCglTZXQgb2JqUlM9Tm90aGluZw0KDQoJc3RyQ29tbWVudHM9VHJhbnNmZXJIVE1MKHN0ckNvbW1lbnRzLCJbbm8tYXNwXSIpDQoNCglGdW5jdGlvbnMoRnVuY3Rpb25NZXRhcy5HZXRWYWx1ZSgiY29tbWVudHMiKSkuQ29udGVudD1zdHJDb21tZW50cw0KCUZ1bmN0aW9ucyhGdW5jdGlvbk1ldGFzLkdldFZhbHVlKCJjb21tZW50cyIpKS5Qb3N0KCkNCglGdW5jdGlvbnMoRnVuY3Rpb25NZXRhcy5HZXRWYWx1ZSgiY29tbWVudHMiKSkuU2F2ZUZpbGUNCg0KCUJsb2dSZUJ1aWxkX0NvbW1lbnRzPVRydWUNCg0KRW5kIEZ1bmN0aW9uDQonKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqDQoNCg0KDQoNCicqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioNCicg55uu55qE77yaDQonKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqDQpGdW5jdGlvbiBCbG9nUmVCdWlsZF9HdWVzdENvbW1lbnRzKCkNCg0KCSdwbHVnaW4gbm9kZQ0KCWJBY3Rpb25fUGx1Z2luX0Jsb2dSZUJ1aWxkX0d1ZXN0Q29tbWVudHNfQmVnaW49RmFsc2UNCglGb3IgRWFjaCBzQWN0aW9uX1BsdWdpbl9CbG9nUmVCdWlsZF9HdWVzdENvbW1lbnRzX0JlZ2luIGluIEFjdGlvbl9QbHVnaW5fQmxvZ1JlQnVpbGRfR3Vlc3RDb21tZW50c19CZWdpbg0KCQlJZiBOb3QgSXNFbXB0eShzQWN0aW9uX1BsdWdpbl9CbG9nUmVCdWlsZF9HdWVzdENvbW1lbnRzX0JlZ2luKSBUaGVuIENhbGwgRXhlY3V0ZShzQWN0aW9uX1BsdWdpbl9CbG9nUmVCdWlsZF9HdWVzdENvbW1lbnRzX0JlZ2luKQ0KCQlJZiBiQWN0aW9uX1BsdWdpbl9CbG9nUmVCdWlsZF9HdWVzdENvbW1lbnRzX0JlZ2luPVRydWUgVGhlbiBFeGl0IEZ1bmN0aW9uDQoJTmV4dA0KDQoJQmxvZ1JlQnVpbGRfR3Vlc3RDb21tZW50cz1UcnVlDQoNCkVuZCBGdW5jdGlvbg0KJyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KDQoNCg0KDQonKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqDQonIOebrueahO+8mg0KJyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KRnVuY3Rpb24gQmxvZ1JlQnVpbGRfVHJhY2tCYWNrcygpDQoNCgkncGx1Z2luIG5vZGUNCgliQWN0aW9uX1BsdWdpbl9CbG9nUmVCdWlsZF9UcmFja0JhY2tzX0JlZ2luPUZhbHNlDQoJRm9yIEVhY2ggc0FjdGlvbl9QbHVnaW5fQmxvZ1JlQnVpbGRfVHJhY2tCYWNrc19CZWdpbiBpbiBBY3Rpb25fUGx1Z2luX0Jsb2dSZUJ1aWxkX1RyYWNrQmFja3NfQmVnaW4NCgkJSWYgTm90IElzRW1wdHkoc0FjdGlvbl9QbHVnaW5fQmxvZ1JlQnVpbGRfVHJhY2tCYWNrc19CZWdpbikgVGhlbiBDYWxsIEV4ZWN1dGUoc0FjdGlvbl9QbHVnaW5fQmxvZ1JlQnVpbGRfVHJhY2tCYWNrc19CZWdpbikNCgkJSWYgYkFjdGlvbl9QbHVnaW5fQmxvZ1JlQnVpbGRfVHJhY2tCYWNrc19CZWdpbj1UcnVlIFRoZW4gRXhpdCBGdW5jdGlvbg0KCU5leHQNCg0KCUJsb2dSZUJ1aWxkX1RyYWNrQmFja3M9VHJ1ZQ0KDQpFbmQgRnVuY3Rpb24NCicqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioNCg0KDQoNCg0KJyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KJyDnm67nmoTvvJoNCicqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioNCkZ1bmN0aW9uIEJsb2dSZUJ1aWxkX1N0YXRpc3RpY3MoKQ0KDQoJJ3BsdWdpbiBub2RlDQoJYkFjdGlvbl9QbHVnaW5fQmxvZ1JlQnVpbGRfU3RhdGlzdGljc19CZWdpbj1GYWxzZQ0KCUZvciBFYWNoIHNBY3Rpb25fUGx1Z2luX0Jsb2dSZUJ1aWxkX1N0YXRpc3RpY3NfQmVnaW4gaW4gQWN0aW9uX1BsdWdpbl9CbG9nUmVCdWlsZF9TdGF0aXN0aWNzX0JlZ2luDQoJCUlmIE5vdCBJc0VtcHR5KHNBY3Rpb25fUGx1Z2luX0Jsb2dSZUJ1aWxkX1N0YXRpc3RpY3NfQmVnaW4pIFRoZW4gQ2FsbCBFeGVjdXRlKHNBY3Rpb25fUGx1Z2luX0Jsb2dSZUJ1aWxkX1N0YXRpc3RpY3NfQmVnaW4pDQoJCUlmIGJBY3Rpb25fUGx1Z2luX0Jsb2dSZUJ1aWxkX1N0YXRpc3RpY3NfQmVnaW49VHJ1ZSBUaGVuIEV4aXQgRnVuY3Rpb24NCglOZXh0DQoNCglEaW0gaQ0KCURpbSBvYmpSUw0KCURpbSBvYmpTdHJlYW0NCglDYWxsIEdldEZ1bmN0aW9uKCkNCglJZiBGdW5jdGlvbnMoRnVuY3Rpb25NZXRhcy5HZXRWYWx1ZSgic3RhdGlzdGljcyIpKS5Jc0hpZGRlbj1UcnVlIFRoZW4gDQoNCgkJRXhpdCBGdW5jdGlvbg0KCUVuZCBJZg0KDQoJJ1N0YXRpc3RpY3MNCglEaW0gc3RyU3RhdGlzdGljcw0KCVNldCBvYmpSUz1TZXJ2ZXIuQ3JlYXRlT2JqZWN0KCJBRE9EQi5SZWNvcmRzZXQiKQ0KCW9ialJTLkN1cnNvclR5cGUgPSBhZE9wZW5LZXlzZXQNCglvYmpSUy5Mb2NrVHlwZSA9IGFkTG9ja1JlYWRPbmx5DQoJb2JqUlMuQWN0aXZlQ29ubmVjdGlvbj1vYmpDb25uDQoJb2JqUlMuU291cmNlPSIiDQoNCglvYmpSUy5PcGVuKCJTRUxFQ1QgQ09VTlQoW2xvZ19JRF0pQVMgYWxsQXJ0aWNsZSxTVU0oW2xvZ19WaWV3TnVtc10pIEFTIGFsbFZpZXdOdW1zIEZST00gW2Jsb2dfQXJ0aWNsZV0gV0hFUkUgW2xvZ19UeXBlXT0wIikNCglJZiAoTm90IG9ialJTLmJvZikgQW5kIChOb3Qgb2JqUlMuZW9mKSBUaGVuDQoJCXN0clN0YXRpc3RpY3M9c3RyU3RhdGlzdGljcyAmICI8bGk+IiYgWkNfTVNHMDgyICYiOiIgJiBvYmpSUygiYWxsQXJ0aWNsZSIpICYgIjwvbGk+Ig0KCQlzdHJTdGF0aXN0aWNzPXN0clN0YXRpc3RpY3MgJiAiPGxpPiImIFpDX01TRzEyNCAmIjoiICYgb2JqQ29ubi5FeGVjdXRlKCJTRUxFQ1QgU1VNKFtsb2dfQ29tbU51bXNdKSBGUk9NIFtibG9nX0FydGljbGVdIikoMCkgJiAiPC9saT4iDQoJCXN0clN0YXRpc3RpY3M9c3RyU3RhdGlzdGljcyAmICI8bGk+IiYgWkNfTVNHMTI5ICYiOiIgJiBvYmpSUygiYWxsVmlld051bXMiKSAmICI8L2xpPiINCglFbmQgSWYNCglvYmpSUy5DbG9zZQ0KDQoJc3RyU3RhdGlzdGljcz1zdHJTdGF0aXN0aWNzICYgIjxsaT4iJiBaQ19NU0cyMDQgJiI6IiAmIEdldE5hbWVGb3JtVGhlbWUoWkNfQkxPR19USEVNRSkgJiAiPC9saT4iDQoJJ3N0clN0YXRpc3RpY3M9c3RyU3RhdGlzdGljcyAmICI8bGk+IiYgWkNfTVNHMDgzICYiOiIgJiBaQ19CTE9HX0NTUyAmICI8L2xpPiINCg0KCVNldCBvYmpSUz1Ob3RoaW5nDQoNCglzdHJTdGF0aXN0aWNzPVRyYW5zZmVySFRNTChzdHJTdGF0aXN0aWNzLCJbbm8tYXNwXSIpDQoNCgkNCglGdW5jdGlvbnMoRnVuY3Rpb25NZXRhcy5HZXRWYWx1ZSgic3RhdGlzdGljcyIpKS5Db250ZW50PXN0clN0YXRpc3RpY3MNCglGdW5jdGlvbnMoRnVuY3Rpb25NZXRhcy5HZXRWYWx1ZSgic3RhdGlzdGljcyIpKS5Qb3N0KCkNCg0KCUJsb2dSZUJ1aWxkX1N0YXRpc3RpY3M9VHJ1ZQ0KDQpFbmQgRnVuY3Rpb24NCicqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioNCg0KDQoNCg0KJyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KJyDnm67nmoTvvJogICAgQmxvZ1JlQnVpbGQgRnVuY3Rpb25zDQonKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqDQpGdW5jdGlvbiBCbG9nUmVCdWlsZF9GdW5jdGlvbnMNCg0KCSdwbHVnaW4gbm9kZQ0KCWJBY3Rpb25fUGx1Z2luX0Jsb2dSZUJ1aWxkX0Z1bmN0aW9uc19CZWdpbj1GYWxzZQ0KCUZvciBFYWNoIHNBY3Rpb25fUGx1Z2luX0Jsb2dSZUJ1aWxkX0Z1bmN0aW9uc19CZWdpbiBpbiBBY3Rpb25fUGx1Z2luX0Jsb2dSZUJ1aWxkX0Z1bmN0aW9uc19CZWdpbg0KCQlJZiBOb3QgSXNFbXB0eShzQWN0aW9uX1BsdWdpbl9CbG9nUmVCdWlsZF9GdW5jdGlvbnNfQmVnaW4pIFRoZW4gQ2FsbCBFeGVjdXRlKHNBY3Rpb25fUGx1Z2luX0Jsb2dSZUJ1aWxkX0Z1bmN0aW9uc19CZWdpbikNCgkJSWYgYkFjdGlvbl9QbHVnaW5fQmxvZ1JlQnVpbGRfRnVuY3Rpb25zX0JlZ2luPVRydWUgVGhlbiBFeGl0IEZ1bmN0aW9uDQoJTmV4dA0KDQoJSXNSdW5GdW5jdGlvbnM9RmFsc2UNCglDYWxsIEdldEZ1bmN0aW9uKCkNCg0KCUNhbGwgU2F2ZUZ1bmN0aW9uVHlwZSgpDQoNCglEaW0gaSxqLHMsdCxmDQoNCglGb3IgRWFjaCBmIEluIEZ1bmN0aW9ucw0KCQlJZiBJc09iamVjdChmKT1UcnVlIFRoZW4NCgkJCUlmIGYuaWQ+MCBBbmQgZi5Tb3VyY2VUeXBlPD4ib3RoZXIiIFRoZW4NCgkJCQlmLlNhdmVGaWxlDQoJCQlFbmQgSWYNCgkJRW5kIElmIA0KCU5leHQNCg0KDQoJRGltIGFyeUZ1bmN0aW9uSW5PcmRlcg0KCSdhcnlGdW5jdGlvbkluT3JkZXI9R2V0RnVuY3Rpb25PcmRlcigpDQoNCgl0PUdldFRlbXBsYXRlKCJURU1QTEFURV9CX0ZVTkNUSU9OIikNCg0KCWFyeUZ1bmN0aW9uSW5PcmRlcj1TcGxpdChaQ19TSURFQkFSX09SREVSLCI6IikNCglzPSIiDQoJRm9yIEVhY2ggZiBJbiBhcnlGdW5jdGlvbkluT3JkZXINCgkJSWYgRnVuY3Rpb25NZXRhcy5FeGlzdHMoZik9VHJ1ZSBUaGVuDQoJCQlJZiBGdW5jdGlvbnMoRnVuY3Rpb25NZXRhcy5HZXRWYWx1ZShmKSkuSXNIaWRkZW49RmFsc2UgVGhlbg0KCQkJCXM9cyAmIEZ1bmN0aW9ucyhGdW5jdGlvbk1ldGFzLkdldFZhbHVlKGYpKS5NYWtlVGVtcGxhdGUodCkNCgkJCUVuZCBJZg0KCQlFbmQgSWYNCglOZXh0DQoJQ2FsbCBTYXZlVG9GaWxlKEJsb2dQYXRoICYgInpiX3VzZXJzL2NhY2hlL3NpZGViYXIuYXNwIixzLCJ1dGYtOCIsRmFsc2UpDQoNCglhcnlGdW5jdGlvbkluT3JkZXI9U3BsaXQoWkNfU0lERUJBUl9PUkRFUjIsIjoiKQ0KCXM9IiINCglGb3IgRWFjaCBmIEluIGFyeUZ1bmN0aW9uSW5PcmRlcg0KCQlJZiBGdW5jdGlvbk1ldGFzLkV4aXN0cyhmKT1UcnVlIFRoZW4NCgkJCUlmIEZ1bmN0aW9ucyhGdW5jdGlvbk1ldGFzLkdldFZhbHVlKGYpKS5Jc0hpZGRlbj1GYWxzZSBUaGVuDQoJCQkJcz1zICYgRnVuY3Rpb25zKEZ1bmN0aW9uTWV0YXMuR2V0VmFsdWUoZikpLk1ha2VUZW1wbGF0ZSh0KQ0KCQkJRW5kIElmDQoJCUVuZCBJZg0KCU5leHQNCglDYWxsIFNhdmVUb0ZpbGUoQmxvZ1BhdGggJiAiemJfdXNlcnMvY2FjaGUvc2lkZWJhcjIuYXNwIixzLCJ1dGYtOCIsRmFsc2UpDQoNCglhcnlGdW5jdGlvbkluT3JkZXI9U3BsaXQoWkNfU0lERUJBUl9PUkRFUjMsIjoiKQ0KCXM9IiINCglGb3IgRWFjaCBmIEluIGFyeUZ1bmN0aW9uSW5PcmRlcg0KCQlJZiBGdW5jdGlvbk1ldGFzLkV4aXN0cyhmKT1UcnVlIFRoZW4NCgkJCUlmIEZ1bmN0aW9ucyhGdW5jdGlvbk1ldGFzLkdldFZhbHVlKGYpKS5Jc0hpZGRlbj1GYWxzZSBUaGVuDQoJCQkJcz1zICYgRnVuY3Rpb25zKEZ1bmN0aW9uTWV0YXMuR2V0VmFsdWUoZikpLk1ha2VUZW1wbGF0ZSh0KQ0KCQkJRW5kIElmDQoJCUVuZCBJZg0KCU5leHQNCglDYWxsIFNhdmVUb0ZpbGUoQmxvZ1BhdGggJiAiemJfdXNlcnMvY2FjaGUvc2lkZWJhcjMuYXNwIixzLCJ1dGYtOCIsRmFsc2UpDQoNCglhcnlGdW5jdGlvbkluT3JkZXI9U3BsaXQoWkNfU0lERUJBUl9PUkRFUjQsIjoiKQ0KCXM9IiINCglGb3IgRWFjaCBmIEluIGFyeUZ1bmN0aW9uSW5PcmRlcg0KCQlJZiBGdW5jdGlvbk1ldGFzLkV4aXN0cyhmKT1UcnVlIFRoZW4NCgkJCUlmIEZ1bmN0aW9ucyhGdW5jdGlvbk1ldGFzLkdldFZhbHVlKGYpKS5Jc0hpZGRlbj1GYWxzZSBUaGVuDQoJCQkJcz1zICYgRnVuY3Rpb25zKEZ1bmN0aW9uTWV0YXMuR2V0VmFsdWUoZikpLk1ha2VUZW1wbGF0ZSh0KQ0KCQkJRW5kIElmDQoJCUVuZCBJZg0KCU5leHQNCglDYWxsIFNhdmVUb0ZpbGUoQmxvZ1BhdGggJiAiemJfdXNlcnMvY2FjaGUvc2lkZWJhcjQuYXNwIixzLCJ1dGYtOCIsRmFsc2UpDQoNCglhcnlGdW5jdGlvbkluT3JkZXI9U3BsaXQoWkNfU0lERUJBUl9PUkRFUjUsIjoiKQ0KCXM9IiINCglGb3IgRWFjaCBmIEluIGFyeUZ1bmN0aW9uSW5PcmRlcg0KCQlJZiBGdW5jdGlvbk1ldGFzLkV4aXN0cyhmKT1UcnVlIFRoZW4NCgkJCUlmIEZ1bmN0aW9ucyhGdW5jdGlvbk1ldGFzLkdldFZhbHVlKGYpKS5Jc0hpZGRlbj1GYWxzZSBUaGVuDQoJCQkJcz1zICYgRnVuY3Rpb25zKEZ1bmN0aW9uTWV0YXMuR2V0VmFsdWUoZikpLk1ha2VUZW1wbGF0ZSh0KQ0KCQkJRW5kIElmDQoJCUVuZCBJZg0KCU5leHQNCglDYWxsIFNhdmVUb0ZpbGUoQmxvZ1BhdGggJiAiemJfdXNlcnMvY2FjaGUvc2lkZWJhcjUuYXNwIixzLCJ1dGYtOCIsRmFsc2UpDQonCU5leHQNCg0KCUJsb2dSZUJ1aWxkX0Z1bmN0aW9ucz1UcnVlDQoNCkVuZCBGdW5jdGlvbg0KJyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KDQoNCg0KDQonKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqDQonIOebrueahO+8miAgICBCbG9nUmVCdWlsZCBEZWZhdWx0DQonKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqDQpGdW5jdGlvbiBCbG9nUmVCdWlsZF9EZWZhdWx0DQoNCgkncGx1Z2luIG5vZGUNCgliQWN0aW9uX1BsdWdpbl9CbG9nUmVCdWlsZF9EZWZhdWx0X0JlZ2luPUZhbHNlDQoJRm9yIEVhY2ggc0FjdGlvbl9QbHVnaW5fQmxvZ1JlQnVpbGRfRGVmYXVsdF9CZWdpbiBpbiBBY3Rpb25fUGx1Z2luX0Jsb2dSZUJ1aWxkX0RlZmF1bHRfQmVnaW4NCgkJSWYgTm90IElzRW1wdHkoc0FjdGlvbl9QbHVnaW5fQmxvZ1JlQnVpbGRfRGVmYXVsdF9CZWdpbikgVGhlbiBDYWxsIEV4ZWN1dGUoc0FjdGlvbl9QbHVnaW5fQmxvZ1JlQnVpbGRfRGVmYXVsdF9CZWdpbikNCgkJSWYgYkFjdGlvbl9QbHVnaW5fQmxvZ1JlQnVpbGRfRGVmYXVsdF9CZWdpbj1UcnVlIFRoZW4gRXhpdCBGdW5jdGlvbg0KCU5leHQNCg0KCUNhbGwgQ2xlYXJHbG9iZUNhY2hlKCkNCglDYWxsIExvYWRHbG9iZUNhY2hlKCkNCg0KCVRlbXBsYXRlVGFnc0RpYy5JdGVtKCJaQ19CTE9HX0hPU1QiKT0iPCNaQ19CTE9HX0hPU1QjPiINCg0KCURpbSBBcnRMaXN0DQoJU2V0IEFydExpc3Q9TmV3IFRBcnRpY2xlTGlzdA0KDQoJQXJ0TGlzdC5Mb2FkQ2FjaGUNCg0KCUFydExpc3QudGVtcGxhdGU9IkRFRkFVTFQiDQoNCglJZiBBcnRMaXN0LkV4cG9ydCgiIiwiIiwiIiwiIiwiIixaQ19ESVNQTEFZX01PREVfSU5UUk8pIFRoZW4NCg0KCQlBcnRMaXN0LkJ1aWxkDQoNCgkJQ2FsbCBTYXZlVG9GaWxlKEJsb2dQYXRoICYgInpiX3VzZXJzL0NBQ0hFL2RlZmF1bHQuYXNwIixBcnRMaXN0Lmh0bWwsInV0Zi04IixGYWxzZSkgDQoNCglFbmQgSWYNCg0KDQoJQmxvZ1JlQnVpbGRfRGVmYXVsdD1UcnVlDQoNCkVuZCBGdW5jdGlvbg0KJyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KDQoNCg0KDQoNCicvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLw0KJyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KJyDnm67nmoTvvJogICAgRXhwb3J0IFJTUyAyLjANCicqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioNCkZ1bmN0aW9uIEV4cG9ydFJTUygpDQoNCgkncGx1Z2luIG5vZGUNCgliQWN0aW9uX1BsdWdpbl9FeHBvcnRSU1NfQmVnaW49RmFsc2UNCglGb3IgRWFjaCBzQWN0aW9uX1BsdWdpbl9FeHBvcnRSU1NfQmVnaW4gaW4gQWN0aW9uX1BsdWdpbl9FeHBvcnRSU1NfQmVnaW4NCgkJSWYgTm90IElzRW1wdHkoc0FjdGlvbl9QbHVnaW5fRXhwb3J0UlNTX0JlZ2luKSBUaGVuIENhbGwgRXhlY3V0ZShzQWN0aW9uX1BsdWdpbl9FeHBvcnRSU1NfQmVnaW4pDQoJCUlmIGJBY3Rpb25fUGx1Z2luX0V4cG9ydFJTU19CZWdpbj1UcnVlIFRoZW4gRXhpdCBGdW5jdGlvbg0KCU5leHQNCg0KCURpbSBSc3MyRXhwb3J0DQoJRGltIG9iakFydGljbGUNCg0KCVNldCBSc3MyRXhwb3J0ID0gTmV3IFROZXdSc3MyRXhwb3J0DQoNCglXaXRoIFJzczJFeHBvcnQNCg0KCQkuVGltZVpvbmU9WkNfVElNRV9aT05FDQoNCgkJLkFkZENoYW5uZWxBdHRyaWJ1dGUgInRpdGxlIixUcmFuc2ZlckhUTUwoWkNfQkxPR19USVRMRSwiW2h0bWwtZm9ybWF0XSIpDQoJCS5BZGRDaGFubmVsQXR0cmlidXRlICJsaW5rIixUcmFuc2ZlckhUTUwoQmxvZ0hvc3QsIltodG1sLWZvcm1hdF0iKQ0KCQkuQWRkQ2hhbm5lbEF0dHJpYnV0ZSAiZGVzY3JpcHRpb24iLFRyYW5zZmVySFRNTChaQ19CTE9HX1NVQlRJVExFLCJbaHRtbC1mb3JtYXRdIikNCgkJLkFkZENoYW5uZWxBdHRyaWJ1dGUgImdlbmVyYXRvciIsIlJhaW5ib3dTb2Z0IFN0dWRpbyBaLUJsb2cgIiAmIFpDX0JMT0dfVkVSU0lPTg0KCQkuQWRkQ2hhbm5lbEF0dHJpYnV0ZSAibGFuZ3VhZ2UiLFpDX0JMT0dfTEFOR1VBR0UNCgkJLkFkZENoYW5uZWxBdHRyaWJ1dGUgInB1YkRhdGUiLEdldFRpbWUoTm93KCkpDQoNCgkJCURpbSBpDQoJCQlEaW0gb2JqUlMNCgkJCVNldCBvYmpSUz1vYmpDb25uLkV4ZWN1dGUoIlNFTEVDVCBUT1AgIiZaQ19SU1MyX0NPVU5UJiIgW2xvZ19JRF0sW2xvZ19UYWddLFtsb2dfQ2F0ZUlEXSxbbG9nX1RpdGxlXSxbbG9nX0ludHJvXSxbbG9nX0NvbnRlbnRdLFtsb2dfTGV2ZWxdLFtsb2dfQXV0aG9ySURdLFtsb2dfUG9zdFRpbWVdLFtsb2dfQ29tbU51bXNdLFtsb2dfVmlld051bXNdLFtsb2dfVHJhY2tCYWNrTnVtc10sW2xvZ19VcmxdLFtsb2dfSXN0b3BdLFtsb2dfVGVtcGxhdGVdLFtsb2dfRnVsbFVybF0sW2xvZ19UeXBlXSxbbG9nX01ldGFdIEZST00gW2Jsb2dfQXJ0aWNsZV0gV0hFUkUgKFtsb2dfVHlwZV09MCkgQW5kIChbbG9nX0lEXT4wKSBBTkQgKFtsb2dfTGV2ZWxdPjIpIE9SREVSIEJZIFtsb2dfUG9zdFRpbWVdIERFU0MiKQ0KDQoJCQlJZiAoTm90IG9ialJTLmJvZikgQW5kIChOb3Qgb2JqUlMuZW9mKSBUaGVuDQoJCQkJRm9yIGk9MSB0byBaQ19SU1MyX0NPVU5UDQoJCQkJCVNldCBvYmpBcnRpY2xlPU5ldyBUQXJ0aWNsZQ0KCQkJCQlJZiBvYmpBcnRpY2xlLkxvYWRJbmZvQnlBcnJheShBcnJheShvYmpSUygwKSxvYmpSUygxKSxvYmpSUygyKSxvYmpSUygzKSxvYmpSUyg0KSxvYmpSUyg1KSxvYmpSUyg2KSxvYmpSUyg3KSxvYmpSUyg4KSxvYmpSUyg5KSxvYmpSUygxMCksb2JqUlMoMTEpLG9ialJTKDEyKSxvYmpSUygxMyksb2JqUlMoMTQpLG9ialJTKDE1KSxvYmpSUygxNiksb2JqUlMoMTcpKSkgVGhlbg0KDQoJCQkJCUlmIFpDX1JTU19FWFBPUlRfV0hPTEUgVGhlbg0KCQkJCQkuQWRkSXRlbSBvYmpBcnRpY2xlLkh0bWxUaXRsZSxVc2VycyhvYmpBcnRpY2xlLkF1dGhvcklEKS5FbWFpbCAmICIgKCIgJiBVc2VycyhvYmpBcnRpY2xlLkF1dGhvcklEKS5GaXJzdE5hbWUgJiAiKSIsb2JqQXJ0aWNsZS5IdG1sVXJsLG9iakFydGljbGUuUG9zdFRpbWUsb2JqQXJ0aWNsZS5IdG1sVXJsLG9iakFydGljbGUuSHRtbENvbnRlbnQsQ2F0ZWdvcnlzKG9iakFydGljbGUuQ2F0ZUlEKS5IdG1sTmFtZSxvYmpBcnRpY2xlLkNvbW1lbnRVcmwsb2JqQXJ0aWNsZS5XZndDb21tZW50LG9iakFydGljbGUuV2Z3Q29tbWVudFJzcyxvYmpBcnRpY2xlLlRyYWNrQmFja1VybA0KCQkJCQlFbHNlDQoJCQkJCS5BZGRJdGVtIG9iakFydGljbGUuSHRtbFRpdGxlLFVzZXJzKG9iakFydGljbGUuQXV0aG9ySUQpLkVtYWlsICYgIiAoIiAmIFVzZXJzKG9iakFydGljbGUuQXV0aG9ySUQpLkZpcnN0TmFtZSAmICIpIixvYmpBcnRpY2xlLkh0bWxVcmwsb2JqQXJ0aWNsZS5Qb3N0VGltZSxvYmpBcnRpY2xlLkh0bWxVcmwsb2JqQXJ0aWNsZS5IdG1sSW50cm8sQ2F0ZWdvcnlzKG9iakFydGljbGUuQ2F0ZUlEKS5IdG1sTmFtZSxvYmpBcnRpY2xlLkNvbW1lbnRVcmwsb2JqQXJ0aWNsZS5XZndDb21tZW50LG9iakFydGljbGUuV2Z3Q29tbWVudFJzcyxvYmpBcnRpY2xlLlRyYWNrQmFja1VybA0KCQkJCQlFbmQgSWYNCg0KCQkJCQlFbmQgSWYNCgkJCQkJb2JqUlMuTW92ZU5leHQNCgkJCQkJSWYgb2JqUlMuZW9mIFRoZW4gRXhpdCBGb3INCgkJCQkJU2V0IG9iakFydGljbGU9Tm90aGluZw0KCQkJCU5leHQNCgkJCUVuZCBJZg0KDQoJRW5kIFdpdGgNCg0KCVJzczJFeHBvcnQuU2F2ZVRvRmlsZShCbG9nUGF0aCAmICJ6Yl91c2Vycy9jYWNoZS9yc3MueG1sIikNCg0KCVNldCBSc3MyRXhwb3J0ID0gTm90aGluZw0KDQoJb2JqUlMuY2xvc2UNCglTZXQgb2JqUlM9Tm90aGluZw0KCUV4cG9ydFJTUz1UcnVlDQoNCkVuZCBGdW5jdGlvbg0KJyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KDQoNCg0KDQonKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqDQonIOebrueahO+8miAgICBFeHBvcnQgQVRPTSAxLjANCicqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioNCkZ1bmN0aW9uIEV4cG9ydEFUT00oKQ0KDQoNCkVuZCBGdW5jdGlvbg0KJyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KDQoNCg0KDQonKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqDQonIOebrueahO+8miAgICBCdWlsZCBDYXRlZ29yeQ0KJyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KRnVuY3Rpb24gQnVpbGRDYXRlZ29yeShpbnRQYWdlLGludENhdGVJZCxpbnRBdXRob3JJZCxkdG1ZZWFyTW9udGgsc3RyVGFnc05hbWUsaW50VHlwZSxzdHJEaXJlY3Rvcnksc3RyRmlsZU5hbWUpDQoNCkVuZCBGdW5jdGlvbg0KJyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KDQoNCg0KDQonKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqDQonIOebrueahO+8miAgICBCdWlsZCBBcnRpY2xlDQonKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqDQpGdW5jdGlvbiBCdWlsZEFydGljbGUoaW50SUQsYm9sQnVpbGROYXZpZ2F0ZSxib2xCdWlsZENhdGVnb3J5KQ0KDQoJRGltIG9iakFydGljbGUNCglTZXQgb2JqQXJ0aWNsZT1OZXcgVEFydGljbGUNCg0KCUlmIG9iakFydGljbGUuTG9hZEluZm9CeUlEKGludElEKSBUaGVuDQoJCUlmIG9iakFydGljbGUuRXhwb3J0KFpDX0RJU1BMQVlfTU9ERV9BTEwpIFRoZW4NCgkJCW9iakFydGljbGUuU2F2ZUNhY2hlDQoJCQlvYmpBcnRpY2xlLlN0YXRpc3RpYw0KCQkJb2JqQXJ0aWNsZS5CdWlsZA0KCQkJb2JqQXJ0aWNsZS5TYXZlDQoJCUVuZCBJZg0KDQoJCUlmIFpDX1BPU1RfU1RBVElDX01PREU9IlNUQVRJQyIgVGhlbg0KDQoJCQlJZiAoYm9sQnVpbGROYXZpZ2F0ZT1UcnVlKSBBbmQgKFpDX1VTRV9OQVZJR0FURV9BUlRJQ0xFPVRydWUpIFRoZW4NCg0KCQkJCURpbSBvYmpSUw0KCQkJCVNldCBvYmpSUz1vYmpDb25uLkV4ZWN1dGUoIlNFTEVDVCBUT1AgMSBbbG9nX0lEXSBGUk9NIFtibG9nX0FydGljbGVdIFdIRVJFIChbbG9nX0xldmVsXT4yKSBBTkQgKFtsb2dfVHlwZV09MCkgQU5EIChbbG9nX1Bvc3RUaW1lXTwiICYgWkNfU1FMX1BPVU5EX0tFWSAmIG9iakFydGljbGUuUG9zdFRpbWUgJiBaQ19TUUxfUE9VTkRfS0VZICYiKSBPUkRFUiBCWSBbbG9nX1Bvc3RUaW1lXSBERVNDIikNCgkJCQlJZiAoTm90IG9ialJTLmJvZikgQW5kIChOb3Qgb2JqUlMuZW9mKSBUaGVuDQoJCQkJCUNhbGwgQnVpbGRBcnRpY2xlKG9ialJTKCJsb2dfSUQiKSxGYWxzZSxGYWxzZSkNCgkJCQlFbmQgSWYNCgkJCQlTZXQgb2JqUlM9Tm90aGluZw0KCQkJCVNldCBvYmpSUz1vYmpDb25uLkV4ZWN1dGUoIlNFTEVDVCBUT1AgMSBbbG9nX0lEXSBGUk9NIFtibG9nX0FydGljbGVdIFdIRVJFIChbbG9nX0xldmVsXT4yKSBBTkQgKFtsb2dfVHlwZV09MCkgQU5EIChbbG9nX1Bvc3RUaW1lXT4iICYgWkNfU1FMX1BPVU5EX0tFWSAmIG9iakFydGljbGUuUG9zdFRpbWUgJiBaQ19TUUxfUE9VTkRfS0VZICYiKSBPUkRFUiBCWSBbbG9nX1Bvc3RUaW1lXSBBU0MiKQ0KCQkJCUlmIChOb3Qgb2JqUlMuYm9mKSBBbmQgKE5vdCBvYmpSUy5lb2YpIFRoZW4NCgkJCQkJQ2FsbCBCdWlsZEFydGljbGUob2JqUlMoImxvZ19JRCIpLEZhbHNlLEZhbHNlKQ0KCQkJCUVuZCBJZg0KCQkJCVNldCBvYmpSUz1Ob3RoaW5nDQoNCgkJCUVuZCBJZg0KDQoJCUVuZCBJZg0KDQoJCUJ1aWxkQXJ0aWNsZT1UcnVlDQoNCglFbmQgSWYNCg0KCVNldCBvYmpBcnRpY2xlPU5vdGhpbmcNCg0KRW5kIEZ1bmN0aW9uDQonKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqDQoNCg0KDQoNCicqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioNCicg55uu55qE77yaICAgIEdldFVzZXJzYnlVc2VySURMaXN0DQonKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqDQpGdW5jdGlvbiBHZXRVc2Vyc2J5VXNlcklETGlzdChzdHJVc2VycykNCidzdHJUYWdzPTEsMiwzLDQsNSw2LDcsOA0KDQpJZiBzdHJVc2Vycz0iIiBUaGVuIEV4aXQgRnVuY3Rpb24NCg0KRGltIHMsdCxpLGosZA0KDQp0PVNwbGl0KHN0clVzZXJzLCIsIikNCg0KU2V0IGQgPSBDcmVhdGVPYmplY3QoIlNjcmlwdGluZy5EaWN0aW9uYXJ5IikNCg0KRm9yIGk9TEJvdW5kKHQpIFRvIFVCb3VuZCh0KQ0KCUlmIFRyaW0odChpKSk8PiIiIFRoZW4NCgkJSWYgVUJvdW5kKFVzZXJzKT49dChpKSBUaGVuDQoJCQlJZiBJc09iamVjdChVc2Vycyh0KGkpKSk9RmFsc2UgVGhlbg0KCQkJCUlmIGQuRXhpc3RzKHQoaSkpPUZhbHNlIFRoZW4gQ2FsbCBkLmFkZCh0KGkpLHQoaSkpDQoJCQlFbmQgSWYNCgkJRWxzZQ0KCQkJSWYgZC5FeGlzdHModChpKSk9RmFsc2UgVGhlbiBDYWxsIGQuYWRkKHQoaSksdChpKSkNCgkJRW5kIElmDQoJRW5kIElmDQpOZXh0DQoNCnQgPSBkLktleXMNCkZvciBpID0gMCBUbyBkLkNvdW50IC0xDQoNCglJZiBVQm91bmQoVXNlcnMpPj1DTG5nKHQoaSkpIFRoZW4NCgkJSWYgSXNPYmplY3QoVXNlcnModChpKSkpPUZhbHNlIFRoZW4gDQoJCQlqPWorMQ0KCQkJcz1zICYgIihbbWVtX0lEXT0iJkNMbmcodChpKSkmIikgT3IiDQoJCUVuZCBJZg0KCUVsc2UNCgkJaj1qKzENCgkJcz1zICYgIihbbWVtX0lEXT0iJkNMbmcodChpKSkmIikgT3IiDQoJRW5kIElmDQoJSWYgaj0xMDAgVGhlbg0KCQlDYWxsIEdldFVzZXJzX1N1YihzKQ0KCQlqPTANCgkJcz0iIg0KCUVuZCBJZg0KTmV4dA0KDQpDYWxsIEdldFVzZXJzX1N1YihzKQ0KDQpHZXRVc2Vyc2J5VXNlcklETGlzdD1UcnVlDQoNCg0KDQpFbmQgRnVuY3Rpb24NCicqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioNCg0KDQoNCg0KJyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KJyDnm67nmoTvvJogICAgR2V0VXNlcnNieVVzZXLlrZDlh73mlbANCicqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioNClN1YiBHZXRVc2Vyc19TdWIocykNCg0KSWYgTGVuKHMpPjIgVGhlbiANCglzPUxlZnQocyxMZW4ocyktMikNCkVsc2UNCglFeGl0IFN1Yg0KRW5kIElmDQoNCkRpbSBvYmpSUw0KRGltIG9ialVzZXINCg0KU2V0IG9ialJTPW9iakNvbm4uRXhlY3V0ZSgiU0VMRUNUIFttZW1fSURdLFttZW1fTmFtZV0sW21lbV9MZXZlbF0sW21lbV9QYXNzd29yZF0sW21lbV9FbWFpbF0sW21lbV9Ib21lUGFnZV0sW21lbV9Qb3N0TG9nc10sW21lbV9VcmxdLFttZW1fVGVtcGxhdGVdLFttZW1fRnVsbFVybF0sW21lbV9JbnRyb10sW21lbV9NZXRhXSBGUk9NIFtibG9nX01lbWJlcl0gV0hFUkUgKCIgJiBzICYgIikiKQ0KDQpJZiAoTm90IG9ialJTLmJvZikgQW5kIChOb3Qgb2JqUlMuZW9mKSBUaGVuDQoNCglEbyBXaGlsZSBOb3Qgb2JqUlMuZW9mDQoNCgkJU2V0IG9ialVzZXI9TmV3IFRVc2VyDQoJCUNhbGwgb2JqVXNlci5Mb2FkSW5mb0J5QXJyYXkoQXJyYXkob2JqUlMoMCksb2JqUlMoMSksb2JqUlMoMiksb2JqUlMoMyksb2JqUlMoNCksb2JqUlMoNSksb2JqUlMoNiksb2JqUlMoNyksb2JqUlMoOCksb2JqUlMoOSksb2JqUlMoMTApLG9ialJTKDExKSkpDQoNCgkJSWYgVUJvdW5kKFVzZXJzKTxvYmpVc2VyLklEIFRoZW4NCgkJCVJlRGltIFByZXNlcnZlIFVzZXJzKG9ialVzZXIuSUQpDQoJCUVuZCBJZg0KDQoJCVNldCBVc2VycyhvYmpVc2VyLklEKT1vYmpVc2VyDQoNCgkJU2V0IG9ialVzZXI9Tm90aGluZw0KDQoJCW9ialJTLk1vdmVOZXh0DQoJTG9vcA0KDQpFbmQgSWYNCg0Kb2JqUlMuQ2xvc2UNClNldCBvYmpSUz1Ob3RoaW5nDQoNCkVuZCBTdWINCicqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioNCg0KDQoNCg0KJyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KJyDnm67nmoTvvJogICAgR2V0VGFnc2J5VGFnSURMaXN0DQonKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqDQpGdW5jdGlvbiBHZXRUYWdzYnlUYWdJRExpc3Qoc3RyVGFncykNCidzdHJUYWdzPXsxfXsyfXszfXs0fQ0KDQpJZiBzdHJUYWdzPSIiIFRoZW4gRXhpdCBGdW5jdGlvbg0KSWYgc3RyVGFncz0ie30iIFRoZW4gRXhpdCBGdW5jdGlvbg0KSWYgSXNOdWxsKHN0clRhZ3MpIFRoZW4gRXhpdCBGdW5jdGlvbg0KDQpEaW0gcyx0LGksaixkDQpzdHJUYWdzPVJlcGxhY2Uoc3RyVGFncywifSIsIiIpDQp0PVNwbGl0KHN0clRhZ3MsInsiKQ0KDQpTZXQgZCA9IENyZWF0ZU9iamVjdCgiU2NyaXB0aW5nLkRpY3Rpb25hcnkiKQ0KDQpGb3IgaT1MQm91bmQodCkgVG8gVUJvdW5kKHQpDQoJSWYgVHJpbSh0KGkpKTw+IiIgVGhlbg0KCQlJZiBVQm91bmQoVGFncyk+PXQoaSkgVGhlbg0KCQkJSWYgSXNPYmplY3QoVGFncyh0KGkpKSk9RmFsc2UgVGhlbg0KCQkJCUlmIGQuRXhpc3RzKHQoaSkpPUZhbHNlIFRoZW4gQ2FsbCBkLmFkZCh0KGkpLHQoaSkpDQoJCQlFbmQgSWYNCgkJRWxzZQ0KCQkJSWYgZC5FeGlzdHModChpKSk9RmFsc2UgVGhlbiBDYWxsIGQuYWRkKHQoaSksdChpKSkNCgkJRW5kIElmDQoJRW5kIElmDQpOZXh0DQoNCnQgPSBkLktleXMNCkZvciBpID0gMCBUbyBkLkNvdW50IC0xDQoNCglJZiBVQm91bmQoVGFncyk+PUNMbmcodChpKSkgVGhlbg0KCQlJZiBJc09iamVjdChUYWdzKHQoaSkpKT1GYWxzZSBUaGVuIA0KCQkJaj1qKzENCgkJCXM9cyAmICIoW3RhZ19JRF09IiZDTG5nKHQoaSkpJiIpIE9yIg0KCQlFbmQgSWYNCglFbHNlDQoJCWo9aisxDQoJCXM9cyAmICIoW3RhZ19JRF09IiZDTG5nKHQoaSkpJiIpIE9yIg0KCUVuZCBJZg0KCUlmIGo9MTAwIFRoZW4NCgkJQ2FsbCBHZXRUYWdzX1N1YihzKQ0KCQlqPTANCgkJcz0iIg0KCUVuZCBJZg0KTmV4dA0KDQpDYWxsIEdldFRhZ3NfU3ViKHMpDQoNCkdldFRhZ3NieVRhZ0lETGlzdD1UcnVlDQoNCkVuZCBGdW5jdGlvbg0KJyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KDQoNCg0KDQonKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqDQonIOebrueahO+8miAgICBHZXRUYWdzYnlUYWflrZDlh73mlbANCicqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioNClN1YiBHZXRUYWdzX1N1YihzKQ0KDQpJZiBMZW4ocyk+MiBUaGVuIA0KCXM9TGVmdChzLExlbihzKS0yKQ0KRWxzZQ0KCUV4aXQgU3ViDQpFbmQgSWYNCg0KRGltIG9ialJTDQpEaW0gb2JqVGFnDQoNClNldCBvYmpSUz1vYmpDb25uLkV4ZWN1dGUoIlNFTEVDVCBbdGFnX0lEXSxbdGFnX05hbWVdLFt0YWdfSW50cm9dLFt0YWdfT3JkZXJdLFt0YWdfQ291bnRdLFt0YWdfUGFyZW50SURdLFt0YWdfVVJMXSxbdGFnX1RlbXBsYXRlXSxbdGFnX0Z1bGxVcmxdLFt0YWdfTWV0YV0gRlJPTSBbYmxvZ19UYWddIFdIRVJFICgiICYgcyAmICIpIikNCg0KSWYgKE5vdCBvYmpSUy5ib2YpIEFuZCAoTm90IG9ialJTLmVvZikgVGhlbg0KDQoJRG8gV2hpbGUgTm90IG9ialJTLmVvZg0KDQoJCVNldCBvYmpUYWc9TmV3IFRUYWcNCgkJQ2FsbCBvYmpUYWcuTG9hZEluZm9CeUFycmF5KEFycmF5KG9ialJTKDApLG9ialJTKDEpLG9ialJTKDIpLG9ialJTKDMpLG9ialJTKDQpLG9ialJTKDUpLG9ialJTKDYpLG9ialJTKDcpLG9ialJTKDgpLG9ialJTKDkpKSkNCg0KCQlJZiBVQm91bmQoVGFncyk8b2JqVGFnLklEIFRoZW4NCgkJCVJlRGltIFByZXNlcnZlIFRhZ3Mob2JqVGFnLklEKQ0KCQlFbmQgSWYNCg0KCQlTZXQgVGFncyhvYmpUYWcuSUQpPW9ialRhZw0KDQoJCVNldCBvYmpUYWc9Tm90aGluZw0KDQoJCW9ialJTLk1vdmVOZXh0DQoJTG9vcA0KDQpFbmQgSWYNCg0Kb2JqUlMuQ2xvc2UNClNldCBvYmpSUz1Ob3RoaW5nDQoNCkVuZCBTdWINCicqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioNCg0KDQoNCg0KJyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KJyDnm67nmoTvvJogICAgR2V0VGFnc2J5VGFnTmFtZUxpc3QNCicqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioNCkZ1bmN0aW9uIEdldFRhZ3NieVRhZ05hbWVMaXN0KHN0clRhZ3MpDQonc3RyVGFncz1hLGIsYyxkLGUsZixnDQoNClNldCBUYWdzKDApPU5ldyBUVGFnDQoNCklmIHN0clRhZ3M9IiIgVGhlbiBFeGl0IEZ1bmN0aW9uDQoNCkRpbSBzLHQsaQ0KdD1TcGxpdChzdHJUYWdzLCIsIikNCg0KRm9yIGk9TEJvdW5kKHQpIFRvIFVCb3VuZCh0KQ0KCUlmIFRyaW0odChpKSk8PiIiIFRoZW4NCgkJcz1zICYgIihbdGFnX05hbWVdPSciJkZpbHRlclNRTCh0KGkpKSYiJykgT3IiDQoJRW5kIElmDQpOZXh0DQoNCkNhbGwgR2V0VGFnc19TdWIocykNCg0KR2V0VGFnc2J5VGFnTmFtZUxpc3Q9VHJ1ZQ0KDQpFbmQgRnVuY3Rpb24NCicqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioNCg0KDQoNCg0KJyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KJyDnm67nmoTvvJogICAgDQonKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqDQpGdW5jdGlvbiBHZXRDb21tZW50Rmxvb3IoSUQpDQoNCglEaW0gaSxqDQoJaT1JRA0KCWo9MA0KDQoJRGltIG9ialJTDQoNCglEbyBXaGlsZSBpPjANCg0KCQlqPWorMQ0KDQoJCVNldCBvYmpSUz1vYmpDb25uLkV4ZWN1dGUoIlNFTEVDVCBbY29tbV9QYXJlbnRJRF0gRlJPTSBbYmxvZ19Db21tZW50XSBXSEVSRSBbY29tbV9JRF0gPSIgJiBpKQ0KDQoJCUlmIChOb3Qgb2JqUlMuYm9mKSBBbmQgKE5vdCBvYmpSUy5lb2YpIFRoZW4NCgkJCWk9b2JqUlMoMCkNCgkJRWxzZQ0KCQkJaT0wDQoJCUVuZCBJZg0KDQoJTG9vcA0KDQoJR2V0Q29tbWVudEZsb29yPWoNCg0KDQpFbmQgRnVuY3Rpb24NCicqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioNCg0KDQoNCg0KJyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KJyDnm67nmoTvvJogICAg5bqf5byDDQonKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqDQpGdW5jdGlvbiBHZXRGdW5jdGlvbk9yZGVyKCkNCg0KCURpbSBpDQoJRGltIG9ialJTDQoNCglTZXQgb2JqUlM9U2VydmVyLkNyZWF0ZU9iamVjdCgiQURPREIuUmVjb3Jkc2V0IikNCglvYmpSUy5DdXJzb3JUeXBlID0gYWRPcGVuS2V5c2V0DQoJb2JqUlMuTG9ja1R5cGUgPSBhZExvY2tSZWFkT25seQ0KCW9ialJTLkFjdGl2ZUNvbm5lY3Rpb249b2JqQ29ubg0KCW9ialJTLlNvdXJjZT0iIg0KDQoJRGltIGFyeUNhdGVJbk9yZGVyKCkNCglpPTANCg0KCW9ialJTLk9wZW4oIlNFTEVDVCBbZm5faWRdIEZST00gW2Jsb2dfRnVuY3Rpb25dIE9SREVSIEJZIFtmbl9PcmRlcl0gQVNDLFtmbl9JRF0gQVNDIikNCglEbyBXaGlsZSBOb3Qgb2JqUlMuZW9mDQoJCWk9aSsxDQoJCVJlRGltIFByZXNlcnZlIGFyeUNhdGVJbk9yZGVyKGkpDQoJCWFyeUNhdGVJbk9yZGVyKGkpPW9ialJTKCJmbl9JRCIpDQoJCW9ialJTLk1vdmVOZXh0DQoJTG9vcA0KCW9ialJTLkNsb3NlDQoJU2V0IG9ialJTPU5vdGhpbmcNCg0KCUlmIGk+MCBUaGVuIEdldEZ1bmN0aW9uT3JkZXI9YXJ5Q2F0ZUluT3JkZXINCglJZiBpPTAgVGhlbiBHZXRGdW5jdGlvbk9yZGVyPUFycmF5KCkNCg0KCUVyYXNlIGFyeUNhdGVJbk9yZGVyDQoNCkVuZCBGdW5jdGlvbg0KJyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KDQoNCg0KDQonKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqDQonIOebrueahO+8mg0KJyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KRnVuY3Rpb24gU2F2ZUZ1bmN0aW9uVHlwZSgpDQoNCglDYWxsIEdldEZ1bmN0aW9uKCkNCg0KCURpbSB0IA0KDQoJU2V0IHQ9TmV3IFRNZXRhDQoNCglEaW0gaQ0KDQoJRm9yIGk9MSBUbyBVQm91bmQoRnVuY3Rpb25zKQ0KCQlJZiBJc09iamVjdChGdW5jdGlvbnMoaSkpPVRydWUgVGhlbg0KDQoJCQlDYWxsIHQuU2V0VmFsdWUoRnVuY3Rpb25zKGkpLkZpbGVOYW1lLEZ1bmN0aW9ucyhpKS5GVHlwZSkNCg0KCQlFbmQgSWYNCglOZXh0DQoNCglDYWxsIFNhdmVUb0ZpbGUoQmxvZ1BhdGggJiAiemJfdXNlcnMvQ0FDSEUvZnVuY3Rpb25zdHlwZS5hc3AiLHQuU2F2ZVN0cmluZywidXRmLTgiLEZhbHNlKQ0KDQoJU2F2ZUZ1bmN0aW9uVHlwZT1UcnVlDQoNCkVuZCBGdW5jdGlvbg0KJyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KDQoNCg0KDQonKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqDQonIOebrueahO+8miAgICBDcmVhdGUgQWRtaW4gTWVudQ0KJyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KRnVuY3Rpb24gQ3JlYXRlQWRtaW5MZWZ0TWVudSgpDQoNCiflvLrliLbmuIXnqbpNZW51LOmYsuatouafkOS6m+aPkuS7tuaPkOWJjeaPkuWFpemAoOaIkOaOkuWcqOezu+e7n+iPnOWNleS5i+WJjSzmj5Lku7bmj5LlhaXoj5zljZXopoHlnKjns7vnu5/liJ3lp4vljJblrozmiJDlkI4NClJlc3BvbnNlX1BsdWdpbl9BZG1pbl9MZWZ0PSIiDQoNCkNhbGwgQWRkX1Jlc3BvbnNlX1BsdWdpbigiUmVzcG9uc2VfUGx1Z2luX0FkbWluX0xlZnQiLE1ha2VMZWZ0TWVudShHZXRSaWdodHMoIkFydGljbGVFZHQiKSxaQ19NU0cxNjgsQmxvZ0hvc3QmInpiX3N5c3RlbS9jbWQuYXNwP2FjdD1BcnRpY2xlRWR0JmFtcDt3ZWJlZGl0PSImWkNfQkxPR19XRUJFRElULCJuYXZfbmV3IiwiYUFydGljbGVFZHQiLCIiKSkNCkNhbGwgQWRkX1Jlc3BvbnNlX1BsdWdpbigiUmVzcG9uc2VfUGx1Z2luX0FkbWluX0xlZnQiLE1ha2VMZWZ0TWVudShHZXRSaWdodHMoIkFydGljbGVNbmciKSxaQ19NU0cwNjcsQmxvZ0hvc3QmInpiX3N5c3RlbS9jbWQuYXNwP2FjdD1BcnRpY2xlTW5nIiwibmF2X2FydGljbGUiLCJhQXJ0aWNsZU1uZyIsIiIpKQ0KQ2FsbCBBZGRfUmVzcG9uc2VfUGx1Z2luKCJSZXNwb25zZV9QbHVnaW5fQWRtaW5fTGVmdCIsTWFrZUxlZnRNZW51KEdldFJpZ2h0cygiQXJ0aWNsZUFsbCIpLFpDX01TRzExMSxCbG9nSG9zdCYiemJfc3lzdGVtL2NtZC5hc3A/YWN0PUFydGljbGVNbmcmYW1wO3R5cGU9UGFnZSIsIm5hdl9wYWdlIiwiYVBhZ2VNbmciLCIiKSkNCg0KQ2FsbCBBZGRfUmVzcG9uc2VfUGx1Z2luKCJSZXNwb25zZV9QbHVnaW5fQWRtaW5fTGVmdCIsIjxsaSBjbGFzcz0nc3BsaXQnPjxoci8+PC9saT4iKQ0KDQoNCkNhbGwgQWRkX1Jlc3BvbnNlX1BsdWdpbigiUmVzcG9uc2VfUGx1Z2luX0FkbWluX0xlZnQiLE1ha2VMZWZ0TWVudShHZXRSaWdodHMoIkNhdGVnb3J5TW5nIiksWkNfTVNHMDY2LEJsb2dIb3N0JiJ6Yl9zeXN0ZW0vY21kLmFzcD9hY3Q9Q2F0ZWdvcnlNbmciLCJuYXZfY2F0ZWdvcnkiLCJhQ2F0ZWdvcnlNbmciLCIiKSkNCkNhbGwgQWRkX1Jlc3BvbnNlX1BsdWdpbigiUmVzcG9uc2VfUGx1Z2luX0FkbWluX0xlZnQiLE1ha2VMZWZ0TWVudShHZXRSaWdodHMoIlRhZ01uZyIpLFpDX01TRzE0MSxCbG9nSG9zdCYiemJfc3lzdGVtL2NtZC5hc3A/YWN0PVRhZ01uZyIsIm5hdl90YWdzIiwiYVRhZ01uZyIsIiIpKQ0KQ2FsbCBBZGRfUmVzcG9uc2VfUGx1Z2luKCJSZXNwb25zZV9QbHVnaW5fQWRtaW5fTGVmdCIsTWFrZUxlZnRNZW51KEdldFJpZ2h0cygiQ29tbWVudE1uZyIpLFpDX01TRzA2OCxCbG9nSG9zdCYiemJfc3lzdGVtL2NtZC5hc3A/YWN0PUNvbW1lbnRNbmciLCJuYXZfY29tbWVudHMiLCJhQ29tbWVudE1uZyIsIiIpKQ0KQ2FsbCBBZGRfUmVzcG9uc2VfUGx1Z2luKCJSZXNwb25zZV9QbHVnaW5fQWRtaW5fTGVmdCIsTWFrZUxlZnRNZW51KEdldFJpZ2h0cygiRmlsZU1uZyIpLFpDX01TRzA3MSxCbG9nSG9zdCYiemJfc3lzdGVtL2NtZC5hc3A/YWN0PUZpbGVNbmciLCJuYXZfYWNjZXNzb3JpZXMiLCJhRmlsZU1uZyIsIiIpKQ0KQ2FsbCBBZGRfUmVzcG9uc2VfUGx1Z2luKCJSZXNwb25zZV9QbHVnaW5fQWRtaW5fTGVmdCIsTWFrZUxlZnRNZW51KEdldFJpZ2h0cygiVXNlck1uZyIpLFpDX01TRzA3MCxCbG9nSG9zdCYiemJfc3lzdGVtL2NtZC5hc3A/YWN0PVVzZXJNbmciLCJuYXZfdXNlciIsImFVc2VyTW5nIiwiIikpDQoNCkNhbGwgQWRkX1Jlc3BvbnNlX1BsdWdpbigiUmVzcG9uc2VfUGx1Z2luX0FkbWluX0xlZnQiLCI8bGkgY2xhc3M9J3NwbGl0Jz48aHIvPjwvbGk+IikNCg0KQ2FsbCBBZGRfUmVzcG9uc2VfUGx1Z2luKCJSZXNwb25zZV9QbHVnaW5fQWRtaW5fTGVmdCIsTWFrZUxlZnRNZW51KEdldFJpZ2h0cygiVGhlbWVNbmciKSxaQ19NU0cyMjMsQmxvZ0hvc3QmInpiX3N5c3RlbS9jbWQuYXNwP2FjdD1UaGVtZU1uZyIsIm5hdl90aGVtZXMiLCJhVGhlbWVNbmciLCIiKSkNCkNhbGwgQWRkX1Jlc3BvbnNlX1BsdWdpbigiUmVzcG9uc2VfUGx1Z2luX0FkbWluX0xlZnQiLE1ha2VMZWZ0TWVudShHZXRSaWdodHMoIlBsdWdJbk1uZyIpLFpDX01TRzEwNyxCbG9nSG9zdCYiemJfc3lzdGVtL2NtZC5hc3A/YWN0PVBsdWdJbk1uZyIsIm5hdl9wbHVnaW4iLCJhUGx1Z0luTW5nIiwiIikpDQpDYWxsIEFkZF9SZXNwb25zZV9QbHVnaW4oIlJlc3BvbnNlX1BsdWdpbl9BZG1pbl9MZWZ0IixNYWtlTGVmdE1lbnUoR2V0UmlnaHRzKCJGdW5jdGlvbk1uZyIpLFpDX01TRzAwNyxCbG9nSG9zdCYiemJfc3lzdGVtL2NtZC5hc3A/YWN0PUZ1bmN0aW9uTW5nIiwibmF2X2Z1bmN0aW9uIiwiYUZ1bmN0aW9uTW5nIiwiIikpDQoNCg0KRW5kIEZ1bmN0aW9uDQonKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqDQoNCg0KDQoNCicqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioNCicg55uu55qE77yaICAgIENyZWF0ZSBUb3AgTWVudQ0KJyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KRnVuY3Rpb24gQ3JlYXRlQWRtaW5Ub3BNZW51KCkNCg0KUmVzcG9uc2VfUGx1Z2luX0FkbWluX1RvcD0iIg0KDQpDYWxsIEFkZF9SZXNwb25zZV9QbHVnaW4oIlJlc3BvbnNlX1BsdWdpbl9BZG1pbl9Ub3AiLE1ha2VUb3BNZW51KEdldFJpZ2h0cygiYWRtaW4iKSxaQ19NU0cyNDUsQmxvZ0hvc3QmInpiX3N5c3RlbS9jbWQuYXNwP2FjdD1hZG1pbiIsIiIsIiIpKQ0KQ2FsbCBBZGRfUmVzcG9uc2VfUGx1Z2luKCJSZXNwb25zZV9QbHVnaW5fQWRtaW5fVG9wIixNYWtlVG9wTWVudShHZXRSaWdodHMoIlNldHRpbmdNbmciKSxaQ19NU0cyNDcsQmxvZ0hvc3QmInpiX3N5c3RlbS9jbWQuYXNwP2FjdD1TZXR0aW5nTW5nIiwiIiwiIikpDQpJZiBOb3QgWkNfUE9TVF9TVEFUSUNfTU9ERTw+IlNUQVRJQyIgVGhlbiANCglDYWxsIEFkZF9SZXNwb25zZV9QbHVnaW4oIlJlc3BvbnNlX1BsdWdpbl9BZG1pbl9Ub3AiLE1ha2VUb3BNZW51KEdldFJpZ2h0cygiQXNrRmlsZVJlQnVpbGQiKSxaQ19NU0cwNzMsQmxvZ0hvc3QmInpiX3N5c3RlbS9jbWQuYXNwP2FjdD1Bc2tGaWxlUmVCdWlsZCIsIiIsIiIpKQ0KRW5kIElmDQoNCg0KRW5kIEZ1bmN0aW9uDQonKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqDQoNCg0KDQoNCicqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioNCicg55uu55qE77yaICAgIGh0bWw9UmVzcG9uc2VfUGx1Z2luX0FkbWluX0xlZnQNCicqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioNCkZ1bmN0aW9uIFJlc3BvbnNlQWRtaW5MZWZ0TWVudShodG1sKQ0KCUNhbGwgRmlsdGVyX1BsdWdpbl9SZXNwb25zZUFkbWluTGVmdE1lbnUoaHRtbCkNCglSZXNwb25zZUFkbWluTGVmdE1lbnU9aHRtbA0KRW5kIEZ1bmN0aW9uDQonKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqDQoNCg0KDQoNCicqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioNCicg55uu55qE77yaICAgIGh0bWw9UmVzcG9uc2VfUGx1Z2luX0FkbWluX1RvcA0KJyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KRnVuY3Rpb24gUmVzcG9uc2VBZG1pblRvcE1lbnUoaHRtbCkNCglDYWxsIEZpbHRlcl9QbHVnaW5fUmVzcG9uc2VBZG1pblRvcE1lbnUoaHRtbCkNCglSZXNwb25zZUFkbWluVG9wTWVudT1odG1sDQpFbmQgRnVuY3Rpb24NCicqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioNCg0KDQoNCg0KJyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KJyDnm67nmoTvvJogICAgU2VhcmNoIENoaWxkIENvbW1lbnRzJ+mAkuW9kg0KJyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KRnVuY3Rpb24gU2VhcmNoQ2hpbGRDb21tZW50cyhCeVZhbCBpZCxCeVJlZiBhbGxjb21tKQ0KDQoJSWYgSXNPYmplY3QoYWxsY29tbSk9RmFsc2UgVGhlbg0KCQlTZXQgYWxsY29tbT1DcmVhdGVPYmplY3QoIlNjcmlwdGluZy5EaWN0aW9uYXJ5IikNCglFbmQgSWYNCg0KCURpbSBvYmpSUw0KCVNldCBvYmpSUz1vYmpDb25uLkV4ZWN1dGUoIlNFTEVDVCBbY29tbV9JRF0gRlJPTSBbYmxvZ19Db21tZW50XSBXSEVSRSBbY29tbV9QYXJlbnRJRF09IiZpZCkNCglJZiAoTm90IG9ialJTLmJvZikgQW5kIChOb3Qgb2JqUlMuZW9mKSBUaGVuDQoJCURvIFdoaWxlIE5vdCBvYmpSUy5lb2YNCgkJCUlmIGFsbGNvbW0uRXhpc3RzKG9ialJTKCJjb21tX0lEIikpPUZhbHNlIFRoZW4NCgkJCQlhbGxjb21tLmFkZCBDTG5nKG9ialJTKCJjb21tX0lEIikpLCIiDQoJCQlFbmQgSWYNCgkJCUNhbGwgU2VhcmNoQ2hpbGRDb21tZW50cyhvYmpSUygiY29tbV9JRCIpLGFsbGNvbW0pDQoJCQlvYmpSUy5Nb3ZlTmV4dA0KCQlMb29wDQoJCVNlYXJjaENoaWxkQ29tbWVudHM9VHJ1ZQ0KCUVsc2UNCgkJU2VhcmNoQ2hpbGRDb21tZW50cz1GYWxzZQ0KCUVuZCBJZg0KDQpFbmQgRnVuY3Rpb24NCicqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioNCg0KDQoNCg0KJyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KJyDnm67nmoTvvJogICAgQWRkIEJhdGNoIA0KJyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KRnVuY3Rpb24gQWRkQmF0Y2gobmFtZSxhY3Rpb25jb2RlKQ0KDQoJSWYgSXNPYmplY3QoU2Vzc2lvbigiYmF0Y2giKSk9RmFsc2UgVEhlbg0KCQlTZXQgU2Vzc2lvbigiYmF0Y2giKT1DcmVhdGVPYmplY3QoIlNjcmlwdGluZy5EaWN0aW9uYXJ5IikNCgkJU2Vzc2lvbigiYmF0Y2hvcmRlciIpPTANCgkJU2Vzc2lvbigiYmF0Y2h0aW1lIik9MA0KCUVuZCBJZg0KDQoJJ+ajgOWImeaYr+WQpuacquWujOaIkOaJueaTjeS9nCzmnKrlrozmiJDnmoTor53kuI3mlrDlop7liqDmibnmk43kvZwuDQoJSWYgU2Vzc2lvbigiYmF0Y2giKS5Db3VudCA8PiBDTG5nKFNlc3Npb24oImJhdGNob3JkZXIiKSkgVGhlbiBFeGl0IEZ1bmN0aW9uDQoNCglEaW0gaQ0KCWk9U2Vzc2lvbigiYmF0Y2hvcmRlciIpKzENCg0KCVNlc3Npb24oImJhdGNob3JkZXIiKT1pDQoJQ2FsbCBTZXNzaW9uKCJiYXRjaCIpLmFkZCgiPGI+IiAmIGkgJiAiPC9iPiA6IDx1PiIgJiBuYW1lICYgIjwvdT4iLGFjdGlvbmNvZGUpDQoNCkVuZCBGdW5jdGlvbg0KJyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KDQoNCg0KDQonKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqDQonIOebrueahO+8miAgICBTYXZlIENvbmZpZyB0byBvcHRpb24uYXNwDQonKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqDQpGdW5jdGlvbiBTYXZlQ29uZmlnMk9wdGlvbigpDQoNCglEaW0gc3RyQ29udGVudA0KCXN0ckNvbnRlbnQ9TG9hZEZyb21GaWxlKEJsb2dQYXRoICYgInpiX3N5c3RlbVxkZWZlbmRcY19vcHRpb24uYXNwLmh0bWwiLCJ1dGYtOCIpDQoNCg0KCURpbSBpDQoNCglGb3IgaT0xIFRvIEJsb2dDb25maWcuQ291bnQNCg0KCQlJZiBUcmltKEJsb2dDb25maWcuTWV0YS5HZXRWYWx1ZShCbG9nQ29uZmlnLk1ldGEuTmFtZXMoaSkpKT0iIiBBbmQgSW5TdHIoc3RyQ29udGVudCwiIiIiJiAiPCMiJkJsb2dDb25maWcuTWV0YS5OYW1lcyhpKSYiIz4iICYiIiIiKT0wIFRoZW4NCgkJCXN0ckNvbnRlbnQ9UmVwbGFjZShzdHJDb250ZW50LCI8IyImQmxvZ0NvbmZpZy5NZXRhLk5hbWVzKGkpJiIjPiIsIkVtcHR5IikNCgkJRWxzZQ0KCQkJc3RyQ29udGVudD1SZXBsYWNlKHN0ckNvbnRlbnQsIjwjIiZCbG9nQ29uZmlnLk1ldGEuTmFtZXMoaSkmIiM+IixSZXBsYWNlKEJsb2dDb25maWcuTWV0YS5HZXRWYWx1ZShCbG9nQ29uZmlnLk1ldGEuTmFtZXMoaSkpLCIiIiIsIiIiIiIiKSkNCgkJRW5kIElmDQoNCglOZXh0DQoNCglDYWxsIEJsb2dDb25maWcuU2F2ZSgpDQoNCglDYWxsIFNhdmVUb0ZpbGUoQmxvZ1BhdGggJiAiemJfdXNlcnNcY19vcHRpb24uYXNwIixzdHJDb250ZW50LCJ1dGYtOCIsRmFsc2UpDQoNCkVuZCBGdW5jdGlvbg0KJyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KDQoNCg0KDQonKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqDQonIOebrueahO+8miAgICDml6XmnJ/nsbvnmoTnroDljJblh73mlbAgUmVnZXgNCicqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioNCkZ1bmN0aW9uIFJlZ2V4YnlEYXRlKHksbSxkKQ0KDQoJUmVnZXhieURhdGU9WkNfREFURV9SRUdFWA0KDQpFbmQgRnVuY3Rpb24NCicqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioNCicqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioNCicg55uu55qE77yaICAgIOaXpeacn+exu+eahOeugOWMluWHveaVsCBGdWxsUGF0aA0KJyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KRnVuY3Rpb24gRnVsbFBhdGgoeSxtLGQpDQoJRnVsbFBhdGg9UGFyc2VDdXN0b21EaXJlY3RvcnlGb3JQYXRoKEZ1bGxSZWdleCxaQ19TVEFUSUNfRElSRUNUT1JZLCIiLCIiLHksbSxkLCIiLCIiLCIiKQ0KRW5kIEZ1bmN0aW9uDQonKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqDQonKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqDQonIOebrueahO+8miAgICDml6XmnJ/nsbvnmoTnroDljJblh73mlbAgVXJsDQonKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqDQpGdW5jdGlvbiBVcmxieURhdGUoeSxtLGQpDQoNCglVcmxieURhdGU9UGFyc2VDdXN0b21EaXJlY3RvcnlGb3JVcmwoUmVnZXhieURhdGUoeSxtLGQpLFpDX1NUQVRJQ19ESVJFQ1RPUlksIiIsIiIseSxtLGQsIiIsIiIsIiIpDQoNCkVuZCBGdW5jdGlvbg0KJyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KJyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KJyDnm67nmoTvvJogICAg5pel5pyf57G755qE566A5YyW5Ye95pWwIFVybCBhdXRvDQonKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqDQpGdW5jdGlvbiBVcmxieURhdGVBdXRvKHksbSxkKQ0KCURpbSBzDQoJSWYgWkNfU1RBVElDX01PREU9Ik1JWCIgVGhlbg0KCQlzPVBhcnNlQ3VzdG9tRGlyZWN0b3J5Rm9yVXJsKCJ7JWhvc3QlfS9jYXRhbG9nLmFzcD9kYXRlPXsleWVhciV9LXslbW9udGglfSIsWkNfU1RBVElDX0RJUkVDVE9SWSwiIiwiIix5LG0sZCwiIiwiIiwiIikNCglFbHNlDQoJCXM9VXJsYnlEYXRlKHksbSxkKQ0KCUVuZCBJZg0KCUlmIFJpZ2h0KHMsMTIpPSJkZWZhdWx0Lmh0bWwiIFRoZW4gcz1MZWZ0KHMsTGVuKHMpLTEyKQ0KCVVybGJ5RGF0ZUF1dG89cw0KRW5kIEZ1bmN0aW9uDQonKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqDQoNCg0KDQoNCicqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioNCicg55uu55qE77yaICDliLfmlrBjX29wdGlvbi5hc3Doh7PmlbDmja7lupMgIA0KJyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KRnVuY3Rpb24gUmVmcmVzaE9wdGlvbkZvcm1GaWxlVG9EQigpDQoJT24gRXJyb3IgUmVzdW1lIE5leHQNCg0KCUlmIE5vdCBDaGVja1VwZGF0ZURCKCJbZm5fU291cmNlXSIsIltibG9nX0Z1bmN0aW9uXSIpIFRoZW4NCgkJSUYgWkNfTVNTUUxfRU5BQkxFPVRydWUgVGhlbgkNCgkJCW9iakNvbm4uZXhlY3V0ZSgiQUxURVIgVEFCTEUgW2Jsb2dfRnVuY3Rpb25dIEFERCBmbl9Tb3VyY2UgbnZhcmNoYXIoNTApIGRlZmF1bHQgJyciKQ0KCQkJb2JqQ29ubi5leGVjdXRlKCJBTFRFUiBUQUJMRSBbYmxvZ19GdW5jdGlvbl0gQUREIGZuX1ZpZXdUeXBlIG52YXJjaGFyKDUwKSBkZWZhdWx0ICcnIikNCgkJCW9iakNvbm4uZXhlY3V0ZSgiQUxURVIgVEFCTEUgW2Jsb2dfRnVuY3Rpb25dIEFERCBmbl9Jc0hpZGRlbiBiaXQgZGVmYXVsdCAwIikNCgkJRWxzZQ0KCQkJb2JqQ29ubi5leGVjdXRlKCJBTFRFUiBUQUJMRSBbYmxvZ19GdW5jdGlvbl0gQUREIENPTFVNTiBmbl9Tb3VyY2UgVkFSQ0hBUig1MCkgZGVmYXVsdCAiIiIiIikNCgkJCW9iakNvbm4uZXhlY3V0ZSgiQUxURVIgVEFCTEUgW2Jsb2dfRnVuY3Rpb25dIEFERCBDT0xVTU4gZm5fVmlld1R5cGUgVkFSQ0hBUig1MCkgZGVmYXVsdCAiIiIiIikNCgkJCW9iakNvbm4uZXhlY3V0ZSgiQUxURVIgVEFCTEUgW2Jsb2dfRnVuY3Rpb25dIEFERCBDT0xVTU4gZm5fSXNIaWRkZW4gWUVTTk8gREVGQVVMVCAwIikNCgkJRW5kIElmDQoNCgkJb2JqQ29ubi5leGVjdXRlKCJVUERBVEUgW2Jsb2dfRnVuY3Rpb25dIFNFVCBbZm5fU291cmNlXT0nc3lzdGVtJyBXSEVSRSBbZm5fSXNTeXN0ZW1dPD4wIikNCgkJb2JqQ29ubi5leGVjdXRlKCJVUERBVEUgW2Jsb2dfRnVuY3Rpb25dIFNFVCBbZm5fU291cmNlXT0ndXNlcnMnIFdIRVJFIFtmbl9Jc1N5c3RlbV09MCIpDQoJCW9iakNvbm4uZXhlY3V0ZSgiVVBEQVRFIFtibG9nX0Z1bmN0aW9uXSBTRVQgW2ZuX0lzSGlkZGVuXT0wIikNCgkJb2JqQ29ubi5leGVjdXRlKCJVUERBVEUgW2Jsb2dfRnVuY3Rpb25dIFNFVCBbZm5fVmlld1R5cGVdPScnIikNCgkJb2JqQ29ubi5leGVjdXRlKCJVUERBVEUgW2Jsb2dfRnVuY3Rpb25dIFNFVCBbZm5fTWV0YV09JyciKQ0KDQoJCUlGIFpDX01TU1FMX0VOQUJMRT1UcnVlIFRoZW4JDQoJCQlvYmpDb25uLmV4ZWN1dGUoIkFMVEVSIFRBQkxFIFtibG9nX0Z1bmN0aW9uXSBEUk9QIENPTFVNTiBmbl9Jc1N5c3RlbSIpDQoJCUVsc2UNCgkJCW9iakNvbm4uZXhlY3V0ZSgiQUxURVIgVEFCTEUgW2Jsb2dfRnVuY3Rpb25dIERST1AgQ09MVU1OIGZuX0lzU3lzdGVtIikNCgkJRW5kIElmDQoNCgkJSUYgWkNfTVNTUUxfRU5BQkxFPVRydWUgVGhlbgkNCgkJCW9iakNvbm4uZXhlY3V0ZSgiQUxURVIgVEFCTEUgW2Jsb2dfRnVuY3Rpb25dIEFERCBmbl9Jc0hpZGVUaXRsZSBiaXQgZGVmYXVsdCAwIikNCgkJRWxzZQ0KCQkJb2JqQ29ubi5leGVjdXRlKCJBTFRFUiBUQUJMRSBbYmxvZ19GdW5jdGlvbl0gQUREIENPTFVNTiBmbl9Jc0hpZGVUaXRsZSBZRVNOTyBERUZBVUxUIDAiKQ0KCQlFbmQgSWYNCgkJb2JqQ29ubi5leGVjdXRlKCJVUERBVEUgW2Jsb2dfRnVuY3Rpb25dIFNFVCBbZm5fSXNIaWRlVGl0bGVdPTAiKQ0KCUVuZCBJZg0KDQoJRGltIGEsYg0KCWI9TG9hZEZyb21GaWxlKEJsb2dQYXRoICYiemJfdXNlcnNcY19vcHRpb24uYXNwIiwidXRmLTgiKQ0KCUZvciBFYWNoIGEgSW4gQmxvZ0NvbmZpZy5NZXRhLk5hbWVzDQoJCUlmIEluU3RyKGIsIkRpbSAiJiBhKT4wIFRoZW4NCgkJCUNhbGwgRXhlY3V0ZSgiQ2FsbCBCbG9nQ29uZmlnLldyaXRlKCIiIiZhJiIiIiwiJmEmIikiKQ0KCQlFbmQgSWYNCglOZXh0DQoJQ2FsbCBCbG9nQ29uZmlnLldyaXRlKCJaQ19CTE9HX1ZFUlNJT04iLCIyLjIgUHJpc20gQnVpbGQgMTMwODAxIikNCglDYWxsIEJsb2dDb25maWcuV3JpdGUoIlpDX0JMT0dfQ0xTSUQiLFpDX0JMT0dfQ0xTSURfT1JJR0lOQUwpDQoNCglDYWxsIEJsb2dDb25maWcuU2F2ZSgpDQoNCg0KCUNhbGwgR2V0RnVuY3Rpb24oKQ0KCUlmIEZ1bmN0aW9ucyhGdW5jdGlvbk1ldGFzLkdldFZhbHVlKCJjb250cm9scGFuZWwiKSkuQ29udGVudD0iPHNwYW4gY2xhc3M9IiJjcC1sb2dpbiIiPjxhIGhyZWY9IiI8I1pDX0JMT0dfSE9TVCM+emJfc3lzdGVtL2NtZC5hc3A/YWN0PWxvZ2luIiI+WzwjWkNfTVNHMDA5Iz5dPC9hPjwvc3Bhbj4mbmJzcDsmbmJzcDs8c3BhbiBjbGFzcz0iImNwLXZycyIiPjxhIGhyZWY9IiI8I1pDX0JMT0dfSE9TVCM+emJfc3lzdGVtL2NtZC5hc3A/YWN0PXZycyIiPls8I1pDX01TRzAyMSM+XTwvYT48L3NwYW4+IiBUaGVuIA0KCQlGdW5jdGlvbnMoRnVuY3Rpb25NZXRhcy5HZXRWYWx1ZSgiY29udHJvbHBhbmVsIikpLkNvbnRlbnQ9IjxzcGFuIGNsYXNzPSIiY3AtaGVsbG8iIj7mgqjlpb0s5qyi6L+O5Yiw6K6/572R56uZITwvc3Bhbj48YnIvPjxzcGFuIGNsYXNzPSIiY3AtbG9naW4iIj48YSBocmVmPSIiPCNaQ19CTE9HX0hPU1QjPnpiX3N5c3RlbS9jbWQuYXNwP2FjdD1sb2dpbiIiPls8I1pDX01TRzAwOSM+XTwvYT48L3NwYW4+Jm5ic3A7Jm5ic3A7PHNwYW4gY2xhc3M9IiJjcC12cnMiIj48YSBocmVmPSIiPCNaQ19CTE9HX0hPU1QjPnpiX3N5c3RlbS9jbWQuYXNwP2FjdD12cnMiIj5bPCNaQ19NU0cwMjEjPl08L2E+PC9zcGFuPiINCgkJRnVuY3Rpb25zKEZ1bmN0aW9uTWV0YXMuR2V0VmFsdWUoImNvbnRyb2xwYW5lbCIpKS5Qb3N0KCkNCglFbmQgSWYNCg0KCUVyci5DbGVhcg0KRW5kIEZ1bmN0aW9uDQonKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqDQoNCg0KDQoNCicqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioNCkZ1bmN0aW9uIEdldFZlcnNpb25CeUJ1aWxkKGIpDQoNCglEaW0gcw0KCWI9Q1N0cihiKQ0KCVNlbGVjdCBDYXNlIGINCglDYXNlICIxMjEwMjgiDQoJcz0iWi1CbG9nIDIuMCBCZXRhMiBCdWlsZCAxMjEwMjgiDQoJQ2FzZSAiMTIxMDAxIg0KCXM9IlotQmxvZyAyLjAgQmV0YTEgQnVpbGQgMTIxMDAxIg0KCUNhc2UgIjEyMTIyMSINCglzPSJaLUJsb2cgMi4wIERvb21zZGF5IEJ1aWxkIDEyMTIyMSINCglDYXNlICIxMzAxMjgiDQoJcz0iWi1CbG9nIDIuMSBQaG9lbml4IEJ1aWxkIDEzMDEyOCINCglDYXNlICIxMzA3MjIiDQoJcz0iWi1CbG9nIDIuMiBQcmlzbSBCdWlsZCAxMzA3MjIiDQoJQ2FzZSAiMTMwMDgwMSINCglzPSJaLUJsb2cgMi4yIFByaXNtIEJ1aWxkIDEzMDgwMSIJDQoJQ2FzZSBFbHNlDQoJcz0iWi1CbG9nIDIuWCBPdGhlciBCdWlsZCAiICYgcw0KCUVuZCBTZWxlY3QNCglHZXRWZXJzaW9uQnlCdWlsZD1zDQoNCkVuZCBGdW5jdGlvbg0KJyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KDQoNCg0KDQonKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqDQpGdW5jdGlvbiBDaGVja1VwZGF0ZURCKGEsYikNCglFcnIuQ2xlYXINCglPbiBFcnJvciBSZXN1bWUgTmV4dA0KCURpbSBScw0KCVNldCBScz1vYmpDb25uLmV4ZWN1dGUoIlNFTEVDVCAiJmEmIiBGUk9NICImYikNCglTZXQgUnM9Tm90aGluZw0KCUlmIEVyci5OdW1iZXI9MCBUaGVuDQoJQ2hlY2tVcGRhdGVEQj1UcnVlDQoJRWxzZQ0KCUVyci5DbGVhcg0KCUNoZWNrVXBkYXRlREI9RmFsc2UNCglFbmQgSWYJDQpFbmQgRnVuY3Rpb24NCicqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioNCg0KDQoNCg0KJyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KJyDnm67nmoTvvJogIA0KJyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KRnVuY3Rpb24gR2V0TWV0YVZhbHVlV2l0aEZvcm0ob2JqKQ0KDQoJRGltIGEsYg0KDQoJRm9yIEVhY2ggYSBJbiBSZXF1ZXN0LkZvcm0gDQoJCUlmIExlZnQoYSw1KT0ibWV0YV8iIFRoZW4NCgkJCWI9TWlkKGEsNixMZW4oYSkpDQoJCQlDYWxsIG9iai5NZXRhLlNldFZhbHVlKCBiLFJlcXVlc3QuRm9ybShhKSApDQoJCUVuZCBJZg0KCU5leHQNCg0KRW5kIEZ1bmN0aW9uDQonKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqDQoNCg0KDQoNCicqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioNCicg55uu55qE77yaICANCicqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioNCkZ1bmN0aW9uIEdldEZ1bmN0aW9uQnlGaWxlTmFtZShmbikNCg0KCUNhbGwgR2V0RnVuY3Rpb24oKQ0KDQoJRGltIG9ialJTc3ViDQoJU2V0IG9ialJTc3ViPW9iakNvbm4uRXhlY3V0ZSgiU0VMRUNUICogRlJPTSBbYmxvZ19GdW5jdGlvbl0gV0hFUkUgW2ZuX0ZpbGVOYW1lXT0nIiYgZm4gJiInIiApDQoJSWYgKE5vdCBvYmpSU3N1Yi5ib2YpIEFuZCAoTm90IG9ialJTc3ViLmVvZikgVGhlbg0KCQlTZXQgR2V0RnVuY3Rpb25CeUZpbGVOYW1lPUZ1bmN0aW9ucyhvYmpSU3N1YigiZm5fSUQiKSkNCglFbHNlDQoJCVNldCBHZXRGdW5jdGlvbkJ5RmlsZU5hbWU9TmV3IFRGdW5jdGlvbg0KCUVuZCBJZg0KCVNldCBvYmpSU3N1Yj1Ob3RoaW5nDQoNCkVuZCBGdW5jdGlvbg0KJyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KDQoNCg0KDQonKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqDQonIOebrueahO+8miANCicgbW9kZT17W2FkZF1bbW9kaWZdW2RlbF19DQonIGl0ZW10eXBlPXtwYWdlLGNhdGUsdGFncyznrYnnrYl9DQonKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqDQpGdW5jdGlvbiBBZGROYXZCYXIoaXRlbXR5cGUsaWQsbmFtZSx1cmwsbW9kZSkNCg0KCUNhbGwgR2V0RnVuY3Rpb24oKQ0KDQoJRGltIHMsczIsdCxpLGosYg0KDQoJYj1GYWxzZQ0KDQoJRGltIHJlDQoJU2V0IHJlID0gTmV3IFJlZ0V4cA0KCXJlLkdsb2JhbCA9IFRydWUNCglyZS5QYXR0ZXJuID0gImhyZWY9IiJbXlwiIl0rPyIiIg0KCXJlLklnbm9yZUNhc2UgPSBUcnVlDQoNCglzPUZ1bmN0aW9ucyhGdW5jdGlvbk1ldGFzLkdldFZhbHVlKCJuYXZiYXIiKSkuQ29udGVudA0KCXMyPXMNCg0KCXQ9U3BsaXQocywiPC9saT4iKQ0KDQoJSWYgVUJvdW5kKHQpPjAgVGhlbg0KCQlGb3IgaT0wIFRvIFVCb3VuZCh0KS0xDQoJCQl0KGkpPXQoaSkgJiAiPC9saT4iDQoJCQlqPXQoaSkNCgkJCUlmIEluU3RyKGosIm1lbnUtIiZpdGVtdHlwZSYiLSImaWQpPjAgVGhlbg0KCQkJCUlmIEluU3RyKG1vZGUsIlttb2RpZl0iKT4wIFRoZW4NCgkJCQkJaj1yZS5SZXBsYWNlKGosImhyZWY9IiIiJnVybCYiIiIiKQ0KCQkJCUVuZCBJZg0KCQkJCWI9VHJ1ZQ0KCQkJRW5kIElmDQoNCgkJCXQoaSk9ag0KCQlOZXh0DQoJRW5kIElmDQoNCgknWkNfTkFWQkFSX01FTlVfSVRFTT0iPGxpIGlkPSIibWVudS0ldHlwZS0laWQiIj48YSBocmVmPSIiJXVybCIiPiVuYW1lPC9hPjwvbGk+Ig0KCUlmIGI9RmFsc2UgQW5kIEluU3RyKG1vZGUsIlthZGRdIik+MCBUaGVuDQoJCWk9VUJvdW5kKHQpDQoJCVJlRGltIFByZXNlcnZlIHQoaSsxKQ0KCQlqPVpDX05BVkJBUl9NRU5VX0lURU0NCgkJaj1SZXBsYWNlKGosIiV0eXBlIixpdGVtdHlwZSkNCgkJaj1SZXBsYWNlKGosIiVpZCIsaWQpDQoJCWo9UmVwbGFjZShqLCIldXJsIix1cmwpDQoJCWo9UmVwbGFjZShqLCIlbmFtZSIsbmFtZSkNCgkJdChpKT1qDQoJRW5kIElmDQoNCglJZiBJblN0cihtb2RlLCJbZGVsXSIpPjAgVGhlbg0KCQlGb3IgaT0wIFRvIFVCb3VuZCh0KS0xDQoJCQlqPXQoaSkNCgkJCUlmIEluU3RyKGosIm1lbnUtIiZpdGVtdHlwZSYiLSImaWQpPjAgVGhlbg0KCQkJCWo9IiINCgkJCUVuZCBJZg0KCQkJdChpKT1qDQoJCU5leHQNCglFbmQgSWYNCg0KCXM9Sm9pbih0LCIiKQ0KDQoJRnVuY3Rpb25zKEZ1bmN0aW9uTWV0YXMuR2V0VmFsdWUoIm5hdmJhciIpKS5Db250ZW50PXMNCglGdW5jdGlvbnMoRnVuY3Rpb25NZXRhcy5HZXRWYWx1ZSgibmF2YmFyIikpLlBvc3QoKQ0KDQoJSWYgczw+czIgVGhlbg0KCQlDYWxsIFNldEJsb2dIaW50KEVtcHR5LEVtcHR5LFRydWUpDQoJRW5kIElmDQoNCkVuZCBGdW5jdGlvbg0KJyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KDQoNCg0KDQonKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqDQonIOebrueahO+8miAgDQonKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqDQpGdW5jdGlvbiBHZXRDYXRlSURCeU5hbWVBbmRBbGlhcyhOYW1lLEFsaWFzKQ0KCURpbSBhcnlDYXRlSW5PcmRlciA6IGFyeUNhdGVJbk9yZGVyPUdldENhdGVnb3J5T3JkZXIoKQ0KCURpbSBtLG4NCglGb3IgbT1MQm91bmQoYXJ5Q2F0ZUluT3JkZXIpIFRvIFVib3VuZChhcnlDYXRlSW5PcmRlcikNCgkJSWYgQWxpYXM9Q2F0ZWdvcnlzKGFyeUNhdGVJbk9yZGVyKG0pKS5BbGlhcyBUaGVuDQoJCQlHZXRDYXRlSURCeU5hbWVBbmRBbGlhcz1DYXRlZ29yeXMoYXJ5Q2F0ZUluT3JkZXIobSkpLklEDQoJCQlFeGl0IEZ1bmN0aW9uDQoJCUVuZCBJZg0KCQlJZiBOYW1lPUNhdGVnb3J5cyhhcnlDYXRlSW5PcmRlcihtKSkuTmFtZSBUaGVuDQoJCQlHZXRDYXRlSURCeU5hbWVBbmRBbGlhcz1DYXRlZ29yeXMoYXJ5Q2F0ZUluT3JkZXIobSkpLklEDQoJCQlFeGl0IEZ1bmN0aW9uDQoJCUVuZCBJZg0KCU5leHQNCglHZXRDYXRlSURCeU5hbWVBbmRBbGlhcz1FbXB0eQ0KRW5kIEZ1bmN0aW9uDQonKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqDQoNCg0KDQoNCicqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioNCicg55uu55qE77yaICANCicqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioNCkZ1bmN0aW9uIENvb2tpZXNQYXRoKCkNCg0KCURpbSBzDQoJcz1CbG9nSG9zdA0KCXM9UmlnaHQoQmxvZ0hvc3QsTGVuKEJsb2dIb3N0KS1JblN0cihCTG9nSG9zdCwiLy8iKS0xKQ0KCXM9UmVwbGFjZShzLFJlcXVlc3QuU2VydmVyVmFyaWFibGVzKCJIVFRQX0hPU1QiKSwiIikNCglJZiBzPSIiIFRoZW4gcz0iLyINCg0KCUNvb2tpZXNQYXRoPXMNCg0KRW5kIEZ1bmN0aW9uDQonKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqDQoNCg0KDQoNCicqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioNCicg55uu55qE77yaICANCicqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioNCkZ1bmN0aW9uIENoZWNrVW5kZWZpbmVkKCkNCg0KCU9uIEVycm9yIFJlc3VtZSBOZXh0DQoJRGltIGENCglhPVVDYXNlKExvYWRGcm9tRmlsZShCbG9nUGF0aCAmInpiX3VzZXJzXGNfb3B0aW9uLmFzcCIsInV0Zi04IikpDQoNCglJZiBUcmltKGEpPSIiIFRoZW4gRXhpdCBGdW5jdGlvbg0KDQoJSWYgSW5TdHIoYSwiRElNIFpDX1NZTlRBWEhJR0hMSUdIVEVSX0VOQUJMRSIpPTAgVGhlbg0KCQlDYWxsIEV4ZWN1dGVHbG9iYWwoIlpDX1NZTlRBWEhJR0hMSUdIVEVSX0VOQUJMRT1UcnVlIikNCglFbmQgSWYNCg0KCUlmIEluU3RyKGEsIkRJTSBaQ19DT0RFTUlSUk9SX0VOQUJMRSIpPTAgVGhlbg0KCQlDYWxsIEV4ZWN1dGVHbG9iYWwoIlpDX0NPREVNSVJST1JfRU5BQkxFPVRydWUiKQ0KCUVuZCBJZg0KDQoJSWYgSW5TdHIoYSwiRElNIFpDX0FSVElDTEVfRVhDRVJQVF9NQVgiKT0wIFRoZW4NCgkJQ2FsbCBFeGVjdXRlR2xvYmFsKCJaQ19BUlRJQ0xFX0VYQ0VSUFRfTUFYPTI1MCIpDQoJRW5kIElmDQoNCglJZiBJblN0cihhLCJESU0gWkNfUE9TVF9TVEFUSUNfTU9ERSIpPTAgVGhlbg0KCQlDYWxsIEV4ZWN1dGVHbG9iYWwoIlpDX1BPU1RfU1RBVElDX01PREU9IiJTVEFUSUMiIiIpDQoJRW5kIElmDQoJDQoJSWYgSW5TdHIoYSwiRElNIFpDX0hUVFBfTEFTVE1PRElGSUVEIik9MCBUaGVuDQoJCUNhbGwgRXhlY3V0ZUdsb2JhbCgiWkNfSFRUUF9MQVNUTU9ESUZJRUQ9RmFsc2UiKQ0KCUVuZCBJZg0KDQoJSWYgSW5TdHIoYSwiRElNIFpDX1BFUk1BTkVOVF9ET01BSU5fRU5BQkxFIik9MCBUaGVuDQoJCUNhbGwgRXhlY3V0ZUdsb2JhbCgiWkNfUEVSTUFORU5UX0RPTUFJTl9FTkFCTEU9RmFsc2UiKQ0KCUVuZCBJZg0KDQoJSWYgSW5TdHIoYSwiRElNIFpDX0RFRkFVTFRfUEFHRVNfVEVNUExBVEUiKT0wIFRoZW4NCgkJQ2FsbCBFeGVjdXRlR2xvYmFsKCJaQ19ERUZBVUxUX1BBR0VTX1RFTVBMQVRFPSIiIiIiKQ0KCUVuZCBJZg0KDQoJSWYgSW5TdHIoYSwiRElNIFpDX1NJREVCQVJfT1JERVIiKT0wIFRoZW4NCgkJQ2FsbCBFeGVjdXRlR2xvYmFsKCJaQ19TSURFQkFSX09SREVSPSIiIiZaQ19ERUZBVUxUX1NJREVCQVImIiIiIikNCglFbmQgSWYNCg0KCUlmIEluU3RyKGEsIkRJTSBaQ19TSURFQkFSX09SREVSMiIpPTAgVGhlbg0KCQlDYWxsIEV4ZWN1dGVHbG9iYWwoIlpDX1NJREVCQVJfT1JERVIyPSIiIiIiKQ0KCUVuZCBJZg0KDQoJSWYgSW5TdHIoYSwiRElNIFpDX1NJREVCQVJfT1JERVIzIik9MCBUaGVuDQoJCUNhbGwgRXhlY3V0ZUdsb2JhbCgiWkNfU0lERUJBUl9PUkRFUjM9IiIiIiIpDQoJRW5kIElmDQoNCglJZiBJblN0cihhLCJESU0gWkNfU0lERUJBUl9PUkRFUjQiKT0wIFRoZW4NCgkJQ2FsbCBFeGVjdXRlR2xvYmFsKCJaQ19TSURFQkFSX09SREVSND0iIiIiIikNCglFbmQgSWYNCg0KCUlmIEluU3RyKGEsIkRJTSBaQ19TSURFQkFSX09SREVSNSIpPTAgVGhlbg0KCQlDYWxsIEV4ZWN1dGVHbG9iYWwoIlpDX1NJREVCQVJfT1JERVI1PSIiIiIiKQ0KCUVuZCBJZg0KCQ0KCUlmIEluU3RyKGEsIkRJTSBaQ19CTE9HX0xBTkdVQUdFUEFDSyIpPTAgVGhlbg0KCQlDYWxsIEV4ZWN1dGVHbG9iYWwoIlpDX0JMT0dfTEFOR1VBR0VQQUNLPSIiU2ltcENoaW5lc2UiIiIpDQoJRW5kIElmDQoNCg0KCUlmIEluU3RyKGEsIkRJTSBaQ19DT01NRU5UX0VYQ0VSUFRfTUFYIik9MCBUaGVuDQoJCUNhbGwgRXhlY3V0ZUdsb2JhbCgiWkNfQ09NTUVOVF9FWENFUlBUX01BWD0yMCIpDQoJRW5kIElmDQoNCg0KRW5kIEZ1bmN0aW9uDQonKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqDQoNCg0KDQoNCicqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioNCicg55uu55qE77yaICANCicqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioNCkZ1bmN0aW9uIEdldEJsb2dWZXJzaW9uKCkNCglEaW0gcw0KCXM9WkNfQkxPR19WRVJTSU9ODQoJcz1SaWdodChzLDYpDQoJcz1UcmltKHMpDQoJcz1DTG5nKHMpDQoJR2V0QmxvZ1ZlcnNpb249cw0KRW5kIEZ1bmN0aW9uDQonKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqDQoNCg0KDQoNCicqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioNCicg55uu55qE77ya5Li65Li76aKY5o+Q5L6b55qE5L6/5o235Ye95pWwLOWPr+S7peeUn+aIkOiHquW3seeahOaooeWdlw0KJyDlj4LmlbA65Li76aKYSUQs5qih5Z2X5ZCNLOaooeWdl0lEKOaWh+S7tuWQjSks5qih5Z2XSHRtbElELOaooeWdl+exu+WeiyhkaXYvdWwpLOaooeWdl01heGxpKOm7mOiupDApLOaooeWdl+WGheWuuQ0KJyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KRnVuY3Rpb24gQWRkVGhlbWVGdW5jdGlvbihUaGVtZUlELEZ1bmN0aW9uTmFtZSxGdW5jdGlvbkZpbGVOYW1lLEZ1bmN0aW9uSHRtbElELEZ1bmN0aW9uVHlwZSxGdW5jdGlvbk1heExpLEZ1bmN0aW9uSGlkZVRpdGxlLEZ1bmN0aW9uQ29udGVudCkNCg0KCURpbSBvYmpGdW5jdGlvbg0KCVNldCBvYmpGdW5jdGlvbj1HZXRGdW5jdGlvbkJ5RmlsZU5hbWUoRnVuY3Rpb25GaWxlTmFtZSkNCg0KCW9iakZ1bmN0aW9uLk5hbWU9RnVuY3Rpb25OYW1lDQoJb2JqRnVuY3Rpb24uRmlsZU5hbWU9RnVuY3Rpb25GaWxlTmFtZQ0KCW9iakZ1bmN0aW9uLkh0bWxJRD1GdW5jdGlvbkh0bWxJRA0KCW9iakZ1bmN0aW9uLkZ0eXBlPUZ1bmN0aW9uVHlwZQ0KCW9iakZ1bmN0aW9uLk1heExpPUZ1bmN0aW9uTWF4TGkNCglvYmpGdW5jdGlvbi5Db250ZW50PUZ1bmN0aW9uQ29udGVudA0KCW9iakZ1bmN0aW9uLklzSGlkZVRpdGxlPUNCb29sKEZ1bmN0aW9uSGlkZVRpdGxlKQ0KCW9iakZ1bmN0aW9uLlNvdXJjZT0idGhlbWVfIiYgVGhlbWVJRA0KDQoJSWYgb2JqRnVuY3Rpb24uUG9zdCBUaGVuDQoJCUFkZFRoZW1lRnVuY3Rpb249VHJ1ZQ0KCUVuZCBJZg0KCVNldCBvYmpGdW5jdGlvbj1Ob3RoaW5nDQoNCkVuZCBGdW5jdGlvbg0KJyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KDQoNCg0KDQonKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqDQonIOebrueahO+8muS4uuaPkuS7ti4uLiANCicg5Y+C5pWwOuaPkuS7tklELOaooeWdl+WQjSzmqKHlnZdJRCjmlofku7blkI0pLOaooeWdl0h0bWxJRCzmqKHlnZfnsbvlnosoZGl2L3VsKSzmqKHlnZdNYXhsaSjpu5jorqQwKSzmqKHlnZflhoXlrrkNCicqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioNCkZ1bmN0aW9uIEFkZFBsdWdpbkZ1bmN0aW9uKFBsdWdpbklELEZ1bmN0aW9uTmFtZSxGdW5jdGlvbkZpbGVOYW1lLEZ1bmN0aW9uSHRtbElELEZ1bmN0aW9uVHlwZSxGdW5jdGlvbk1heExpLEZ1bmN0aW9uSGlkZVRpdGxlLEZ1bmN0aW9uQ29udGVudCkNCg0KCURpbSBvYmpGdW5jdGlvbg0KCVNldCBvYmpGdW5jdGlvbj1HZXRGdW5jdGlvbkJ5RmlsZU5hbWUoRnVuY3Rpb25GaWxlTmFtZSkNCg0KCW9iakZ1bmN0aW9uLk5hbWU9RnVuY3Rpb25OYW1lDQoJb2JqRnVuY3Rpb24uRmlsZU5hbWU9RnVuY3Rpb25GaWxlTmFtZQ0KCW9iakZ1bmN0aW9uLkh0bWxJRD1GdW5jdGlvbkh0bWxJRA0KCW9iakZ1bmN0aW9uLkZ0eXBlPUZ1bmN0aW9uVHlwZQ0KCW9iakZ1bmN0aW9uLk1heExpPUZ1bmN0aW9uTWF4TGkNCglvYmpGdW5jdGlvbi5Db250ZW50PUZ1bmN0aW9uQ29udGVudA0KCW9iakZ1bmN0aW9uLklzSGlkZVRpdGxlPUNCb29sKEZ1bmN0aW9uSGlkZVRpdGxlKQ0KCW9iakZ1bmN0aW9uLlNvdXJjZT0icGx1Z2luXyImIFBsdWdpbklEDQoNCglJZiBvYmpGdW5jdGlvbi5Qb3N0IFRoZW4NCgkJQWRkUGx1Z2luRnVuY3Rpb249VHJ1ZQ0KCUVuZCBJZg0KCVNldCBvYmpGdW5jdGlvbj1Ob3RoaW5nDQoNCkVuZCBGdW5jdGlvbg0KJyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KDQoNCg0KDQpGdW5jdGlvbiBDcmVhdGVWYWxpZENvZGUoc3RyVmVyaWZ5TnVtYmVyKQ0KCUNhbGwgRmlsdGVyX1BsdWdpbl9WYWxpZENvZGVfQ3JlYXRlKHN0clZlcmlmeU51bWJlcikNCkVuZCBGdW5jdGlvbg0KDQoNCkZ1bmN0aW9uIENoZWNrVmFsaWRDb2RlKHN0cklucHV0TnVtYmVyKQ0KCUNoZWNrVmFsaWRDb2RlPUZpbHRlcl9QbHVnaW5fVmFsaWRDb2RlX0NoZWNrKHN0cklucHV0TnVtYmVyKQ0KRW5kIEZ1bmN0aW9uDQoNCg0KJT4NCg==</file>
	<file name='zb_system\FUNCTION\c_system_event.asp' crc32='E2411104'  dt:dt='bin.base64'></file>
	<file name='zb_system\FUNCTION\c_system_lib.asp' crc32='FF34747D'  dt:dt='bin.base64'></file>
	<file name='zb_system\XML-RPC\index.asp' crc32='8DBD3103'  dt:dt='bin.base64'></file>
	<file name='zb_users\LANGUAGE\SimpChinese.asp' crc32='ABBCB29D'  dt:dt='bin.base64'></file>
</files>